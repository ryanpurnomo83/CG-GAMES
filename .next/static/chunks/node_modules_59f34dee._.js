(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/file-saver/FileSaver.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */ /*global self */ /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */ /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */ var saveAs = saveAs || function(view) {
    "use strict";
    // IE <10 is explicitly unsupported
    if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
        return;
    }
    var doc = view.document, get_URL = function() {
        return view.URL || view.webkitURL || view;
    }, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"), can_use_save_link = "download" in save_link, click = function(node) {
        var event = new MouseEvent("click");
        node.dispatchEvent(event);
    }, is_safari = /constructor/i.test(view.HTMLElement) || view.safari, is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent), throw_outside = function(ex) {
        (view.setImmediate || view.setTimeout)(function() {
            throw ex;
        }, 0);
    }, force_saveable_type = "application/octet-stream", arbitrary_revoke_timeout = 1000 * 40 // in ms
    , revoke = function(file) {
        var revoker = function() {
            if (typeof file === "string") {
                get_URL().revokeObjectURL(file);
            } else {
                file.remove();
            }
        };
        setTimeout(revoker, arbitrary_revoke_timeout);
    }, dispatch = function(filesaver, event_types, event) {
        event_types = [].concat(event_types);
        var i = event_types.length;
        while(i--){
            var listener = filesaver["on" + event_types[i]];
            if (typeof listener === "function") {
                try {
                    listener.call(filesaver, event || filesaver);
                } catch (ex) {
                    throw_outside(ex);
                }
            }
        }
    }, auto_bom = function(blob) {
        // prepend BOM for UTF-8 XML and text/* types (including HTML)
        // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
        if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
            return new Blob([
                String.fromCharCode(0xFEFF),
                blob
            ], {
                type: blob.type
            });
        }
        return blob;
    }, FileSaver = function(blob, name, no_auto_bom) {
        if (!no_auto_bom) {
            blob = auto_bom(blob);
        }
        // First try a.download, then web filesystem, then object URLs
        var filesaver = this, type = blob.type, force = type === force_saveable_type, object_url, dispatch_all = function() {
            dispatch(filesaver, "writestart progress write writeend".split(" "));
        }, fs_error = function() {
            if ((is_chrome_ios || force && is_safari) && view.FileReader) {
                // Safari doesn't allow downloading of blob urls
                var reader = new FileReader();
                reader.onloadend = function() {
                    var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
                    var popup = view.open(url, '_blank');
                    if (!popup) view.location.href = url;
                    url = undefined; // release reference before dispatching
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                };
                reader.readAsDataURL(blob);
                filesaver.readyState = filesaver.INIT;
                return;
            }
            // don't create more object URLs than needed
            if (!object_url) {
                object_url = get_URL().createObjectURL(blob);
            }
            if (force) {
                view.location.href = object_url;
            } else {
                var opened = view.open(object_url, "_blank");
                if (!opened) {
                    // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                    view.location.href = object_url;
                }
            }
            filesaver.readyState = filesaver.DONE;
            dispatch_all();
            revoke(object_url);
        };
        filesaver.readyState = filesaver.INIT;
        if (can_use_save_link) {
            object_url = get_URL().createObjectURL(blob);
            setTimeout(function() {
                save_link.href = object_url;
                save_link.download = name;
                click(save_link);
                dispatch_all();
                revoke(object_url);
                filesaver.readyState = filesaver.DONE;
            });
            return;
        }
        fs_error();
    }, FS_proto = FileSaver.prototype, saveAs = function(blob, name, no_auto_bom) {
        return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
    };
    // IE 10+ (native saveAs)
    if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
        return function(blob, name, no_auto_bom) {
            name = name || blob.name || "download";
            if (!no_auto_bom) {
                blob = auto_bom(blob);
            }
            return navigator.msSaveOrOpenBlob(blob, name);
        };
    }
    FS_proto.abort = function() {};
    FS_proto.readyState = FS_proto.INIT = 0;
    FS_proto.WRITING = 1;
    FS_proto.DONE = 2;
    FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
    return saveAs;
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content);
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window
if (("TURBOPACK compile-time value", "object") !== "undefined" && module.exports) {
    module.exports.saveAs = saveAs;
} else if (typeof define !== "undefined" && define !== null && define.amd !== null) {
    ((r)=>r !== undefined && __turbopack_context__.v(r))(function() {
        return saveAs;
    }(__turbopack_context__.r, exports, module));
}
}}),
"[project]/node_modules/omggif/omggif.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
// (c) Dean McNamee <dean@gmail.com>, 2013.
//
// https://github.com/deanm/omggif
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
// including animation and compression.  It does not rely on any specific
// underlying system, so should run in the browser, Node, or Plask.
"use strict";
function GifWriter(buf, width, height, gopts) {
    var p = 0;
    var gopts = gopts === undefined ? {} : gopts;
    var loop_count = gopts.loop === undefined ? null : gopts.loop;
    var global_palette = gopts.palette === undefined ? null : gopts.palette;
    if (width <= 0 || height <= 0 || width > 65535 || height > 65535) throw new Error("Width/Height invalid.");
    function check_palette_and_num_colors(palette) {
        var num_colors = palette.length;
        if (num_colors < 2 || num_colors > 256 || num_colors & num_colors - 1) {
            throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
        }
        return num_colors;
    }
    // - Header.
    buf[p++] = 0x47;
    buf[p++] = 0x49;
    buf[p++] = 0x46; // GIF
    buf[p++] = 0x38;
    buf[p++] = 0x39;
    buf[p++] = 0x61; // 89a
    // Handling of Global Color Table (palette) and background index.
    var gp_num_colors_pow2 = 0;
    var background = 0;
    if (global_palette !== null) {
        var gp_num_colors = check_palette_and_num_colors(global_palette);
        while(gp_num_colors >>= 1)++gp_num_colors_pow2;
        gp_num_colors = 1 << gp_num_colors_pow2;
        --gp_num_colors_pow2;
        if (gopts.background !== undefined) {
            background = gopts.background;
            if (background >= gp_num_colors) throw new Error("Background index out of range.");
            // The GIF spec states that a background index of 0 should be ignored, so
            // this is probably a mistake and you really want to set it to another
            // slot in the palette.  But actually in the end most browsers, etc end
            // up ignoring this almost completely (including for dispose background).
            if (background === 0) throw new Error("Background index explicitly passed as 0.");
        }
    }
    // - Logical Screen Descriptor.
    // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.
    buf[p++] = width & 0xff;
    buf[p++] = width >> 8 & 0xff;
    buf[p++] = height & 0xff;
    buf[p++] = height >> 8 & 0xff;
    // NOTE: Indicates 0-bpp original color resolution (unused?).
    buf[p++] = (global_palette !== null ? 0x80 : 0) | // Global Color Table Flag.
    gp_num_colors_pow2; // NOTE: No sort flag (unused?).
    buf[p++] = background; // Background Color Index.
    buf[p++] = 0; // Pixel aspect ratio (unused?).
    // - Global Color Table
    if (global_palette !== null) {
        for(var i = 0, il = global_palette.length; i < il; ++i){
            var rgb = global_palette[i];
            buf[p++] = rgb >> 16 & 0xff;
            buf[p++] = rgb >> 8 & 0xff;
            buf[p++] = rgb & 0xff;
        }
    }
    if (loop_count !== null) {
        if (loop_count < 0 || loop_count > 65535) throw new Error("Loop count invalid.");
        // Extension code, label, and length.
        buf[p++] = 0x21;
        buf[p++] = 0xff;
        buf[p++] = 0x0b;
        // NETSCAPE2.0
        buf[p++] = 0x4e;
        buf[p++] = 0x45;
        buf[p++] = 0x54;
        buf[p++] = 0x53;
        buf[p++] = 0x43;
        buf[p++] = 0x41;
        buf[p++] = 0x50;
        buf[p++] = 0x45;
        buf[p++] = 0x32;
        buf[p++] = 0x2e;
        buf[p++] = 0x30;
        // Sub-block
        buf[p++] = 0x03;
        buf[p++] = 0x01;
        buf[p++] = loop_count & 0xff;
        buf[p++] = loop_count >> 8 & 0xff;
        buf[p++] = 0x00; // Terminator.
    }
    var ended = false;
    this.addFrame = function(x, y, w, h, indexed_pixels, opts) {
        if (ended === true) {
            --p;
            ended = false;
        } // Un-end.
        opts = opts === undefined ? {} : opts;
        // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual
        // canvas width/height, I imagine?
        if (x < 0 || y < 0 || x > 65535 || y > 65535) throw new Error("x/y invalid.");
        if (w <= 0 || h <= 0 || w > 65535 || h > 65535) throw new Error("Width/Height invalid.");
        if (indexed_pixels.length < w * h) throw new Error("Not enough pixels for the frame size.");
        var using_local_palette = true;
        var palette = opts.palette;
        if (palette === undefined || palette === null) {
            using_local_palette = false;
            palette = global_palette;
        }
        if (palette === undefined || palette === null) throw new Error("Must supply either a local or global palette.");
        var num_colors = check_palette_and_num_colors(palette);
        // Compute the min_code_size (power of 2), destroying num_colors.
        var min_code_size = 0;
        while(num_colors >>= 1)++min_code_size;
        num_colors = 1 << min_code_size; // Now we can easily get it back.
        var delay = opts.delay === undefined ? 0 : opts.delay;
        // From the spec:
        //     0 -   No disposal specified. The decoder is
        //           not required to take any action.
        //     1 -   Do not dispose. The graphic is to be left
        //           in place.
        //     2 -   Restore to background color. The area used by the
        //           graphic must be restored to the background color.
        //     3 -   Restore to previous. The decoder is required to
        //           restore the area overwritten by the graphic with
        //           what was there prior to rendering the graphic.
        //  4-7 -    To be defined.
        // NOTE(deanm): Dispose background doesn't really work, apparently most
        // browsers ignore the background palette index and clear to transparency.
        var disposal = opts.disposal === undefined ? 0 : opts.disposal;
        if (disposal < 0 || disposal > 3) throw new Error("Disposal out of range.");
        var use_transparency = false;
        var transparent_index = 0;
        if (opts.transparent !== undefined && opts.transparent !== null) {
            use_transparency = true;
            transparent_index = opts.transparent;
            if (transparent_index < 0 || transparent_index >= num_colors) throw new Error("Transparent color index.");
        }
        if (disposal !== 0 || use_transparency || delay !== 0) {
            // - Graphics Control Extension
            buf[p++] = 0x21;
            buf[p++] = 0xf9; // Extension / Label.
            buf[p++] = 4; // Byte size.
            buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);
            buf[p++] = delay & 0xff;
            buf[p++] = delay >> 8 & 0xff;
            buf[p++] = transparent_index; // Transparent color index.
            buf[p++] = 0; // Block Terminator.
        }
        // - Image Descriptor
        buf[p++] = 0x2c; // Image Seperator.
        buf[p++] = x & 0xff;
        buf[p++] = x >> 8 & 0xff; // Left.
        buf[p++] = y & 0xff;
        buf[p++] = y >> 8 & 0xff; // Top.
        buf[p++] = w & 0xff;
        buf[p++] = w >> 8 & 0xff;
        buf[p++] = h & 0xff;
        buf[p++] = h >> 8 & 0xff;
        // NOTE: No sort flag (unused?).
        // TODO(deanm): Support interlace.
        buf[p++] = using_local_palette === true ? 0x80 | min_code_size - 1 : 0;
        // - Local Color Table
        if (using_local_palette === true) {
            for(var i = 0, il = palette.length; i < il; ++i){
                var rgb = palette[i];
                buf[p++] = rgb >> 16 & 0xff;
                buf[p++] = rgb >> 8 & 0xff;
                buf[p++] = rgb & 0xff;
            }
        }
        p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);
        return p;
    };
    this.end = function() {
        if (ended === false) {
            buf[p++] = 0x3b; // Trailer.
            ended = true;
        }
        return p;
    };
    this.getOutputBuffer = function() {
        return buf;
    };
    this.setOutputBuffer = function(v) {
        buf = v;
    };
    this.getOutputBufferPosition = function() {
        return p;
    };
    this.setOutputBufferPosition = function(v) {
        p = v;
    };
}
// Main compression routine, palette indexes -> LZW code stream.
// |index_stream| must have at least one entry.
function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
    buf[p++] = min_code_size;
    var cur_subblock = p++; // Pointing at the length field.
    var clear_code = 1 << min_code_size;
    var code_mask = clear_code - 1;
    var eoi_code = clear_code + 1;
    var next_code = eoi_code + 1;
    var cur_code_size = min_code_size + 1; // Number of bits per code.
    var cur_shift = 0;
    // We have at most 12-bit codes, so we should have to hold a max of 19
    // bits here (and then we would write out).
    var cur = 0;
    function emit_bytes_to_buffer(bit_block_size) {
        while(cur_shift >= bit_block_size){
            buf[p++] = cur & 0xff;
            cur >>= 8;
            cur_shift -= 8;
            if (p === cur_subblock + 256) {
                buf[cur_subblock] = 255;
                cur_subblock = p++;
            }
        }
    }
    function emit_code(c) {
        cur |= c << cur_shift;
        cur_shift += cur_code_size;
        emit_bytes_to_buffer(8);
    }
    // I am not an expert on the topic, and I don't want to write a thesis.
    // However, it is good to outline here the basic algorithm and the few data
    // structures and optimizations here that make this implementation fast.
    // The basic idea behind LZW is to build a table of previously seen runs
    // addressed by a short id (herein called output code).  All data is
    // referenced by a code, which represents one or more values from the
    // original input stream.  All input bytes can be referenced as the same
    // value as an output code.  So if you didn't want any compression, you
    // could more or less just output the original bytes as codes (there are
    // some details to this, but it is the idea).  In order to achieve
    // compression, values greater then the input range (codes can be up to
    // 12-bit while input only 8-bit) represent a sequence of previously seen
    // inputs.  The decompressor is able to build the same mapping while
    // decoding, so there is always a shared common knowledge between the
    // encoding and decoder, which is also important for "timing" aspects like
    // how to handle variable bit width code encoding.
    //
    // One obvious but very important consequence of the table system is there
    // is always a unique id (at most 12-bits) to map the runs.  'A' might be
    // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship
    // can be used for an effecient lookup strategy for the code mapping.  We
    // need to know if a run has been seen before, and be able to map that run
    // to the output code.  Since we start with known unique ids (input bytes),
    // and then from those build more unique ids (table entries), we can
    // continue this chain (almost like a linked list) to always have small
    // integer values that represent the current byte chains in the encoder.
    // This means instead of tracking the input bytes (AAAABCD) to know our
    // current state, we can track the table entry for AAAABC (it is guaranteed
    // to exist by the nature of the algorithm) and the next character D.
    // Therefor the tuple of (table_entry, byte) is guaranteed to also be
    // unique.  This allows us to create a simple lookup key for mapping input
    // sequences to codes (table indices) without having to store or search
    // any of the code sequences.  So if 'AAAA' has a table entry of 12, the
    // tuple of ('AAAA', K) for any input byte K will be unique, and can be our
    // key.  This leads to a integer value at most 20-bits, which can always
    // fit in an SMI value and be used as a fast sparse array / object key.
    // Output code for the current contents of the index buffer.
    var ib_code = index_stream[0] & code_mask; // Load first input index.
    var code_table = {}; // Key'd on our 20-bit "tuple".
    emit_code(clear_code); // Spec says first code should be a clear code.
    // First index already loaded, process the rest of the stream.
    for(var i = 1, il = index_stream.length; i < il; ++i){
        var k = index_stream[i] & code_mask;
        var cur_key = ib_code << 8 | k; // (prev, k) unique tuple.
        var cur_code = code_table[cur_key]; // buffer + k.
        // Check if we have to create a new code table entry.
        if (cur_code === undefined) {
            // Emit index buffer (without k).
            // This is an inline version of emit_code, because this is the core
            // writing routine of the compressor (and V8 cannot inline emit_code
            // because it is a closure here in a different context).  Additionally
            // we can call emit_byte_to_buffer less often, because we can have
            // 30-bits (from our 31-bit signed SMI), and we know our codes will only
            // be 12-bits, so can safely have 18-bits there without overflow.
            // emit_code(ib_code);
            cur |= ib_code << cur_shift;
            cur_shift += cur_code_size;
            while(cur_shift >= 8){
                buf[p++] = cur & 0xff;
                cur >>= 8;
                cur_shift -= 8;
                if (p === cur_subblock + 256) {
                    buf[cur_subblock] = 255;
                    cur_subblock = p++;
                }
            }
            if (next_code === 4096) {
                emit_code(clear_code);
                next_code = eoi_code + 1;
                cur_code_size = min_code_size + 1;
                code_table = {};
            } else {
                // Increase our variable bit code sizes if necessary.  This is a bit
                // tricky as it is based on "timing" between the encoding and
                // decoder.  From the encoders perspective this should happen after
                // we've already emitted the index buffer and are about to create the
                // first table entry that would overflow our current code bit size.
                if (next_code >= 1 << cur_code_size) ++cur_code_size;
                code_table[cur_key] = next_code++; // Insert into code table.
            }
            ib_code = k; // Index buffer to single input k.
        } else {
            ib_code = cur_code; // Index buffer to sequence in code table.
        }
    }
    emit_code(ib_code); // There will still be something in the index buffer.
    emit_code(eoi_code); // End Of Information.
    // Flush / finalize the sub-blocks stream to the buffer.
    emit_bytes_to_buffer(1);
    // Finish the sub-blocks, writing out any unfinished lengths and
    // terminating with a sub-block of length 0.  If we have already started
    // but not yet used a sub-block it can just become the terminator.
    if (cur_subblock + 1 === p) {
        buf[cur_subblock] = 0;
    } else {
        buf[cur_subblock] = p - cur_subblock - 1;
        buf[p++] = 0;
    }
    return p;
}
function GifReader(buf) {
    var p = 0;
    // - Header (GIF87a or GIF89a).
    if (buf[p++] !== 0x47 || buf[p++] !== 0x49 || buf[p++] !== 0x46 || buf[p++] !== 0x38 || (buf[p++] + 1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {
        throw new Error("Invalid GIF 87a/89a header.");
    }
    // - Logical Screen Descriptor.
    var width = buf[p++] | buf[p++] << 8;
    var height = buf[p++] | buf[p++] << 8;
    var pf0 = buf[p++]; // <Packed Fields>.
    var global_palette_flag = pf0 >> 7;
    var num_global_colors_pow2 = pf0 & 0x7;
    var num_global_colors = 1 << num_global_colors_pow2 + 1;
    var background = buf[p++];
    buf[p++]; // Pixel aspect ratio (unused?).
    var global_palette_offset = null;
    var global_palette_size = null;
    if (global_palette_flag) {
        global_palette_offset = p;
        global_palette_size = num_global_colors;
        p += num_global_colors * 3; // Seek past palette.
    }
    var no_eof = true;
    var frames = [];
    var delay = 0;
    var transparent_index = null;
    var disposal = 0; // 0 - No disposal specified.
    var loop_count = null;
    this.width = width;
    this.height = height;
    while(no_eof && p < buf.length){
        switch(buf[p++]){
            case 0x21:
                switch(buf[p++]){
                    case 0xff:
                        // Try if it's a Netscape block (with animation loop counter).
                        if (buf[p] !== 0x0b || // 21 FF already read, check block size.
                        // NETSCAPE2.0
                        buf[p + 1] == 0x4e && buf[p + 2] == 0x45 && buf[p + 3] == 0x54 && buf[p + 4] == 0x53 && buf[p + 5] == 0x43 && buf[p + 6] == 0x41 && buf[p + 7] == 0x50 && buf[p + 8] == 0x45 && buf[p + 9] == 0x32 && buf[p + 10] == 0x2e && buf[p + 11] == 0x30 && // Sub-block
                        buf[p + 12] == 0x03 && buf[p + 13] == 0x01 && buf[p + 16] == 0) {
                            p += 14;
                            loop_count = buf[p++] | buf[p++] << 8;
                            p++; // Skip terminator.
                        } else {
                            p += 12;
                            while(true){
                                var block_size = buf[p++];
                                // Bad block size (ex: undefined from an out of bounds read).
                                if (!(block_size >= 0)) throw Error("Invalid block size");
                                if (block_size === 0) break; // 0 size is terminator
                                p += block_size;
                            }
                        }
                        break;
                    case 0xf9:
                        if (buf[p++] !== 0x4 || buf[p + 4] !== 0) throw new Error("Invalid graphics extension block.");
                        var pf1 = buf[p++];
                        delay = buf[p++] | buf[p++] << 8;
                        transparent_index = buf[p++];
                        if ((pf1 & 1) === 0) transparent_index = null;
                        disposal = pf1 >> 2 & 0x7;
                        p++; // Skip terminator.
                        break;
                    case 0xfe:
                        while(true){
                            var block_size = buf[p++];
                            // Bad block size (ex: undefined from an out of bounds read).
                            if (!(block_size >= 0)) throw Error("Invalid block size");
                            if (block_size === 0) break; // 0 size is terminator
                            // console.log(buf.slice(p, p+block_size).toString('ascii'));
                            p += block_size;
                        }
                        break;
                    default:
                        throw new Error("Unknown graphic control label: 0x" + buf[p - 1].toString(16));
                }
                break;
            case 0x2c:
                var x = buf[p++] | buf[p++] << 8;
                var y = buf[p++] | buf[p++] << 8;
                var w = buf[p++] | buf[p++] << 8;
                var h = buf[p++] | buf[p++] << 8;
                var pf2 = buf[p++];
                var local_palette_flag = pf2 >> 7;
                var interlace_flag = pf2 >> 6 & 1;
                var num_local_colors_pow2 = pf2 & 0x7;
                var num_local_colors = 1 << num_local_colors_pow2 + 1;
                var palette_offset = global_palette_offset;
                var palette_size = global_palette_size;
                var has_local_palette = false;
                if (local_palette_flag) {
                    var has_local_palette = true;
                    palette_offset = p; // Override with local palette.
                    palette_size = num_local_colors;
                    p += num_local_colors * 3; // Seek past palette.
                }
                var data_offset = p;
                p++; // codesize
                while(true){
                    var block_size = buf[p++];
                    // Bad block size (ex: undefined from an out of bounds read).
                    if (!(block_size >= 0)) throw Error("Invalid block size");
                    if (block_size === 0) break; // 0 size is terminator
                    p += block_size;
                }
                frames.push({
                    x: x,
                    y: y,
                    width: w,
                    height: h,
                    has_local_palette: has_local_palette,
                    palette_offset: palette_offset,
                    palette_size: palette_size,
                    data_offset: data_offset,
                    data_length: p - data_offset,
                    transparent_index: transparent_index,
                    interlaced: !!interlace_flag,
                    delay: delay,
                    disposal: disposal
                });
                break;
            case 0x3b:
                no_eof = false;
                break;
            default:
                throw new Error("Unknown gif block: 0x" + buf[p - 1].toString(16));
                break;
        }
    }
    this.numFrames = function() {
        return frames.length;
    };
    this.loopCount = function() {
        return loop_count;
    };
    this.frameInfo = function(frame_num) {
        if (frame_num < 0 || frame_num >= frames.length) throw new Error("Frame index out of range.");
        return frames[frame_num];
    };
    this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {
        var frame = this.frameInfo(frame_num);
        var num_pixels = frame.width * frame.height;
        var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.
        GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);
        var palette_offset = frame.palette_offset;
        // NOTE(deanm): It seems to be much faster to compare index to 256 than
        // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
        // the profile, not sure if it's related to using a Uint8Array.
        var trans = frame.transparent_index;
        if (trans === null) trans = 256;
        // We are possibly just blitting to a portion of the entire frame.
        // That is a subrect within the framerect, so the additional pixels
        // must be skipped over after we finished a scanline.
        var framewidth = frame.width;
        var framestride = width - framewidth;
        var xleft = framewidth; // Number of subrect pixels left in scanline.
        // Output indicies of the top left and bottom right corners of the subrect.
        var opbeg = (frame.y * width + frame.x) * 4;
        var opend = ((frame.y + frame.height) * width + frame.x) * 4;
        var op = opbeg;
        var scanstride = framestride * 4;
        // Use scanstride to skip past the rows when interlacing.  This is skipping
        // 7 rows for the first two passes, then 3 then 1.
        if (frame.interlaced === true) {
            scanstride += width * 4 * 7; // Pass 1.
        }
        var interlaceskip = 8; // Tracking the row interval in the current pass.
        for(var i = 0, il = index_stream.length; i < il; ++i){
            var index = index_stream[i];
            if (xleft === 0) {
                op += scanstride;
                xleft = framewidth;
                if (op >= opend) {
                    scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);
                    // interlaceskip / 2 * 4 is interlaceskip << 1.
                    op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                    interlaceskip >>= 1;
                }
            }
            if (index === trans) {
                op += 4;
            } else {
                var r = buf[palette_offset + index * 3];
                var g = buf[palette_offset + index * 3 + 1];
                var b = buf[palette_offset + index * 3 + 2];
                pixels[op++] = b;
                pixels[op++] = g;
                pixels[op++] = r;
                pixels[op++] = 255;
            }
            --xleft;
        }
    };
    // I will go to copy and paste hell one day...
    this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {
        var frame = this.frameInfo(frame_num);
        var num_pixels = frame.width * frame.height;
        var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.
        GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);
        var palette_offset = frame.palette_offset;
        // NOTE(deanm): It seems to be much faster to compare index to 256 than
        // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in
        // the profile, not sure if it's related to using a Uint8Array.
        var trans = frame.transparent_index;
        if (trans === null) trans = 256;
        // We are possibly just blitting to a portion of the entire frame.
        // That is a subrect within the framerect, so the additional pixels
        // must be skipped over after we finished a scanline.
        var framewidth = frame.width;
        var framestride = width - framewidth;
        var xleft = framewidth; // Number of subrect pixels left in scanline.
        // Output indicies of the top left and bottom right corners of the subrect.
        var opbeg = (frame.y * width + frame.x) * 4;
        var opend = ((frame.y + frame.height) * width + frame.x) * 4;
        var op = opbeg;
        var scanstride = framestride * 4;
        // Use scanstride to skip past the rows when interlacing.  This is skipping
        // 7 rows for the first two passes, then 3 then 1.
        if (frame.interlaced === true) {
            scanstride += width * 4 * 7; // Pass 1.
        }
        var interlaceskip = 8; // Tracking the row interval in the current pass.
        for(var i = 0, il = index_stream.length; i < il; ++i){
            var index = index_stream[i];
            if (xleft === 0) {
                op += scanstride;
                xleft = framewidth;
                if (op >= opend) {
                    scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);
                    // interlaceskip / 2 * 4 is interlaceskip << 1.
                    op = opbeg + (framewidth + framestride) * (interlaceskip << 1);
                    interlaceskip >>= 1;
                }
            }
            if (index === trans) {
                op += 4;
            } else {
                var r = buf[palette_offset + index * 3];
                var g = buf[palette_offset + index * 3 + 1];
                var b = buf[palette_offset + index * 3 + 2];
                pixels[op++] = r;
                pixels[op++] = g;
                pixels[op++] = b;
                pixels[op++] = 255;
            }
            --xleft;
        }
    };
}
function GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {
    var min_code_size = code_stream[p++];
    var clear_code = 1 << min_code_size;
    var eoi_code = clear_code + 1;
    var next_code = eoi_code + 1;
    var cur_code_size = min_code_size + 1; // Number of bits per code.
    // NOTE: This shares the same name as the encoder, but has a different
    // meaning here.  Here this masks each code coming from the code stream.
    var code_mask = (1 << cur_code_size) - 1;
    var cur_shift = 0;
    var cur = 0;
    var op = 0; // Output pointer.
    var subblock_size = code_stream[p++];
    // TODO(deanm): Would using a TypedArray be any faster?  At least it would
    // solve the fast mode / backing store uncertainty.
    // var code_table = Array(4096);
    var code_table = new Int32Array(4096); // Can be signed, we only use 20 bits.
    var prev_code = null; // Track code-1.
    while(true){
        // Read up to two bytes, making sure we always 12-bits for max sized code.
        while(cur_shift < 16){
            if (subblock_size === 0) break; // No more data to be read.
            cur |= code_stream[p++] << cur_shift;
            cur_shift += 8;
            if (subblock_size === 1) {
                subblock_size = code_stream[p++]; // Next subblock.
            } else {
                --subblock_size;
            }
        }
        // TODO(deanm): We should never really get here, we should have received
        // and EOI.
        if (cur_shift < cur_code_size) break;
        var code = cur & code_mask;
        cur >>= cur_code_size;
        cur_shift -= cur_code_size;
        // TODO(deanm): Maybe should check that the first code was a clear code,
        // at least this is what you're supposed to do.  But actually our encoder
        // now doesn't emit a clear code first anyway.
        if (code === clear_code) {
            // We don't actually have to clear the table.  This could be a good idea
            // for greater error checking, but we don't really do any anyway.  We
            // will just track it with next_code and overwrite old entries.
            next_code = eoi_code + 1;
            cur_code_size = min_code_size + 1;
            code_mask = (1 << cur_code_size) - 1;
            // Don't update prev_code ?
            prev_code = null;
            continue;
        } else if (code === eoi_code) {
            break;
        }
        // We have a similar situation as the decoder, where we want to store
        // variable length entries (code table entries), but we want to do in a
        // faster manner than an array of arrays.  The code below stores sort of a
        // linked list within the code table, and then "chases" through it to
        // construct the dictionary entries.  When a new entry is created, just the
        // last byte is stored, and the rest (prefix) of the entry is only
        // referenced by its table entry.  Then the code chases through the
        // prefixes until it reaches a single byte code.  We have to chase twice,
        // first to compute the length, and then to actually copy the data to the
        // output (backwards, since we know the length).  The alternative would be
        // storing something in an intermediate stack, but that doesn't make any
        // more sense.  I implemented an approach where it also stored the length
        // in the code table, although it's a bit tricky because you run out of
        // bits (12 + 12 + 8), but I didn't measure much improvements (the table
        // entries are generally not the long).  Even when I created benchmarks for
        // very long table entries the complexity did not seem worth it.
        // The code table stores the prefix entry in 12 bits and then the suffix
        // byte in 8 bits, so each entry is 20 bits.
        var chase_code = code < next_code ? code : prev_code;
        // Chase what we will output, either {CODE} or {CODE-1}.
        var chase_length = 0;
        var chase = chase_code;
        while(chase > clear_code){
            chase = code_table[chase] >> 8;
            ++chase_length;
        }
        var k = chase;
        var op_end = op + chase_length + (chase_code !== code ? 1 : 0);
        if (op_end > output_length) {
            console.log("Warning, gif stream longer than expected.");
            return;
        }
        // Already have the first byte from the chase, might as well write it fast.
        output[op++] = k;
        op += chase_length;
        var b = op; // Track pointer, writing backwards.
        if (chase_code !== code) output[op++] = k;
        chase = chase_code;
        while(chase_length--){
            chase = code_table[chase];
            output[--b] = chase & 0xff; // Write backwards.
            chase >>= 8; // Pull down to the prefix code.
        }
        if (prev_code !== null && next_code < 4096) {
            code_table[next_code++] = prev_code << 8 | k;
            // TODO(deanm): Figure out this clearing vs code growth logic better.  I
            // have an feeling that it should just happen somewhere else, for now it
            // is awkward between when we grow past the max and then hit a clear code.
            // For now just check if we hit the max 12-bits (then a clear code should
            // follow, also of course encoded in 12-bits).
            if (next_code >= code_mask + 1 && cur_code_size < 12) {
                ++cur_code_size;
                code_mask = code_mask << 1 | 1;
            }
        }
        prev_code = code;
    }
    if (op !== output_length) {
        console.log("Warning, gif stream shorter than expected.");
    }
    return output;
}
// CommonJS.
try {
    exports.GifWriter = GifWriter;
    exports.GifReader = GifReader;
} catch (e) {}
}}),
"[project]/node_modules/gifenc/dist/gifenc.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __defProp = Object.defineProperty;
var __markAsModule = (target)=>__defProp(target, "__esModule", {
        value: true
    });
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
// src/index.js
__markAsModule(exports);
__export(exports, {
    GIFEncoder: ()=>GIFEncoder,
    applyPalette: ()=>applyPalette,
    default: ()=>src_default,
    nearestColor: ()=>nearestColor,
    nearestColorIndex: ()=>nearestColorIndex,
    nearestColorIndexWithDistance: ()=>nearestColorIndexWithDistance,
    prequantize: ()=>prequantize,
    quantize: ()=>quantize,
    snapColorsToPalette: ()=>snapColorsToPalette
});
// src/constants.js
var constants_default = {
    signature: "GIF",
    version: "89a",
    trailer: 59,
    extensionIntroducer: 33,
    applicationExtensionLabel: 255,
    graphicControlExtensionLabel: 249,
    imageSeparator: 44,
    signatureSize: 3,
    versionSize: 3,
    globalColorTableFlagMask: 128,
    colorResolutionMask: 112,
    sortFlagMask: 8,
    globalColorTableSizeMask: 7,
    applicationIdentifierSize: 8,
    applicationAuthCodeSize: 3,
    disposalMethodMask: 28,
    userInputFlagMask: 2,
    transparentColorFlagMask: 1,
    localColorTableFlagMask: 128,
    interlaceFlagMask: 64,
    idSortFlagMask: 32,
    localColorTableSizeMask: 7
};
// src/stream.js
function createStream(initialCapacity = 256) {
    let cursor = 0;
    let contents = new Uint8Array(initialCapacity);
    return {
        get buffer () {
            return contents.buffer;
        },
        reset () {
            cursor = 0;
        },
        bytesView () {
            return contents.subarray(0, cursor);
        },
        bytes () {
            return contents.slice(0, cursor);
        },
        writeByte (byte) {
            expand(cursor + 1);
            contents[cursor] = byte;
            cursor++;
        },
        writeBytes (data, offset = 0, byteLength = data.length) {
            expand(cursor + byteLength);
            for(let i = 0; i < byteLength; i++){
                contents[cursor++] = data[i + offset];
            }
        },
        writeBytesView (data, offset = 0, byteLength = data.byteLength) {
            expand(cursor + byteLength);
            contents.set(data.subarray(offset, offset + byteLength), cursor);
            cursor += byteLength;
        }
    };
    "TURBOPACK unreachable";
    function expand(newCapacity) {
        var prevCapacity = contents.length;
        if (prevCapacity >= newCapacity) return;
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
        const oldContents = contents;
        contents = new Uint8Array(newCapacity);
        if (cursor > 0) contents.set(oldContents.subarray(0, cursor), 0);
    }
}
// src/lzwEncode.js
var BITS = 12;
var DEFAULT_HSIZE = 5003;
var MASKS = [
    0,
    1,
    3,
    7,
    15,
    31,
    63,
    127,
    255,
    511,
    1023,
    2047,
    4095,
    8191,
    16383,
    32767,
    65535
];
function lzwEncode(width, height, pixels, colorDepth, outStream = createStream(512), accum = new Uint8Array(256), htab = new Int32Array(DEFAULT_HSIZE), codetab = new Int32Array(DEFAULT_HSIZE)) {
    const hsize = htab.length;
    const initCodeSize = Math.max(2, colorDepth);
    accum.fill(0);
    codetab.fill(0);
    htab.fill(-1);
    let cur_accum = 0;
    let cur_bits = 0;
    const init_bits = initCodeSize + 1;
    const g_init_bits = init_bits;
    let clear_flg = false;
    let n_bits = g_init_bits;
    let maxcode = (1 << n_bits) - 1;
    const ClearCode = 1 << init_bits - 1;
    const EOFCode = ClearCode + 1;
    let free_ent = ClearCode + 2;
    let a_count = 0;
    let ent = pixels[0];
    let hshift = 0;
    for(let fcode = hsize; fcode < 65536; fcode *= 2){
        ++hshift;
    }
    hshift = 8 - hshift;
    outStream.writeByte(initCodeSize);
    output(ClearCode);
    const length = pixels.length;
    for(let idx = 1; idx < length; idx++){
        next_block: {
            const c = pixels[idx];
            const fcode = (c << BITS) + ent;
            let i = c << hshift ^ ent;
            if (htab[i] === fcode) {
                ent = codetab[i];
                break next_block;
            }
            const disp = i === 0 ? 1 : hsize - i;
            while(htab[i] >= 0){
                i -= disp;
                if (i < 0) i += hsize;
                if (htab[i] === fcode) {
                    ent = codetab[i];
                    break next_block;
                }
            }
            output(ent);
            ent = c;
            if (free_ent < 1 << BITS) {
                codetab[i] = free_ent++;
                htab[i] = fcode;
            } else {
                htab.fill(-1);
                free_ent = ClearCode + 2;
                clear_flg = true;
                output(ClearCode);
            }
        }
    }
    output(ent);
    output(EOFCode);
    outStream.writeByte(0);
    return outStream.bytesView();
    "TURBOPACK unreachable";
    function output(code) {
        cur_accum &= MASKS[cur_bits];
        if (cur_bits > 0) cur_accum |= code << cur_bits;
        else cur_accum = code;
        cur_bits += n_bits;
        while(cur_bits >= 8){
            accum[a_count++] = cur_accum & 255;
            if (a_count >= 254) {
                outStream.writeByte(a_count);
                outStream.writeBytesView(accum, 0, a_count);
                a_count = 0;
            }
            cur_accum >>= 8;
            cur_bits -= 8;
        }
        if (free_ent > maxcode || clear_flg) {
            if (clear_flg) {
                n_bits = g_init_bits;
                maxcode = (1 << n_bits) - 1;
                clear_flg = false;
            } else {
                ++n_bits;
                maxcode = n_bits === BITS ? 1 << n_bits : (1 << n_bits) - 1;
            }
        }
        if (code == EOFCode) {
            while(cur_bits > 0){
                accum[a_count++] = cur_accum & 255;
                if (a_count >= 254) {
                    outStream.writeByte(a_count);
                    outStream.writeBytesView(accum, 0, a_count);
                    a_count = 0;
                }
                cur_accum >>= 8;
                cur_bits -= 8;
            }
            if (a_count > 0) {
                outStream.writeByte(a_count);
                outStream.writeBytesView(accum, 0, a_count);
                a_count = 0;
            }
        }
    }
}
var lzwEncode_default = lzwEncode;
// src/rgb-packing.js
function rgb888_to_rgb565(r, g, b) {
    return r << 8 & 63488 | g << 2 & 992 | b >> 3;
}
function rgba8888_to_rgba4444(r, g, b, a) {
    return r >> 4 | g & 240 | (b & 240) << 4 | (a & 240) << 8;
}
function rgb888_to_rgb444(r, g, b) {
    return r >> 4 << 8 | g & 240 | b >> 4;
}
// src/pnnquant2.js
function clamp(value, min, max) {
    return value < min ? min : value > max ? max : value;
}
function sqr(value) {
    return value * value;
}
function find_nn(bins, idx, hasAlpha) {
    var nn = 0;
    var err = 1e100;
    const bin1 = bins[idx];
    const n1 = bin1.cnt;
    const wa = bin1.ac;
    const wr = bin1.rc;
    const wg = bin1.gc;
    const wb = bin1.bc;
    for(var i = bin1.fw; i != 0; i = bins[i].fw){
        const bin = bins[i];
        const n2 = bin.cnt;
        const nerr2 = n1 * n2 / (n1 + n2);
        if (nerr2 >= err) continue;
        var nerr = 0;
        if (hasAlpha) {
            nerr += nerr2 * sqr(bin.ac - wa);
            if (nerr >= err) continue;
        }
        nerr += nerr2 * sqr(bin.rc - wr);
        if (nerr >= err) continue;
        nerr += nerr2 * sqr(bin.gc - wg);
        if (nerr >= err) continue;
        nerr += nerr2 * sqr(bin.bc - wb);
        if (nerr >= err) continue;
        err = nerr;
        nn = i;
    }
    bin1.err = err;
    bin1.nn = nn;
}
function create_bin() {
    return {
        ac: 0,
        rc: 0,
        gc: 0,
        bc: 0,
        cnt: 0,
        nn: 0,
        fw: 0,
        bk: 0,
        tm: 0,
        mtm: 0,
        err: 0
    };
}
function create_bin_list(data, format) {
    const bincount = format === "rgb444" ? 4096 : 65536;
    const bins = new Array(bincount);
    const size = data.length;
    if (format === "rgba4444") {
        for(let i = 0; i < size; ++i){
            const color = data[i];
            const a = color >> 24 & 255;
            const b = color >> 16 & 255;
            const g = color >> 8 & 255;
            const r = color & 255;
            const index = rgba8888_to_rgba4444(r, g, b, a);
            let bin = index in bins ? bins[index] : bins[index] = create_bin();
            bin.rc += r;
            bin.gc += g;
            bin.bc += b;
            bin.ac += a;
            bin.cnt++;
        }
    } else if (format === "rgb444") {
        for(let i = 0; i < size; ++i){
            const color = data[i];
            const b = color >> 16 & 255;
            const g = color >> 8 & 255;
            const r = color & 255;
            const index = rgb888_to_rgb444(r, g, b);
            let bin = index in bins ? bins[index] : bins[index] = create_bin();
            bin.rc += r;
            bin.gc += g;
            bin.bc += b;
            bin.cnt++;
        }
    } else {
        for(let i = 0; i < size; ++i){
            const color = data[i];
            const b = color >> 16 & 255;
            const g = color >> 8 & 255;
            const r = color & 255;
            const index = rgb888_to_rgb565(r, g, b);
            let bin = index in bins ? bins[index] : bins[index] = create_bin();
            bin.rc += r;
            bin.gc += g;
            bin.bc += b;
            bin.cnt++;
        }
    }
    return bins;
}
function quantize(rgba, maxColors, opts = {}) {
    const { format = "rgb565", clearAlpha = true, clearAlphaColor = 0, clearAlphaThreshold = 0, oneBitAlpha = false } = opts;
    if (!rgba || !rgba.buffer) {
        throw new Error("quantize() expected RGBA Uint8Array data");
    }
    if (!(rgba instanceof Uint8Array) && !(rgba instanceof Uint8ClampedArray)) {
        throw new Error("quantize() expected RGBA Uint8Array data");
    }
    const data = new Uint32Array(rgba.buffer);
    let useSqrt = opts.useSqrt !== false;
    const hasAlpha = format === "rgba4444";
    const bins = create_bin_list(data, format);
    const bincount = bins.length;
    const bincountMinusOne = bincount - 1;
    const heap = new Uint32Array(bincount + 1);
    var maxbins = 0;
    for(var i = 0; i < bincount; ++i){
        const bin = bins[i];
        if (bin != null) {
            var d = 1 / bin.cnt;
            if (hasAlpha) bin.ac *= d;
            bin.rc *= d;
            bin.gc *= d;
            bin.bc *= d;
            bins[maxbins++] = bin;
        }
    }
    if (sqr(maxColors) / maxbins < 0.022) {
        useSqrt = false;
    }
    var i = 0;
    for(; i < maxbins - 1; ++i){
        bins[i].fw = i + 1;
        bins[i + 1].bk = i;
        if (useSqrt) bins[i].cnt = Math.sqrt(bins[i].cnt);
    }
    if (useSqrt) bins[i].cnt = Math.sqrt(bins[i].cnt);
    var h, l, l2;
    for(i = 0; i < maxbins; ++i){
        find_nn(bins, i, false);
        var err = bins[i].err;
        for(l = ++heap[0]; l > 1; l = l2){
            l2 = l >> 1;
            if (bins[h = heap[l2]].err <= err) break;
            heap[l] = h;
        }
        heap[l] = i;
    }
    var extbins = maxbins - maxColors;
    for(i = 0; i < extbins;){
        var tb;
        for(;;){
            var b1 = heap[1];
            tb = bins[b1];
            if (tb.tm >= tb.mtm && bins[tb.nn].mtm <= tb.tm) break;
            if (tb.mtm == bincountMinusOne) b1 = heap[1] = heap[heap[0]--];
            else {
                find_nn(bins, b1, false);
                tb.tm = i;
            }
            var err = bins[b1].err;
            for(l = 1; (l2 = l + l) <= heap[0]; l = l2){
                if (l2 < heap[0] && bins[heap[l2]].err > bins[heap[l2 + 1]].err) l2++;
                if (err <= bins[h = heap[l2]].err) break;
                heap[l] = h;
            }
            heap[l] = b1;
        }
        var nb = bins[tb.nn];
        var n1 = tb.cnt;
        var n2 = nb.cnt;
        var d = 1 / (n1 + n2);
        if (hasAlpha) tb.ac = d * (n1 * tb.ac + n2 * nb.ac);
        tb.rc = d * (n1 * tb.rc + n2 * nb.rc);
        tb.gc = d * (n1 * tb.gc + n2 * nb.gc);
        tb.bc = d * (n1 * tb.bc + n2 * nb.bc);
        tb.cnt += nb.cnt;
        tb.mtm = ++i;
        bins[nb.bk].fw = nb.fw;
        bins[nb.fw].bk = nb.bk;
        nb.mtm = bincountMinusOne;
    }
    let palette = [];
    var k = 0;
    for(i = 0;; ++k){
        let r = clamp(Math.round(bins[i].rc), 0, 255);
        let g = clamp(Math.round(bins[i].gc), 0, 255);
        let b = clamp(Math.round(bins[i].bc), 0, 255);
        let a = 255;
        if (hasAlpha) {
            a = clamp(Math.round(bins[i].ac), 0, 255);
            if (oneBitAlpha) {
                const threshold = typeof oneBitAlpha === "number" ? oneBitAlpha : 127;
                a = a <= threshold ? 0 : 255;
            }
            if (clearAlpha && a <= clearAlphaThreshold) {
                r = g = b = clearAlphaColor;
                a = 0;
            }
        }
        const color = hasAlpha ? [
            r,
            g,
            b,
            a
        ] : [
            r,
            g,
            b
        ];
        const exists = existsInPalette(palette, color);
        if (!exists) palette.push(color);
        if ((i = bins[i].fw) == 0) break;
    }
    return palette;
}
function existsInPalette(palette, color) {
    for(let i = 0; i < palette.length; i++){
        const p = palette[i];
        let matchesRGB = p[0] === color[0] && p[1] === color[1] && p[2] === color[2];
        let matchesAlpha = p.length >= 4 && color.length >= 4 ? p[3] === color[3] : true;
        if (matchesRGB && matchesAlpha) return true;
    }
    return false;
}
// src/color.js
function euclideanDistanceSquared(a, b) {
    var sum = 0;
    var n;
    for(n = 0; n < a.length; n++){
        const dx = a[n] - b[n];
        sum += dx * dx;
    }
    return sum;
}
// src/palettize.js
function roundStep(byte, step) {
    return step > 1 ? Math.round(byte / step) * step : byte;
}
function prequantize(rgba, { roundRGB = 5, roundAlpha = 10, oneBitAlpha = null } = {}) {
    const data = new Uint32Array(rgba.buffer);
    for(let i = 0; i < data.length; i++){
        const color = data[i];
        let a = color >> 24 & 255;
        let b = color >> 16 & 255;
        let g = color >> 8 & 255;
        let r = color & 255;
        a = roundStep(a, roundAlpha);
        if (oneBitAlpha) {
            const threshold = typeof oneBitAlpha === "number" ? oneBitAlpha : 127;
            a = a <= threshold ? 0 : 255;
        }
        r = roundStep(r, roundRGB);
        g = roundStep(g, roundRGB);
        b = roundStep(b, roundRGB);
        data[i] = a << 24 | b << 16 | g << 8 | r << 0;
    }
}
function applyPalette(rgba, palette, format = "rgb565") {
    if (!rgba || !rgba.buffer) {
        throw new Error("quantize() expected RGBA Uint8Array data");
    }
    if (!(rgba instanceof Uint8Array) && !(rgba instanceof Uint8ClampedArray)) {
        throw new Error("quantize() expected RGBA Uint8Array data");
    }
    if (palette.length > 256) {
        throw new Error("applyPalette() only works with 256 colors or less");
    }
    const data = new Uint32Array(rgba.buffer);
    const length = data.length;
    const bincount = format === "rgb444" ? 4096 : 65536;
    const index = new Uint8Array(length);
    const cache = new Array(bincount);
    const hasAlpha = format === "rgba4444";
    if (format === "rgba4444") {
        for(let i = 0; i < length; i++){
            const color = data[i];
            const a = color >> 24 & 255;
            const b = color >> 16 & 255;
            const g = color >> 8 & 255;
            const r = color & 255;
            const key = rgba8888_to_rgba4444(r, g, b, a);
            const idx = key in cache ? cache[key] : cache[key] = nearestColorIndexRGBA(r, g, b, a, palette);
            index[i] = idx;
        }
    } else {
        const rgb888_to_key = format === "rgb444" ? rgb888_to_rgb444 : rgb888_to_rgb565;
        for(let i = 0; i < length; i++){
            const color = data[i];
            const b = color >> 16 & 255;
            const g = color >> 8 & 255;
            const r = color & 255;
            const key = rgb888_to_key(r, g, b);
            const idx = key in cache ? cache[key] : cache[key] = nearestColorIndexRGB(r, g, b, palette);
            index[i] = idx;
        }
    }
    return index;
}
function nearestColorIndexRGBA(r, g, b, a, palette) {
    let k = 0;
    let mindist = 1e100;
    for(let i = 0; i < palette.length; i++){
        const px2 = palette[i];
        const a2 = px2[3];
        let curdist = sqr2(a2 - a);
        if (curdist > mindist) continue;
        const r2 = px2[0];
        curdist += sqr2(r2 - r);
        if (curdist > mindist) continue;
        const g2 = px2[1];
        curdist += sqr2(g2 - g);
        if (curdist > mindist) continue;
        const b2 = px2[2];
        curdist += sqr2(b2 - b);
        if (curdist > mindist) continue;
        mindist = curdist;
        k = i;
    }
    return k;
}
function nearestColorIndexRGB(r, g, b, palette) {
    let k = 0;
    let mindist = 1e100;
    for(let i = 0; i < palette.length; i++){
        const px2 = palette[i];
        const r2 = px2[0];
        let curdist = sqr2(r2 - r);
        if (curdist > mindist) continue;
        const g2 = px2[1];
        curdist += sqr2(g2 - g);
        if (curdist > mindist) continue;
        const b2 = px2[2];
        curdist += sqr2(b2 - b);
        if (curdist > mindist) continue;
        mindist = curdist;
        k = i;
    }
    return k;
}
function snapColorsToPalette(palette, knownColors, threshold = 5) {
    if (!palette.length || !knownColors.length) return;
    const paletteRGB = palette.map((p)=>p.slice(0, 3));
    const thresholdSq = threshold * threshold;
    const dim = palette[0].length;
    for(let i = 0; i < knownColors.length; i++){
        let color = knownColors[i];
        if (color.length < dim) {
            color = [
                color[0],
                color[1],
                color[2],
                255
            ];
        } else if (color.length > dim) {
            color = color.slice(0, 3);
        } else {
            color = color.slice();
        }
        const r = nearestColorIndexWithDistance(paletteRGB, color.slice(0, 3), euclideanDistanceSquared);
        const idx = r[0];
        const distanceSq = r[1];
        if (distanceSq > 0 && distanceSq <= thresholdSq) {
            palette[idx] = color;
        }
    }
}
function sqr2(a) {
    return a * a;
}
function nearestColorIndex(colors, pixel, distanceFn = euclideanDistanceSquared) {
    let minDist = Infinity;
    let minDistIndex = -1;
    for(let j = 0; j < colors.length; j++){
        const paletteColor = colors[j];
        const dist = distanceFn(pixel, paletteColor);
        if (dist < minDist) {
            minDist = dist;
            minDistIndex = j;
        }
    }
    return minDistIndex;
}
function nearestColorIndexWithDistance(colors, pixel, distanceFn = euclideanDistanceSquared) {
    let minDist = Infinity;
    let minDistIndex = -1;
    for(let j = 0; j < colors.length; j++){
        const paletteColor = colors[j];
        const dist = distanceFn(pixel, paletteColor);
        if (dist < minDist) {
            minDist = dist;
            minDistIndex = j;
        }
    }
    return [
        minDistIndex,
        minDist
    ];
}
function nearestColor(colors, pixel, distanceFn = euclideanDistanceSquared) {
    return colors[nearestColorIndex(colors, pixel, distanceFn)];
}
// src/index.js
function GIFEncoder(opt = {}) {
    const { initialCapacity = 4096, auto = true } = opt;
    const stream = createStream(initialCapacity);
    const HSIZE = 5003;
    const accum = new Uint8Array(256);
    const htab = new Int32Array(HSIZE);
    const codetab = new Int32Array(HSIZE);
    let hasInit = false;
    return {
        reset () {
            stream.reset();
            hasInit = false;
        },
        finish () {
            stream.writeByte(constants_default.trailer);
        },
        bytes () {
            return stream.bytes();
        },
        bytesView () {
            return stream.bytesView();
        },
        get buffer () {
            return stream.buffer;
        },
        get stream () {
            return stream;
        },
        writeHeader,
        writeFrame (index, width, height, opts = {}) {
            const { transparent = false, transparentIndex = 0, delay = 0, palette = null, repeat = 0, colorDepth = 8, dispose = -1 } = opts;
            let first = false;
            if (auto) {
                if (!hasInit) {
                    first = true;
                    writeHeader();
                    hasInit = true;
                }
            } else {
                first = Boolean(opts.first);
            }
            width = Math.max(0, Math.floor(width));
            height = Math.max(0, Math.floor(height));
            if (first) {
                if (!palette) {
                    throw new Error("First frame must include a { palette } option");
                }
                encodeLogicalScreenDescriptor(stream, width, height, palette, colorDepth);
                encodeColorTable(stream, palette);
                if (repeat >= 0) {
                    encodeNetscapeExt(stream, repeat);
                }
            }
            const delayTime = Math.round(delay / 10);
            encodeGraphicControlExt(stream, dispose, delayTime, transparent, transparentIndex);
            const useLocalColorTable = Boolean(palette) && !first;
            encodeImageDescriptor(stream, width, height, useLocalColorTable ? palette : null);
            if (useLocalColorTable) encodeColorTable(stream, palette);
            encodePixels(stream, index, width, height, colorDepth, accum, htab, codetab);
        }
    };
    "TURBOPACK unreachable";
    function writeHeader() {
        writeUTFBytes(stream, "GIF89a");
    }
}
function encodeGraphicControlExt(stream, dispose, delay, transparent, transparentIndex) {
    stream.writeByte(33);
    stream.writeByte(249);
    stream.writeByte(4);
    if (transparentIndex < 0) {
        transparentIndex = 0;
        transparent = false;
    }
    var transp, disp;
    if (!transparent) {
        transp = 0;
        disp = 0;
    } else {
        transp = 1;
        disp = 2;
    }
    if (dispose >= 0) {
        disp = dispose & 7;
    }
    disp <<= 2;
    const userInput = 0;
    stream.writeByte(0 | disp | userInput | transp);
    writeUInt16(stream, delay);
    stream.writeByte(transparentIndex || 0);
    stream.writeByte(0);
}
function encodeLogicalScreenDescriptor(stream, width, height, palette, colorDepth = 8) {
    const globalColorTableFlag = 1;
    const sortFlag = 0;
    const globalColorTableSize = colorTableSize(palette.length) - 1;
    const fields = globalColorTableFlag << 7 | colorDepth - 1 << 4 | sortFlag << 3 | globalColorTableSize;
    const backgroundColorIndex = 0;
    const pixelAspectRatio = 0;
    writeUInt16(stream, width);
    writeUInt16(stream, height);
    stream.writeBytes([
        fields,
        backgroundColorIndex,
        pixelAspectRatio
    ]);
}
function encodeNetscapeExt(stream, repeat) {
    stream.writeByte(33);
    stream.writeByte(255);
    stream.writeByte(11);
    writeUTFBytes(stream, "NETSCAPE2.0");
    stream.writeByte(3);
    stream.writeByte(1);
    writeUInt16(stream, repeat);
    stream.writeByte(0);
}
function encodeColorTable(stream, palette) {
    const colorTableLength = 1 << colorTableSize(palette.length);
    for(let i = 0; i < colorTableLength; i++){
        let color = [
            0,
            0,
            0
        ];
        if (i < palette.length) {
            color = palette[i];
        }
        stream.writeByte(color[0]);
        stream.writeByte(color[1]);
        stream.writeByte(color[2]);
    }
}
function encodeImageDescriptor(stream, width, height, localPalette) {
    stream.writeByte(44);
    writeUInt16(stream, 0);
    writeUInt16(stream, 0);
    writeUInt16(stream, width);
    writeUInt16(stream, height);
    if (localPalette) {
        const interlace = 0;
        const sorted = 0;
        const palSize = colorTableSize(localPalette.length) - 1;
        stream.writeByte(128 | interlace | sorted | 0 | palSize);
    } else {
        stream.writeByte(0);
    }
}
function encodePixels(stream, index, width, height, colorDepth = 8, accum, htab, codetab) {
    lzwEncode_default(width, height, index, colorDepth, stream, accum, htab, codetab);
}
function writeUInt16(stream, short) {
    stream.writeByte(short & 255);
    stream.writeByte(short >> 8 & 255);
}
function writeUTFBytes(stream, text) {
    for(var i = 0; i < text.length; i++){
        stream.writeByte(text.charCodeAt(i));
    }
}
function colorTableSize(length) {
    return Math.max(Math.ceil(Math.log2(length)), 1);
}
var src_default = GIFEncoder; //# sourceMappingURL=gifenc.js.map
}}),
"[project]/node_modules/libtess/libtess.min.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*

 Copyright 2000, Silicon Graphics, Inc. All Rights Reserved.
 Copyright 2015, Google Inc. All Rights Reserved.

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to
 deal in the Software without restriction, including without limitation the
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice including the dates of first publication and
 either this permission notice or a reference to http://oss.sgi.com/projects/FreeB/
 shall be included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Original Code. The Original Code is: OpenGL Sample Implementation,
 Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
 Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
 Copyright in any portions created by third parties is as indicated
 elsewhere herein. All Rights Reserved.
*/ 'use strict';
var n;
function t(a, b) {
    return a.b === b.b && a.a === b.a;
}
function u(a, b) {
    return a.b < b.b || a.b === b.b && a.a <= b.a;
}
function v(a, b, c) {
    var d = b.b - a.b, e = c.b - b.b;
    return 0 < d + e ? d < e ? b.a - a.a + d / (d + e) * (a.a - c.a) : b.a - c.a + e / (d + e) * (c.a - a.a) : 0;
}
function x(a, b, c) {
    var d = b.b - a.b, e = c.b - b.b;
    return 0 < d + e ? (b.a - c.a) * d + (b.a - a.a) * e : 0;
}
function z(a, b) {
    return a.a < b.a || a.a === b.a && a.b <= b.b;
}
function aa(a, b, c) {
    var d = b.a - a.a, e = c.a - b.a;
    return 0 < d + e ? d < e ? b.b - a.b + d / (d + e) * (a.b - c.b) : b.b - c.b + e / (d + e) * (c.b - a.b) : 0;
}
function ba(a, b, c) {
    var d = b.a - a.a, e = c.a - b.a;
    return 0 < d + e ? (b.b - c.b) * d + (b.b - a.b) * e : 0;
}
function ca(a) {
    return u(a.b.a, a.a);
}
function da(a) {
    return u(a.a, a.b.a);
}
function A(a, b, c, d) {
    a = 0 > a ? 0 : a;
    c = 0 > c ? 0 : c;
    return a <= c ? 0 === c ? (b + d) / 2 : b + a / (a + c) * (d - b) : d + c / (a + c) * (b - d);
}
;
function ea(a) {
    var b = B(a.b);
    C(b, a.c);
    C(b.b, a.c);
    D(b, a.a);
    return b;
}
function E(a, b) {
    var c = !1, d = !1;
    a !== b && (b.a !== a.a && (d = !0, F(b.a, a.a)), b.d !== a.d && (c = !0, G(b.d, a.d)), H(b, a), d || (C(b, a.a), a.a.c = a), c || (D(b, a.d), a.d.a = a));
}
function I(a) {
    var b = a.b, c = !1;
    a.d !== a.b.d && (c = !0, G(a.d, a.b.d));
    a.c === a ? F(a.a, null) : (a.b.d.a = J(a), a.a.c = a.c, H(a, J(a)), c || D(a, a.d));
    b.c === b ? (F(b.a, null), G(b.d, null)) : (a.d.a = J(b), b.a.c = b.c, H(b, J(b)));
    fa(a);
}
function K(a) {
    var b = B(a), c = b.b;
    H(b, a.e);
    b.a = a.b.a;
    C(c, b.a);
    b.d = c.d = a.d;
    b = b.b;
    H(a.b, J(a.b));
    H(a.b, b);
    a.b.a = b.a;
    b.b.a.c = b.b;
    b.b.d = a.b.d;
    b.f = a.f;
    b.b.f = a.b.f;
    return b;
}
function L(a, b) {
    var c = !1, d = B(a), e = d.b;
    b.d !== a.d && (c = !0, G(b.d, a.d));
    H(d, a.e);
    H(e, b);
    d.a = a.b.a;
    e.a = b.a;
    d.d = e.d = a.d;
    a.d.a = e;
    c || D(d, a.d);
    return d;
}
function B(a) {
    var b = new M, c = new M, d = a.b.h;
    c.h = d;
    d.b.h = b;
    b.h = a;
    a.b.h = c;
    b.b = c;
    b.c = b;
    b.e = c;
    c.b = b;
    c.c = c;
    return c.e = b;
}
function H(a, b) {
    var c = a.c, d = b.c;
    c.b.e = b;
    d.b.e = a;
    a.c = d;
    b.c = c;
}
function C(a, b) {
    var c = b.f, d = new N(b, c);
    c.e = d;
    b.f = d;
    c = d.c = a;
    do c.a = d, c = c.c;
    while (c !== a)
}
function D(a, b) {
    var c = b.d, d = new ga(b, c);
    c.b = d;
    b.d = d;
    d.a = a;
    d.c = b.c;
    c = a;
    do c.d = d, c = c.e;
    while (c !== a)
}
function fa(a) {
    var b = a.h;
    a = a.b.h;
    b.b.h = a;
    a.b.h = b;
}
function F(a, b) {
    var c = a.c, d = c;
    do d.a = b, d = d.c;
    while (d !== c)
    c = a.f;
    d = a.e;
    d.f = c;
    c.e = d;
}
function G(a, b) {
    var c = a.a, d = c;
    do d.d = b, d = d.e;
    while (d !== c)
    c = a.d;
    d = a.b;
    d.d = c;
    c.b = d;
}
;
function ha(a) {
    var b = 0;
    Math.abs(a[1]) > Math.abs(a[0]) && (b = 1);
    Math.abs(a[2]) > Math.abs(a[b]) && (b = 2);
    return b;
}
;
var O = 4 * 1E150;
function P(a, b) {
    a.f += b.f;
    a.b.f += b.b.f;
}
function ia(a, b, c) {
    a = a.a;
    b = b.a;
    c = c.a;
    if (b.b.a === a) return c.b.a === a ? u(b.a, c.a) ? 0 >= x(c.b.a, b.a, c.a) : 0 <= x(b.b.a, c.a, b.a) : 0 >= x(c.b.a, a, c.a);
    if (c.b.a === a) return 0 <= x(b.b.a, a, b.a);
    b = v(b.b.a, a, b.a);
    a = v(c.b.a, a, c.a);
    return b >= a;
}
function Q(a) {
    a.a.i = null;
    var b = a.e;
    b.a.c = b.c;
    b.c.a = b.a;
    a.e = null;
}
function ja(a, b) {
    I(a.a);
    a.c = !1;
    a.a = b;
    b.i = a;
}
function ka(a) {
    var b = a.a.a;
    do a = R(a);
    while (a.a.a === b)
    a.c && (b = L(S(a).a.b, a.a.e), ja(a, b), a = R(a));
    return a;
}
function la(a, b, c) {
    var d = new ma;
    d.a = c;
    d.e = na(a.f, b.e, d);
    return c.i = d;
}
function oa(a, b) {
    switch(a.s){
        case 100130:
            return 0 !== (b & 1);
        case 100131:
            return 0 !== b;
        case 100132:
            return 0 < b;
        case 100133:
            return 0 > b;
        case 100134:
            return 2 <= b || -2 >= b;
    }
    return !1;
}
function pa(a) {
    var b = a.a, c = b.d;
    c.c = a.d;
    c.a = b;
    Q(a);
}
function T(a, b, c) {
    a = b;
    for(b = b.a; a !== c;){
        a.c = !1;
        var d = S(a), e = d.a;
        if (e.a !== b.a) {
            if (!d.c) {
                pa(a);
                break;
            }
            e = L(b.c.b, e.b);
            ja(d, e);
        }
        b.c !== e && (E(J(e), e), E(b, e));
        pa(a);
        b = d.a;
        a = d;
    }
    return b;
}
function U(a, b, c, d, e, f) {
    var g = !0;
    do la(a, b, c.b), c = c.c;
    while (c !== d)
    for(null === e && (e = S(b).a.b.c);;){
        d = S(b);
        c = d.a.b;
        if (c.a !== e.a) break;
        c.c !== e && (E(J(c), c), E(J(e), c));
        d.f = b.f - c.f;
        d.d = oa(a, d.f);
        b.b = !0;
        !g && qa(a, b) && (P(c, e), Q(b), I(e));
        g = !1;
        b = d;
        e = c;
    }
    b.b = !0;
    f && ra(a, b);
}
function sa(a, b, c, d, e) {
    var f = [
        b.g[0],
        b.g[1],
        b.g[2]
    ];
    b.d = null;
    b.d = a.o ? a.o(f, c, d, a.c) || null : null;
    null === b.d && (e ? a.n || (V(a, 100156), a.n = !0) : b.d = c[0]);
}
function ta(a, b, c) {
    var d = [
        null,
        null,
        null,
        null
    ];
    d[0] = b.a.d;
    d[1] = c.a.d;
    sa(a, b.a, d, [
        .5,
        .5,
        0,
        0
    ], !1);
    E(b, c);
}
function ua(a, b, c, d, e) {
    var f = Math.abs(b.b - a.b) + Math.abs(b.a - a.a), g = Math.abs(c.b - a.b) + Math.abs(c.a - a.a), h = e + 1;
    d[e] = .5 * g / (f + g);
    d[h] = .5 * f / (f + g);
    a.g[0] += d[e] * b.g[0] + d[h] * c.g[0];
    a.g[1] += d[e] * b.g[1] + d[h] * c.g[1];
    a.g[2] += d[e] * b.g[2] + d[h] * c.g[2];
}
function qa(a, b) {
    var c = S(b), d = b.a, e = c.a;
    if (u(d.a, e.a)) {
        if (0 < x(e.b.a, d.a, e.a)) return !1;
        if (!t(d.a, e.a)) K(e.b), E(d, J(e)), b.b = c.b = !0;
        else if (d.a !== e.a) {
            var c = a.e, f = d.a.h;
            if (0 <= f) {
                var c = c.b, g = c.d, h = c.e, k = c.c, l = k[f];
                g[l] = g[c.a];
                k[g[l]] = l;
                l <= --c.a && (1 >= l ? W(c, l) : u(h[g[l >> 1]], h[g[l]]) ? W(c, l) : va(c, l));
                h[f] = null;
                k[f] = c.b;
                c.b = f;
            } else for(c.c[-(f + 1)] = null; 0 < c.a && null === c.c[c.d[c.a - 1]];)--c.a;
            ta(a, J(e), d);
        }
    } else {
        if (0 > x(d.b.a, e.a, d.a)) return !1;
        R(b).b = b.b = !0;
        K(d.b);
        E(J(e), d);
    }
    return !0;
}
function wa(a, b) {
    var c = S(b), d = b.a, e = c.a, f = d.a, g = e.a, h = d.b.a, k = e.b.a, l = new N;
    x(h, a.a, f);
    x(k, a.a, g);
    if (f === g || Math.min(f.a, h.a) > Math.max(g.a, k.a)) return !1;
    if (u(f, g)) {
        if (0 < x(k, f, g)) return !1;
    } else if (0 > x(h, g, f)) return !1;
    var r = h, p = f, q = k, y = g, m, w;
    u(r, p) || (m = r, r = p, p = m);
    u(q, y) || (m = q, q = y, y = m);
    u(r, q) || (m = r, r = q, q = m, m = p, p = y, y = m);
    u(q, p) ? u(p, y) ? (m = v(r, q, p), w = v(q, p, y), 0 > m + w && (m = -m, w = -w), l.b = A(m, q.b, w, p.b)) : (m = x(r, q, p), w = -x(r, y, p), 0 > m + w && (m = -m, w = -w), l.b = A(m, q.b, w, y.b)) : l.b = (q.b + p.b) / 2;
    z(r, p) || (m = r, r = p, p = m);
    z(q, y) || (m = q, q = y, y = m);
    z(r, q) || (m = r, r = q, q = m, m = p, p = y, y = m);
    z(q, p) ? z(p, y) ? (m = aa(r, q, p), w = aa(q, p, y), 0 > m + w && (m = -m, w = -w), l.a = A(m, q.a, w, p.a)) : (m = ba(r, q, p), w = -ba(r, y, p), 0 > m + w && (m = -m, w = -w), l.a = A(m, q.a, w, y.a)) : l.a = (q.a + p.a) / 2;
    u(l, a.a) && (l.b = a.a.b, l.a = a.a.a);
    r = u(f, g) ? f : g;
    u(r, l) && (l.b = r.b, l.a = r.a);
    if (t(l, f) || t(l, g)) return qa(a, b), !1;
    if (!t(h, a.a) && 0 <= x(h, a.a, l) || !t(k, a.a) && 0 >= x(k, a.a, l)) {
        if (k === a.a) return K(d.b), E(e.b, d), b = ka(b), d = S(b).a, T(a, S(b), c), U(a, b, J(d), d, d, !0), !0;
        if (h === a.a) {
            K(e.b);
            E(d.e, J(e));
            f = c = b;
            g = f.a.b.a;
            do f = R(f);
            while (f.a.b.a === g)
            b = f;
            f = S(b).a.b.c;
            c.a = J(e);
            e = T(a, c, null);
            U(a, b, e.c, d.b.c, f, !0);
            return !0;
        }
        0 <= x(h, a.a, l) && (R(b).b = b.b = !0, K(d.b), d.a.b = a.a.b, d.a.a = a.a.a);
        0 >= x(k, a.a, l) && (b.b = c.b = !0, K(e.b), e.a.b = a.a.b, e.a.a = a.a.a);
        return !1;
    }
    K(d.b);
    K(e.b);
    E(J(e), d);
    d.a.b = l.b;
    d.a.a = l.a;
    d.a.h = xa(a.e, d.a);
    d = d.a;
    e = [
        0,
        0,
        0,
        0
    ];
    l = [
        f.d,
        h.d,
        g.d,
        k.d
    ];
    d.g[0] = d.g[1] = d.g[2] = 0;
    ua(d, f, h, e, 0);
    ua(d, g, k, e, 2);
    sa(a, d, l, e, !0);
    R(b).b = b.b = c.b = !0;
    return !1;
}
function ra(a, b) {
    for(var c = S(b);;){
        for(; c.b;)b = c, c = S(c);
        if (!b.b && (c = b, b = R(b), null === b || !b.b)) break;
        b.b = !1;
        var d = b.a, e = c.a, f;
        if (f = d.b.a !== e.b.a) a: {
            f = b;
            var g = S(f), h = f.a, k = g.a, l = void 0;
            if (u(h.b.a, k.b.a)) {
                if (0 > x(h.b.a, k.b.a, h.a)) {
                    f = !1;
                    break a;
                }
                R(f).b = f.b = !0;
                l = K(h);
                E(k.b, l);
                l.d.c = f.d;
            } else {
                if (0 < x(k.b.a, h.b.a, k.a)) {
                    f = !1;
                    break a;
                }
                f.b = g.b = !0;
                l = K(k);
                E(h.e, k.b);
                l.b.d.c = f.d;
            }
            f = !0;
        }
        f && (c.c ? (Q(c), I(e), c = S(b), e = c.a) : b.c && (Q(b), I(d), b = R(c), d = b.a));
        if (d.a !== e.a) {
            if (d.b.a === e.b.a || b.c || c.c || d.b.a !== a.a && e.b.a !== a.a) qa(a, b);
            else if (wa(a, b)) break;
        }
        d.a === e.a && d.b.a === e.b.a && (P(e, d), Q(b), I(d), b = R(c));
    }
}
function ya(a, b) {
    a.a = b;
    for(var c = b.c; null === c.i;)if (c = c.c, c === b.c) {
        var c = a, d = b, e = new ma;
        e.a = d.c.b;
        var f = c.f, g = f.a;
        do g = g.a;
        while (null !== g.b && !f.c(f.b, e, g.b))
        var f = g.b, h = S(f), e = f.a, g = h.a;
        if (0 === x(e.b.a, d, e.a)) e = f.a, t(e.a, d) || t(e.b.a, d) || (K(e.b), f.c && (I(e.c), f.c = !1), E(d.c, e), ya(c, d));
        else {
            var k = u(g.b.a, e.b.a) ? f : h, h = void 0;
            f.d || k.c ? (k === f ? h = L(d.c.b, e.e) : h = L(g.b.c.b, d.c).b, k.c ? ja(k, h) : (e = c, f = la(c, f, h), f.f = R(f).f + f.a.f, f.d = oa(e, f.f)), ya(c, d)) : U(c, f, d.c, d.c, null, !0);
        }
        return;
    }
    c = ka(c.i);
    e = S(c);
    f = e.a;
    e = T(a, e, null);
    if (e.c === f) {
        var f = e, e = f.c, g = S(c), h = c.a, k = g.a, l = !1;
        h.b.a !== k.b.a && wa(a, c);
        t(h.a, a.a) && (E(J(e), h), c = ka(c), e = S(c).a, T(a, S(c), g), l = !0);
        t(k.a, a.a) && (E(f, J(k)), f = T(a, g, null), l = !0);
        l ? U(a, c, f.c, e, e, !0) : (u(k.a, h.a) ? d = J(k) : d = h, d = L(f.c.b, d), U(a, c, d, d.c, d.c, !1), d.b.i.c = !0, ra(a, c));
    } else U(a, c, e.c, f, f, !0);
}
function za(a, b) {
    var c = new ma, d = ea(a.b);
    d.a.b = O;
    d.a.a = b;
    d.b.a.b = -O;
    d.b.a.a = b;
    a.a = d.b.a;
    c.a = d;
    c.f = 0;
    c.d = !1;
    c.c = !1;
    c.h = !0;
    c.b = !1;
    d = a.f;
    d = na(d, d.a, c);
    c.e = d;
}
;
function Aa(a) {
    this.a = new Ba;
    this.b = a;
    this.c = ia;
}
function na(a, b, c) {
    do b = b.c;
    while (null !== b.b && !a.c(a.b, b.b, c))
    a = new Ba(c, b.a, b);
    b.a.c = a;
    return b.a = a;
}
;
function Ba(a, b, c) {
    this.b = a || null;
    this.a = b || this;
    this.c = c || this;
}
;
function X() {
    this.d = Y;
    this.p = this.b = this.q = null;
    this.j = [
        0,
        0,
        0
    ];
    this.s = 100130;
    this.n = !1;
    this.o = this.a = this.e = this.f = null;
    this.m = !1;
    this.c = this.r = this.i = this.k = this.l = this.h = null;
}
var Y = 0;
n = X.prototype;
n.x = function() {
    Z(this, Y);
};
n.B = function(a, b) {
    switch(a){
        case 100142:
            return;
        case 100140:
            switch(b){
                case 100130:
                case 100131:
                case 100132:
                case 100133:
                case 100134:
                    this.s = b;
                    return;
            }
            break;
        case 100141:
            this.m = !!b;
            return;
        default:
            V(this, 100900);
            return;
    }
    V(this, 100901);
};
n.y = function(a) {
    switch(a){
        case 100142:
            return 0;
        case 100140:
            return this.s;
        case 100141:
            return this.m;
        default:
            V(this, 100900);
    }
    return !1;
};
n.A = function(a, b, c) {
    this.j[0] = a;
    this.j[1] = b;
    this.j[2] = c;
};
n.z = function(a, b) {
    var c = b ? b : null;
    switch(a){
        case 100100:
        case 100106:
            this.h = c;
            break;
        case 100104:
        case 100110:
            this.l = c;
            break;
        case 100101:
        case 100107:
            this.k = c;
            break;
        case 100102:
        case 100108:
            this.i = c;
            break;
        case 100103:
        case 100109:
            this.p = c;
            break;
        case 100105:
        case 100111:
            this.o = c;
            break;
        case 100112:
            this.r = c;
            break;
        default:
            V(this, 100900);
    }
};
n.C = function(a, b) {
    var c = !1, d = [
        0,
        0,
        0
    ];
    Z(this, 2);
    for(var e = 0; 3 > e; ++e){
        var f = a[e];
        -1E150 > f && (f = -1E150, c = !0);
        1E150 < f && (f = 1E150, c = !0);
        d[e] = f;
    }
    c && V(this, 100155);
    c = this.q;
    null === c ? (c = ea(this.b), E(c, c.b)) : (K(c), c = c.e);
    c.a.d = b;
    c.a.g[0] = d[0];
    c.a.g[1] = d[1];
    c.a.g[2] = d[2];
    c.f = 1;
    c.b.f = -1;
    this.q = c;
};
n.u = function(a) {
    Z(this, Y);
    this.d = 1;
    this.b = new Ca;
    this.c = a;
};
n.t = function() {
    Z(this, 1);
    this.d = 2;
    this.q = null;
};
n.v = function() {
    Z(this, 2);
    this.d = 1;
};
n.w = function() {
    Z(this, 1);
    this.d = Y;
    var a = this.j[0], b = this.j[1], c = this.j[2], d = !1, e = [
        a,
        b,
        c
    ];
    if (0 === a && 0 === b && 0 === c) {
        for(var b = [
            -2 * 1E150,
            -2 * 1E150,
            -2 * 1E150
        ], f = [
            2 * 1E150,
            2 * 1E150,
            2 * 1E150
        ], c = [], g = [], d = this.b.c, a = d.e; a !== d; a = a.e)for(var h = 0; 3 > h; ++h){
            var k = a.g[h];
            k < f[h] && (f[h] = k, g[h] = a);
            k > b[h] && (b[h] = k, c[h] = a);
        }
        a = 0;
        b[1] - f[1] > b[0] - f[0] && (a = 1);
        b[2] - f[2] > b[a] - f[a] && (a = 2);
        if (f[a] >= b[a]) e[0] = 0, e[1] = 0, e[2] = 1;
        else {
            b = 0;
            f = g[a];
            c = c[a];
            g = [
                0,
                0,
                0
            ];
            f = [
                f.g[0] - c.g[0],
                f.g[1] - c.g[1],
                f.g[2] - c.g[2]
            ];
            h = [
                0,
                0,
                0
            ];
            for(a = d.e; a !== d; a = a.e)h[0] = a.g[0] - c.g[0], h[1] = a.g[1] - c.g[1], h[2] = a.g[2] - c.g[2], g[0] = f[1] * h[2] - f[2] * h[1], g[1] = f[2] * h[0] - f[0] * h[2], g[2] = f[0] * h[1] - f[1] * h[0], k = g[0] * g[0] + g[1] * g[1] + g[2] * g[2], k > b && (b = k, e[0] = g[0], e[1] = g[1], e[2] = g[2]);
            0 >= b && (e[0] = e[1] = e[2] = 0, e[ha(f)] = 1);
        }
        d = !0;
    }
    g = ha(e);
    a = this.b.c;
    b = (g + 1) % 3;
    c = (g + 2) % 3;
    g = 0 < e[g] ? 1 : -1;
    for(e = a.e; e !== a; e = e.e)e.b = e.g[b], e.a = g * e.g[c];
    if (d) {
        e = 0;
        d = this.b.a;
        for(a = d.b; a !== d; a = a.b)if (b = a.a, !(0 >= b.f)) {
            do e += (b.a.b - b.b.a.b) * (b.a.a + b.b.a.a), b = b.e;
            while (b !== a.a)
        }
        if (0 > e) for(e = this.b.c, d = e.e; d !== e; d = d.e)d.a = -d.a;
    }
    this.n = !1;
    e = this.b.b;
    for(a = e.h; a !== e; a = d)if (d = a.h, b = a.e, t(a.a, a.b.a) && a.e.e !== a && (ta(this, b, a), I(a), a = b, b = a.e), b.e === a) {
        if (b !== a) {
            if (b === d || b === d.b) d = d.h;
            I(b);
        }
        if (a === d || a === d.b) d = d.h;
        I(a);
    }
    this.e = e = new Da;
    d = this.b.c;
    for(a = d.e; a !== d; a = a.e)a.h = xa(e, a);
    Ea(e);
    this.f = new Aa(this);
    za(this, -O);
    for(za(this, O); null !== (e = Fa(this.e));){
        for(;;){
            a: if (a = this.e, 0 === a.a) d = Ga(a.b);
            else if (d = a.c[a.d[a.a - 1]], 0 !== a.b.a && (a = Ga(a.b), u(a, d))) {
                d = a;
                break a;
            }
            if (null === d || !t(d, e)) break;
            d = Fa(this.e);
            ta(this, e.c, d.c);
        }
        ya(this, e);
    }
    this.a = this.f.a.a.b.a.a;
    for(e = 0; null !== (d = this.f.a.a.b);)d.h || ++e, Q(d);
    this.f = null;
    e = this.e;
    e.b = null;
    e.d = null;
    this.e = e.c = null;
    e = this.b;
    for(a = e.a.b; a !== e.a; a = d)d = a.b, a = a.a, a.e.e === a && (P(a.c, a), I(a));
    if (!this.n) {
        e = this.b;
        if (this.m) for(a = e.b.h; a !== e.b; a = d)d = a.h, a.b.d.c !== a.d.c ? a.f = a.d.c ? 1 : -1 : I(a);
        else for(a = e.a.b; a !== e.a; a = d)if (d = a.b, a.c) {
            for(a = a.a; u(a.b.a, a.a); a = a.c.b);
            for(; u(a.a, a.b.a); a = a.e);
            b = a.c.b;
            for(c = void 0; a.e !== b;)if (u(a.b.a, b.a)) {
                for(; b.e !== a && (ca(b.e) || 0 >= x(b.a, b.b.a, b.e.b.a));)c = L(b.e, b), b = c.b;
                b = b.c.b;
            } else {
                for(; b.e !== a && (da(a.c.b) || 0 <= x(a.b.a, a.a, a.c.b.a));)c = L(a, a.c.b), a = c.b;
                a = a.e;
            }
            for(; b.e.e !== a;)c = L(b.e, b), b = c.b;
        }
        if (this.h || this.i || this.k || this.l) if (this.m) for(e = this.b, d = e.a.b; d !== e.a; d = d.b){
            if (d.c) {
                this.h && this.h(2, this.c);
                a = d.a;
                do this.k && this.k(a.a.d, this.c), a = a.e;
                while (a !== d.a)
                this.i && this.i(this.c);
            }
        }
        else {
            e = this.b;
            d = !!this.l;
            a = !1;
            b = -1;
            for(c = e.a.d; c !== e.a; c = c.d)if (c.c) {
                a || (this.h && this.h(4, this.c), a = !0);
                g = c.a;
                do d && (f = g.b.d.c ? 0 : 1, b !== f && (b = f, this.l && this.l(!!b, this.c))), this.k && this.k(g.a.d, this.c), g = g.e;
                while (g !== c.a)
            }
            a && this.i && this.i(this.c);
        }
        if (this.r) {
            e = this.b;
            for(a = e.a.b; a !== e.a; a = d)if (d = a.b, !a.c) {
                b = a.a;
                c = b.e;
                g = void 0;
                do g = c, c = g.e, g.d = null, null === g.b.d && (g.c === g ? F(g.a, null) : (g.a.c = g.c, H(g, J(g))), f = g.b, f.c === f ? F(f.a, null) : (f.a.c = f.c, H(f, J(f))), fa(g));
                while (g !== b)
                b = a.d;
                a = a.b;
                a.d = b;
                b.b = a;
            }
            this.r(this.b);
            this.c = this.b = null;
            return;
        }
    }
    this.b = this.c = null;
};
function Z(a, b) {
    if (a.d !== b) for(; a.d !== b;)if (a.d < b) switch(a.d){
        case Y:
            V(a, 100151);
            a.u(null);
            break;
        case 1:
            V(a, 100152), a.t();
    }
    else switch(a.d){
        case 2:
            V(a, 100154);
            a.v();
            break;
        case 1:
            V(a, 100153), a.w();
    }
}
function V(a, b) {
    a.p && a.p(b, a.c);
}
;
function ga(a, b) {
    this.b = a || this;
    this.d = b || this;
    this.a = null;
    this.c = !1;
}
;
function M() {
    this.h = this;
    this.i = this.d = this.a = this.e = this.c = this.b = null;
    this.f = 0;
}
function J(a) {
    return a.b.e;
}
;
function Ca() {
    this.c = new N;
    this.a = new ga;
    this.b = new M;
    this.d = new M;
    this.b.b = this.d;
    this.d.b = this.b;
}
;
function N(a, b) {
    this.e = a || this;
    this.f = b || this;
    this.d = this.c = null;
    this.g = [
        0,
        0,
        0
    ];
    this.h = this.a = this.b = 0;
}
;
function Da() {
    this.c = [];
    this.d = null;
    this.a = 0;
    this.e = !1;
    this.b = new Ha;
}
function Ea(a) {
    a.d = [];
    for(var b = 0; b < a.a; b++)a.d[b] = b;
    a.d.sort(function(a) {
        return function(b, e) {
            return u(a[b], a[e]) ? 1 : -1;
        };
    }(a.c));
    a.e = !0;
    Ia(a.b);
}
function xa(a, b) {
    if (a.e) {
        var c = a.b, d = ++c.a;
        2 * d > c.f && (c.f *= 2, c.c = Ja(c.c, c.f + 1));
        var e;
        0 === c.b ? e = d : (e = c.b, c.b = c.c[c.b]);
        c.e[e] = b;
        c.c[e] = d;
        c.d[d] = e;
        c.h && va(c, d);
        return e;
    }
    c = a.a++;
    a.c[c] = b;
    return -(c + 1);
}
function Fa(a) {
    if (0 === a.a) return Ka(a.b);
    var b = a.c[a.d[a.a - 1]];
    if (0 !== a.b.a && u(Ga(a.b), b)) return Ka(a.b);
    do --a.a;
    while (0 < a.a && null === a.c[a.d[a.a - 1]])
    return b;
}
;
function Ha() {
    this.d = Ja([
        0
    ], 33);
    this.e = [
        null,
        null
    ];
    this.c = [
        0,
        0
    ];
    this.a = 0;
    this.f = 32;
    this.b = 0;
    this.h = !1;
    this.d[1] = 1;
}
function Ja(a, b) {
    for(var c = Array(b), d = 0; d < a.length; d++)c[d] = a[d];
    for(; d < b; d++)c[d] = 0;
    return c;
}
function Ia(a) {
    for(var b = a.a; 1 <= b; --b)W(a, b);
    a.h = !0;
}
function Ga(a) {
    return a.e[a.d[1]];
}
function Ka(a) {
    var b = a.d, c = a.e, d = a.c, e = b[1], f = c[e];
    0 < a.a && (b[1] = b[a.a], d[b[1]] = 1, c[e] = null, d[e] = a.b, a.b = e, 0 < --a.a && W(a, 1));
    return f;
}
function W(a, b) {
    for(var c = a.d, d = a.e, e = a.c, f = b, g = c[f];;){
        var h = f << 1;
        h < a.a && u(d[c[h + 1]], d[c[h]]) && (h += 1);
        var k = c[h];
        if (h > a.a || u(d[g], d[k])) {
            c[f] = g;
            e[g] = f;
            break;
        }
        c[f] = k;
        e[k] = f;
        f = h;
    }
}
function va(a, b) {
    for(var c = a.d, d = a.e, e = a.c, f = b, g = c[f];;){
        var h = f >> 1, k = c[h];
        if (0 === h || u(d[k], d[g])) {
            c[f] = g;
            e[g] = f;
            break;
        }
        c[f] = k;
        e[k] = f;
        f = h;
    }
}
;
function ma() {
    this.e = this.a = null;
    this.f = 0;
    this.c = this.b = this.h = this.d = !1;
}
function S(a) {
    return a.e.c.b;
}
function R(a) {
    return a.e.a.b;
}
;
this.libtess = {
    GluTesselator: X,
    windingRule: {
        GLU_TESS_WINDING_ODD: 100130,
        GLU_TESS_WINDING_NONZERO: 100131,
        GLU_TESS_WINDING_POSITIVE: 100132,
        GLU_TESS_WINDING_NEGATIVE: 100133,
        GLU_TESS_WINDING_ABS_GEQ_TWO: 100134
    },
    primitiveType: {
        GL_LINE_LOOP: 2,
        GL_TRIANGLES: 4,
        GL_TRIANGLE_STRIP: 5,
        GL_TRIANGLE_FAN: 6
    },
    errorType: {
        GLU_TESS_MISSING_BEGIN_POLYGON: 100151,
        GLU_TESS_MISSING_END_POLYGON: 100153,
        GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,
        GLU_TESS_MISSING_END_CONTOUR: 100154,
        GLU_TESS_COORD_TOO_LARGE: 100155,
        GLU_TESS_NEED_COMBINE_CALLBACK: 100156
    },
    gluEnum: {
        GLU_TESS_MESH: 100112,
        GLU_TESS_TOLERANCE: 100142,
        GLU_TESS_WINDING_RULE: 100140,
        GLU_TESS_BOUNDARY_ONLY: 100141,
        GLU_INVALID_ENUM: 100900,
        GLU_INVALID_VALUE: 100901,
        GLU_TESS_BEGIN: 100100,
        GLU_TESS_VERTEX: 100101,
        GLU_TESS_END: 100102,
        GLU_TESS_ERROR: 100103,
        GLU_TESS_EDGE_FLAG: 100104,
        GLU_TESS_COMBINE: 100105,
        GLU_TESS_BEGIN_DATA: 100106,
        GLU_TESS_VERTEX_DATA: 100107,
        GLU_TESS_END_DATA: 100108,
        GLU_TESS_ERROR_DATA: 100109,
        GLU_TESS_EDGE_FLAG_DATA: 100110,
        GLU_TESS_COMBINE_DATA: 100111
    }
};
X.prototype.gluDeleteTess = X.prototype.x;
X.prototype.gluTessProperty = X.prototype.B;
X.prototype.gluGetTessProperty = X.prototype.y;
X.prototype.gluTessNormal = X.prototype.A;
X.prototype.gluTessCallback = X.prototype.z;
X.prototype.gluTessVertex = X.prototype.C;
X.prototype.gluTessBeginPolygon = X.prototype.u;
X.prototype.gluTessBeginContour = X.prototype.t;
X.prototype.gluTessEndContour = X.prototype.v;
X.prototype.gluTessEndPolygon = X.prototype.w;
if ("TURBOPACK compile-time truthy", 1) {
    module.exports = this.libtess;
}
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/typeof.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_typeof)
});
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/toPrimitive.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>toPrimitive)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/typeof.js [app-client] (ecmascript)");
;
function toPrimitive(t, r) {
    if ("object" != (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>toPropertyKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/typeof.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPrimitive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/toPrimitive.js [app-client] (ecmascript)");
;
;
function toPropertyKey(t) {
    var i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPrimitive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(t, "string");
    return "symbol" == (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(i) ? i : i + "";
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_defineProperty)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)");
;
function _defineProperty(e, r, t) {
    return (r = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[r] = t, e;
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/objectSpread.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_objectSpread)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/defineProperty.js [app-client] (ecmascript)");
;
function _objectSpread(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? Object(arguments[r]) : {}, o = Object.keys(t);
        "function" == typeof Object.getOwnPropertySymbols && o.push.apply(o, Object.getOwnPropertySymbols(t).filter(function(e) {
            return Object.getOwnPropertyDescriptor(t, e).enumerable;
        })), o.forEach(function(r) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$defineProperty$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(e, r, t[r]);
        });
    }
    return e;
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/classCallCheck.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_classCallCheck)
});
function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/createClass.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_createClass)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js [app-client] (ecmascript)");
;
function _defineProperties(e, r) {
    for(var t = 0; t < r.length; t++){
        var o = r[t];
        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$toPropertyKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(o.key), o);
    }
}
function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
        writable: !1
    }), e;
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_assertThisInitialized)
});
function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_possibleConstructorReturn)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/typeof.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js [app-client] (ecmascript)");
;
;
function _possibleConstructorReturn(t, e) {
    if (e && ("object" == (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(e) || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(t);
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_getPrototypeOf)
});
function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
        return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_setPrototypeOf)
});
function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
        return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
}
;
}}),
"[project]/node_modules/@babel/runtime/helpers/esm/inherits.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>_inherits)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$setPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js [app-client] (ecmascript)");
;
function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
        constructor: {
            value: t,
            writable: !0,
            configurable: !0
        }
    }), Object.defineProperty(t, "prototype", {
        writable: !1
    }), e && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$setPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(t, e);
}
;
}}),
"[project]/node_modules/i18next/dist/esm/i18next.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/typeof.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/objectSpread.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/classCallCheck.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/createClass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$possibleConstructorReturn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$getPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$inherits$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/inherits.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
var consoleLogger = {
    type: 'logger',
    log: function log(args) {
        this.output('log', args);
    },
    warn: function warn(args) {
        this.output('warn', args);
    },
    error: function error(args) {
        this.output('error', args);
    },
    output: function output(type, args) {
        if (console && console[type]) console[type].apply(console, args);
    }
};
var Logger = function() {
    function Logger(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, Logger);
        this.init(concreteLogger, options);
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Logger, [
        {
            key: "init",
            value: function init(concreteLogger) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                this.prefix = options.prefix || 'i18next:';
                this.logger = concreteLogger || consoleLogger;
                this.options = options;
                this.debug = options.debug;
            }
        },
        {
            key: "setDebug",
            value: function setDebug(bool) {
                this.debug = bool;
            }
        },
        {
            key: "log",
            value: function log() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                return this.forward(args, 'log', '', true);
            }
        },
        {
            key: "warn",
            value: function warn() {
                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
                    args[_key2] = arguments[_key2];
                }
                return this.forward(args, 'warn', '', true);
            }
        },
        {
            key: "error",
            value: function error() {
                for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){
                    args[_key3] = arguments[_key3];
                }
                return this.forward(args, 'error', '');
            }
        },
        {
            key: "deprecate",
            value: function deprecate() {
                for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){
                    args[_key4] = arguments[_key4];
                }
                return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
            }
        },
        {
            key: "forward",
            value: function forward(args, lvl, prefix, debugOnly) {
                if (debugOnly && !this.debug) return null;
                if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
                return this.logger[lvl](args);
            }
        },
        {
            key: "create",
            value: function create(moduleName) {
                return new Logger(this.logger, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, {
                    prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
                }, this.options));
            }
        }
    ]);
    return Logger;
}();
var baseLogger = new Logger();
var EventEmitter = function() {
    function EventEmitter() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, EventEmitter);
        this.observers = {};
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(EventEmitter, [
        {
            key: "on",
            value: function on(events, listener) {
                var _this = this;
                events.split(' ').forEach(function(event) {
                    _this.observers[event] = _this.observers[event] || [];
                    _this.observers[event].push(listener);
                });
                return this;
            }
        },
        {
            key: "off",
            value: function off(event, listener) {
                if (!this.observers[event]) return;
                if (!listener) {
                    delete this.observers[event];
                    return;
                }
                this.observers[event] = this.observers[event].filter(function(l) {
                    return l !== listener;
                });
            }
        },
        {
            key: "emit",
            value: function emit(event) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    args[_key - 1] = arguments[_key];
                }
                if (this.observers[event]) {
                    var cloned = [].concat(this.observers[event]);
                    cloned.forEach(function(observer) {
                        observer.apply(void 0, args);
                    });
                }
                if (this.observers['*']) {
                    var _cloned = [].concat(this.observers['*']);
                    _cloned.forEach(function(observer) {
                        observer.apply(observer, [
                            event
                        ].concat(args));
                    });
                }
            }
        }
    ]);
    return EventEmitter;
}();
function defer() {
    var res;
    var rej;
    var promise = new Promise(function(resolve, reject) {
        res = resolve;
        rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
}
function makeString(object) {
    if (object == null) return '';
    return '' + object;
}
function copy(a, s, t) {
    a.forEach(function(m) {
        if (s[m]) t[m] = s[m];
    });
}
function getLastOfPath(object, path, Empty) {
    function cleanKey(key) {
        return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
    }
    function canNotTraverseDeeper() {
        return !object || typeof object === 'string';
    }
    var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
    while(stack.length > 1){
        if (canNotTraverseDeeper()) return {};
        var key = cleanKey(stack.shift());
        if (!object[key] && Empty) object[key] = new Empty();
        if (Object.prototype.hasOwnProperty.call(object, key)) {
            object = object[key];
        } else {
            object = {};
        }
    }
    if (canNotTraverseDeeper()) return {};
    return {
        obj: object,
        k: cleanKey(stack.shift())
    };
}
function setPath(object, path, newValue) {
    var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
    obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
    var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
    obj[k] = obj[k] || [];
    if (concat) obj[k] = obj[k].concat(newValue);
    if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
    var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
    if (!obj) return undefined;
    return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
    var value = getPath(data, key);
    if (value !== undefined) {
        return value;
    }
    return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
    for(var prop in source){
        if (prop !== '__proto__' && prop !== 'constructor') {
            if (prop in target) {
                if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
                    if (overwrite) target[prop] = source[prop];
                } else {
                    deepExtend(target[prop], source[prop], overwrite);
                }
            } else {
                target[prop] = source[prop];
            }
        }
    }
    return target;
}
function regexEscape(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;'
};
function escape(data) {
    if (typeof data === 'string') {
        return data.replace(/[&<>"'\/]/g, function(s) {
            return _entityMap[s];
        });
    }
    return data;
}
var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
var ResourceStore = function(_EventEmitter) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$inherits$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ResourceStore, _EventEmitter);
    function ResourceStore(data) {
        var _this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            ns: [
                'translation'
            ],
            defaultNS: 'translation'
        };
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, ResourceStore);
        _this = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$possibleConstructorReturn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$getPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ResourceStore).call(this));
        if (isIE10) {
            EventEmitter.call((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this));
        }
        _this.data = data || {};
        _this.options = options;
        if (_this.options.keySeparator === undefined) {
            _this.options.keySeparator = '.';
        }
        return _this;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ResourceStore, [
        {
            key: "addNamespaces",
            value: function addNamespaces(ns) {
                if (this.options.ns.indexOf(ns) < 0) {
                    this.options.ns.push(ns);
                }
            }
        },
        {
            key: "removeNamespaces",
            value: function removeNamespaces(ns) {
                var index = this.options.ns.indexOf(ns);
                if (index > -1) {
                    this.options.ns.splice(index, 1);
                }
            }
        },
        {
            key: "getResource",
            value: function getResource(lng, ns, key) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
                var path = [
                    lng,
                    ns
                ];
                if (key && typeof key !== 'string') path = path.concat(key);
                if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);
                if (lng.indexOf('.') > -1) {
                    path = lng.split('.');
                }
                return getPath(this.data, path);
            }
        },
        {
            key: "addResource",
            value: function addResource(lng, ns, key, value) {
                var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
                    silent: false
                };
                var keySeparator = this.options.keySeparator;
                if (keySeparator === undefined) keySeparator = '.';
                var path = [
                    lng,
                    ns
                ];
                if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
                if (lng.indexOf('.') > -1) {
                    path = lng.split('.');
                    value = ns;
                    ns = path[1];
                }
                this.addNamespaces(ns);
                setPath(this.data, path, value);
                if (!options.silent) this.emit('added', lng, ns, key, value);
            }
        },
        {
            key: "addResources",
            value: function addResources(lng, ns, resources) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                    silent: false
                };
                for(var m in resources){
                    if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
                        silent: true
                    });
                }
                if (!options.silent) this.emit('added', lng, ns, resources);
            }
        },
        {
            key: "addResourceBundle",
            value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
                var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
                    silent: false
                };
                var path = [
                    lng,
                    ns
                ];
                if (lng.indexOf('.') > -1) {
                    path = lng.split('.');
                    deep = resources;
                    resources = ns;
                    ns = path[1];
                }
                this.addNamespaces(ns);
                var pack = getPath(this.data, path) || {};
                if (deep) {
                    deepExtend(pack, resources, overwrite);
                } else {
                    pack = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, pack, resources);
                }
                setPath(this.data, path, pack);
                if (!options.silent) this.emit('added', lng, ns, resources);
            }
        },
        {
            key: "removeResourceBundle",
            value: function removeResourceBundle(lng, ns) {
                if (this.hasResourceBundle(lng, ns)) {
                    delete this.data[lng][ns];
                }
                this.removeNamespaces(ns);
                this.emit('removed', lng, ns);
            }
        },
        {
            key: "hasResourceBundle",
            value: function hasResourceBundle(lng, ns) {
                return this.getResource(lng, ns) !== undefined;
            }
        },
        {
            key: "getResourceBundle",
            value: function getResourceBundle(lng, ns) {
                if (!ns) ns = this.options.defaultNS;
                if (this.options.compatibilityAPI === 'v1') return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, {}, this.getResource(lng, ns));
                return this.getResource(lng, ns);
            }
        },
        {
            key: "getDataByLanguage",
            value: function getDataByLanguage(lng) {
                return this.data[lng];
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.data;
            }
        }
    ]);
    return ResourceStore;
}(EventEmitter);
var postProcessor = {
    processors: {},
    addPostProcessor: function addPostProcessor(module) {
        this.processors[module.name] = module;
    },
    handle: function handle(processors, value, key, options, translator) {
        var _this = this;
        processors.forEach(function(processor) {
            if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
        });
        return value;
    }
};
var checkedLoadedFor = {};
var Translator = function(_EventEmitter) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$inherits$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Translator, _EventEmitter);
    function Translator(services) {
        var _this;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, Translator);
        _this = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$possibleConstructorReturn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$getPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Translator).call(this));
        if (isIE10) {
            EventEmitter.call((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this));
        }
        copy([
            'resourceStore',
            'languageUtils',
            'pluralResolver',
            'interpolator',
            'backendConnector',
            'i18nFormat',
            'utils'
        ], services, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this));
        _this.options = options;
        if (_this.options.keySeparator === undefined) {
            _this.options.keySeparator = '.';
        }
        _this.logger = baseLogger.create('translator');
        return _this;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Translator, [
        {
            key: "changeLanguage",
            value: function changeLanguage(lng) {
                if (lng) this.language = lng;
            }
        },
        {
            key: "exists",
            value: function exists(key) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                    interpolation: {}
                };
                var resolved = this.resolve(key, options);
                return resolved && resolved.res !== undefined;
            }
        },
        {
            key: "extractFromKey",
            value: function extractFromKey(key, options) {
                var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
                if (nsSeparator === undefined) nsSeparator = ':';
                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
                var namespaces = options.ns || this.options.defaultNS;
                if (nsSeparator && key.indexOf(nsSeparator) > -1) {
                    var m = key.match(this.interpolator.nestingRegexp);
                    if (m && m.length > 0) {
                        return {
                            key: key,
                            namespaces: namespaces
                        };
                    }
                    var parts = key.split(nsSeparator);
                    if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
                    key = parts.join(keySeparator);
                }
                if (typeof namespaces === 'string') namespaces = [
                    namespaces
                ];
                return {
                    key: key,
                    namespaces: namespaces
                };
            }
        },
        {
            key: "translate",
            value: function translate(keys, options, lastKey) {
                var _this2 = this;
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
                    options = this.options.overloadTranslationOptionHandler(arguments);
                }
                if (!options) options = {};
                if (keys === undefined || keys === null) return '';
                if (!Array.isArray(keys)) keys = [
                    String(keys)
                ];
                var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
                var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
                var namespace = namespaces[namespaces.length - 1];
                var lng = options.lng || this.language;
                var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
                if (lng && lng.toLowerCase() === 'cimode') {
                    if (appendNamespaceToCIMode) {
                        var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                        return namespace + nsSeparator + key;
                    }
                    return key;
                }
                var resolved = this.resolve(keys, options);
                var res = resolved && resolved.res;
                var resUsedKey = resolved && resolved.usedKey || key;
                var resExactUsedKey = resolved && resolved.exactUsedKey || key;
                var resType = Object.prototype.toString.apply(res);
                var noObject = [
                    '[object Number]',
                    '[object Function]',
                    '[object RegExp]'
                ];
                var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
                var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
                var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
                if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
                    if (!options.returnObjects && !this.options.returnObjects) {
                        this.logger.warn('accessing an object - but returnObjects options is not enabled!');
                        return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
                    }
                    if (keySeparator) {
                        var resTypeIsArray = resType === '[object Array]';
                        var copy = resTypeIsArray ? [] : {};
                        var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                        for(var m in res){
                            if (Object.prototype.hasOwnProperty.call(res, m)) {
                                var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                                copy[m] = this.translate(deepKey, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, options, {
                                    joinArrays: false,
                                    ns: namespaces
                                }));
                                if (copy[m] === deepKey) copy[m] = res[m];
                            }
                        }
                        res = copy;
                    }
                } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
                    res = res.join(joinArrays);
                    if (res) res = this.extendTranslation(res, keys, options, lastKey);
                } else {
                    var usedDefault = false;
                    var usedKey = false;
                    var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                    var hasDefaultValue = Translator.hasDefaultValue(options);
                    var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count) : '';
                    var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
                    if (!this.isValidLookup(res) && hasDefaultValue) {
                        usedDefault = true;
                        res = defaultValue;
                    }
                    if (!this.isValidLookup(res)) {
                        usedKey = true;
                        res = key;
                    }
                    var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
                    if (usedKey || usedDefault || updateMissing) {
                        this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
                        if (keySeparator) {
                            var fk = this.resolve(key, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, options, {
                                keySeparator: false
                            }));
                            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
                        }
                        var lngs = [];
                        var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                        if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                            for(var i = 0; i < fallbackLngs.length; i++){
                                lngs.push(fallbackLngs[i]);
                            }
                        } else if (this.options.saveMissingTo === 'all') {
                            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                        } else {
                            lngs.push(options.lng || this.language);
                        }
                        var send = function send(l, k, fallbackValue) {
                            if (_this2.options.missingKeyHandler) {
                                _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);
                            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                                _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);
                            }
                            _this2.emit('missingKey', l, namespace, k, res);
                        };
                        if (this.options.saveMissing) {
                            if (this.options.saveMissingPlurals && needsPluralHandling) {
                                lngs.forEach(function(language) {
                                    _this2.pluralResolver.getSuffixes(language).forEach(function(suffix) {
                                        send([
                                            language
                                        ], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                                    });
                                });
                            } else {
                                send(lngs, key, defaultValue);
                            }
                        }
                    }
                    res = this.extendTranslation(res, keys, options, resolved, lastKey);
                    if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
                    if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
                }
                return res;
            }
        },
        {
            key: "extendTranslation",
            value: function extendTranslation(res, key, options, resolved, lastKey) {
                var _this3 = this;
                if (this.i18nFormat && this.i18nFormat.parse) {
                    res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                        resolved: resolved
                    });
                } else if (!options.skipInterpolation) {
                    if (options.interpolation) this.interpolator.init((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, options, {
                        interpolation: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, this.options.interpolation, options.interpolation)
                    }));
                    var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
                    var nestBef;
                    if (skipOnVariables) {
                        var nb = res.match(this.interpolator.nestingRegexp);
                        nestBef = nb && nb.length;
                    }
                    var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
                    if (this.options.interpolation.defaultVariables) data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, this.options.interpolation.defaultVariables, data);
                    res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
                    if (skipOnVariables) {
                        var na = res.match(this.interpolator.nestingRegexp);
                        var nestAft = na && na.length;
                        if (nestBef < nestAft) options.nest = false;
                    }
                    if (options.nest !== false) res = this.interpolator.nest(res, function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                            args[_key] = arguments[_key];
                        }
                        if (lastKey && lastKey[0] === args[0] && !options.context) {
                            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
                            return null;
                        }
                        return _this3.translate.apply(_this3, args.concat([
                            key
                        ]));
                    }, options);
                    if (options.interpolation) this.interpolator.reset();
                }
                var postProcess = options.postProcess || this.options.postProcess;
                var postProcessorNames = typeof postProcess === 'string' ? [
                    postProcess
                ] : postProcess;
                if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
                    res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                        i18nResolved: resolved
                    }, options) : options, this);
                }
                return res;
            }
        },
        {
            key: "resolve",
            value: function resolve(keys) {
                var _this4 = this;
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var found;
                var usedKey;
                var exactUsedKey;
                var usedLng;
                var usedNS;
                if (typeof keys === 'string') keys = [
                    keys
                ];
                keys.forEach(function(k) {
                    if (_this4.isValidLookup(found)) return;
                    var extracted = _this4.extractFromKey(k, options);
                    var key = extracted.key;
                    usedKey = key;
                    var namespaces = extracted.namespaces;
                    if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
                    var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                    var needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';
                    var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
                    namespaces.forEach(function(ns) {
                        if (_this4.isValidLookup(found)) return;
                        usedNS = ns;
                        if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
                            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                        }
                        codes.forEach(function(code) {
                            if (_this4.isValidLookup(found)) return;
                            usedLng = code;
                            var finalKey = key;
                            var finalKeys = [
                                finalKey
                            ];
                            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                                _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                            } else {
                                var pluralSuffix;
                                if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
                                if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);
                                if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
                                if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);
                            }
                            var possibleKey;
                            while(possibleKey = finalKeys.pop()){
                                if (!_this4.isValidLookup(found)) {
                                    exactUsedKey = possibleKey;
                                    found = _this4.getResource(code, ns, possibleKey, options);
                                }
                            }
                        });
                    });
                });
                return {
                    res: found,
                    usedKey: usedKey,
                    exactUsedKey: exactUsedKey,
                    usedLng: usedLng,
                    usedNS: usedNS
                };
            }
        },
        {
            key: "isValidLookup",
            value: function isValidLookup(res) {
                return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
            }
        },
        {
            key: "getResource",
            value: function getResource(code, ns, key) {
                var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
                return this.resourceStore.getResource(code, ns, key, options);
            }
        }
    ], [
        {
            key: "hasDefaultValue",
            value: function hasDefaultValue(options) {
                var prefix = 'defaultValue';
                for(var option in options){
                    if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
                        return true;
                    }
                }
                return false;
            }
        }
    ]);
    return Translator;
}(EventEmitter);
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = function() {
    function LanguageUtil(options) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, LanguageUtil);
        this.options = options;
        this.whitelist = this.options.supportedLngs || false;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create('languageUtils');
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(LanguageUtil, [
        {
            key: "getScriptPartFromCode",
            value: function getScriptPartFromCode(code) {
                if (!code || code.indexOf('-') < 0) return null;
                var p = code.split('-');
                if (p.length === 2) return null;
                p.pop();
                if (p[p.length - 1].toLowerCase() === 'x') return null;
                return this.formatLanguageCode(p.join('-'));
            }
        },
        {
            key: "getLanguagePartFromCode",
            value: function getLanguagePartFromCode(code) {
                if (!code || code.indexOf('-') < 0) return code;
                var p = code.split('-');
                return this.formatLanguageCode(p[0]);
            }
        },
        {
            key: "formatLanguageCode",
            value: function formatLanguageCode(code) {
                if (typeof code === 'string' && code.indexOf('-') > -1) {
                    var specialCases = [
                        'hans',
                        'hant',
                        'latn',
                        'cyrl',
                        'cans',
                        'mong',
                        'arab'
                    ];
                    var p = code.split('-');
                    if (this.options.lowerCaseLng) {
                        p = p.map(function(part) {
                            return part.toLowerCase();
                        });
                    } else if (p.length === 2) {
                        p[0] = p[0].toLowerCase();
                        p[1] = p[1].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                    } else if (p.length === 3) {
                        p[0] = p[0].toLowerCase();
                        if (p[1].length === 2) p[1] = p[1].toUpperCase();
                        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
                        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
                    }
                    return p.join('-');
                }
                return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
            }
        },
        {
            key: "isWhitelisted",
            value: function isWhitelisted(code) {
                this.logger.deprecate('languageUtils.isWhitelisted', 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.');
                return this.isSupportedCode(code);
            }
        },
        {
            key: "isSupportedCode",
            value: function isSupportedCode(code) {
                if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
                    code = this.getLanguagePartFromCode(code);
                }
                return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
            }
        },
        {
            key: "getBestMatchFromCodes",
            value: function getBestMatchFromCodes(codes) {
                var _this = this;
                if (!codes) return null;
                var found;
                codes.forEach(function(code) {
                    if (found) return;
                    var cleanedLng = _this.formatLanguageCode(code);
                    if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
                });
                if (!found && this.options.supportedLngs) {
                    codes.forEach(function(code) {
                        if (found) return;
                        var lngOnly = _this.getLanguagePartFromCode(code);
                        if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
                        found = _this.options.supportedLngs.find(function(supportedLng) {
                            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
                        });
                    });
                }
                if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
                return found;
            }
        },
        {
            key: "getFallbackCodes",
            value: function getFallbackCodes(fallbacks, code) {
                if (!fallbacks) return [];
                if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
                if (typeof fallbacks === 'string') fallbacks = [
                    fallbacks
                ];
                if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
                if (!code) return fallbacks["default"] || [];
                var found = fallbacks[code];
                if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
                if (!found) found = fallbacks[this.formatLanguageCode(code)];
                if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
                if (!found) found = fallbacks["default"];
                return found || [];
            }
        },
        {
            key: "toResolveHierarchy",
            value: function toResolveHierarchy(code, fallbackCode) {
                var _this2 = this;
                var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
                var codes = [];
                var addCode = function addCode(c) {
                    if (!c) return;
                    if (_this2.isSupportedCode(c)) {
                        codes.push(c);
                    } else {
                        _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
                    }
                };
                if (typeof code === 'string' && code.indexOf('-') > -1) {
                    if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
                    if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
                    if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
                } else if (typeof code === 'string') {
                    addCode(this.formatLanguageCode(code));
                }
                fallbackCodes.forEach(function(fc) {
                    if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
                });
                return codes;
            }
        }
    ]);
    return LanguageUtil;
}();
var sets = [
    {
        lngs: [
            'ach',
            'ak',
            'am',
            'arn',
            'br',
            'fil',
            'gun',
            'ln',
            'mfe',
            'mg',
            'mi',
            'oc',
            'pt',
            'pt-BR',
            'tg',
            'tl',
            'ti',
            'tr',
            'uz',
            'wa'
        ],
        nr: [
            1,
            2
        ],
        fc: 1
    },
    {
        lngs: [
            'af',
            'an',
            'ast',
            'az',
            'bg',
            'bn',
            'ca',
            'da',
            'de',
            'dev',
            'el',
            'en',
            'eo',
            'es',
            'et',
            'eu',
            'fi',
            'fo',
            'fur',
            'fy',
            'gl',
            'gu',
            'ha',
            'hi',
            'hu',
            'hy',
            'ia',
            'it',
            'kn',
            'ku',
            'lb',
            'mai',
            'ml',
            'mn',
            'mr',
            'nah',
            'nap',
            'nb',
            'ne',
            'nl',
            'nn',
            'no',
            'nso',
            'pa',
            'pap',
            'pms',
            'ps',
            'pt-PT',
            'rm',
            'sco',
            'se',
            'si',
            'so',
            'son',
            'sq',
            'sv',
            'sw',
            'ta',
            'te',
            'tk',
            'ur',
            'yo'
        ],
        nr: [
            1,
            2
        ],
        fc: 2
    },
    {
        lngs: [
            'ay',
            'bo',
            'cgg',
            'fa',
            'ht',
            'id',
            'ja',
            'jbo',
            'ka',
            'kk',
            'km',
            'ko',
            'ky',
            'lo',
            'ms',
            'sah',
            'su',
            'th',
            'tt',
            'ug',
            'vi',
            'wo',
            'zh'
        ],
        nr: [
            1
        ],
        fc: 3
    },
    {
        lngs: [
            'be',
            'bs',
            'cnr',
            'dz',
            'hr',
            'ru',
            'sr',
            'uk'
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 4
    },
    {
        lngs: [
            'ar'
        ],
        nr: [
            0,
            1,
            2,
            3,
            11,
            100
        ],
        fc: 5
    },
    {
        lngs: [
            'cs',
            'sk'
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 6
    },
    {
        lngs: [
            'csb',
            'pl'
        ],
        nr: [
            1,
            2,
            5
        ],
        fc: 7
    },
    {
        lngs: [
            'cy'
        ],
        nr: [
            1,
            2,
            3,
            8
        ],
        fc: 8
    },
    {
        lngs: [
            'fr'
        ],
        nr: [
            1,
            2
        ],
        fc: 9
    },
    {
        lngs: [
            'ga'
        ],
        nr: [
            1,
            2,
            3,
            7,
            11
        ],
        fc: 10
    },
    {
        lngs: [
            'gd'
        ],
        nr: [
            1,
            2,
            3,
            20
        ],
        fc: 11
    },
    {
        lngs: [
            'is'
        ],
        nr: [
            1,
            2
        ],
        fc: 12
    },
    {
        lngs: [
            'jv'
        ],
        nr: [
            0,
            1
        ],
        fc: 13
    },
    {
        lngs: [
            'kw'
        ],
        nr: [
            1,
            2,
            3,
            4
        ],
        fc: 14
    },
    {
        lngs: [
            'lt'
        ],
        nr: [
            1,
            2,
            10
        ],
        fc: 15
    },
    {
        lngs: [
            'lv'
        ],
        nr: [
            1,
            2,
            0
        ],
        fc: 16
    },
    {
        lngs: [
            'mk'
        ],
        nr: [
            1,
            2
        ],
        fc: 17
    },
    {
        lngs: [
            'mnk'
        ],
        nr: [
            0,
            1,
            2
        ],
        fc: 18
    },
    {
        lngs: [
            'mt'
        ],
        nr: [
            1,
            2,
            11,
            20
        ],
        fc: 19
    },
    {
        lngs: [
            'or'
        ],
        nr: [
            2,
            1
        ],
        fc: 2
    },
    {
        lngs: [
            'ro'
        ],
        nr: [
            1,
            2,
            20
        ],
        fc: 20
    },
    {
        lngs: [
            'sl'
        ],
        nr: [
            5,
            1,
            2,
            3
        ],
        fc: 21
    },
    {
        lngs: [
            'he',
            'iw'
        ],
        nr: [
            1,
            2,
            20,
            21
        ],
        fc: 22
    }
];
var _rulesPluralsTypes = {
    1: function _(n) {
        return Number(n > 1);
    },
    2: function _(n) {
        return Number(n != 1);
    },
    3: function _(n) {
        return 0;
    },
    4: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    5: function _(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
    },
    6: function _(n) {
        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
    },
    7: function _(n) {
        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    8: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
    },
    9: function _(n) {
        return Number(n >= 2);
    },
    10: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
    },
    11: function _(n) {
        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
    },
    12: function _(n) {
        return Number(n % 10 != 1 || n % 100 == 11);
    },
    13: function _(n) {
        return Number(n !== 0);
    },
    14: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
    },
    15: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
    },
    16: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
    },
    17: function _(n) {
        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
    },
    18: function _(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
    },
    19: function _(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
    },
    20: function _(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
    },
    21: function _(n) {
        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
    },
    22: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
    }
};
function createRules() {
    var rules = {};
    sets.forEach(function(set) {
        set.lngs.forEach(function(l) {
            rules[l] = {
                numbers: set.nr,
                plurals: _rulesPluralsTypes[set.fc]
            };
        });
    });
    return rules;
}
var PluralResolver = function() {
    function PluralResolver(languageUtils) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, PluralResolver);
        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create('pluralResolver');
        this.rules = createRules();
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(PluralResolver, [
        {
            key: "addRule",
            value: function addRule(lng, obj) {
                this.rules[lng] = obj;
            }
        },
        {
            key: "getRule",
            value: function getRule(code) {
                return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
            }
        },
        {
            key: "needsPlural",
            value: function needsPlural(code) {
                var rule = this.getRule(code);
                return rule && rule.numbers.length > 1;
            }
        },
        {
            key: "getPluralFormsOfKey",
            value: function getPluralFormsOfKey(code, key) {
                return this.getSuffixes(code).map(function(suffix) {
                    return key + suffix;
                });
            }
        },
        {
            key: "getSuffixes",
            value: function getSuffixes(code) {
                var _this = this;
                var rule = this.getRule(code);
                if (!rule) {
                    return [];
                }
                return rule.numbers.map(function(number) {
                    return _this.getSuffix(code, number);
                });
            }
        },
        {
            key: "getSuffix",
            value: function getSuffix(code, count) {
                var _this2 = this;
                var rule = this.getRule(code);
                if (rule) {
                    var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
                    var suffix = rule.numbers[idx];
                    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                        if (suffix === 2) {
                            suffix = 'plural';
                        } else if (suffix === 1) {
                            suffix = '';
                        }
                    }
                    var returnSuffix = function returnSuffix() {
                        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
                    };
                    if (this.options.compatibilityJSON === 'v1') {
                        if (suffix === 1) return '';
                        if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
                        return returnSuffix();
                    } else if (this.options.compatibilityJSON === 'v2') {
                        return returnSuffix();
                    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                        return returnSuffix();
                    }
                    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
                }
                this.logger.warn("no plural rule found for: ".concat(code));
                return '';
            }
        }
    ]);
    return PluralResolver;
}();
var Interpolator = function() {
    function Interpolator() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, Interpolator);
        this.logger = baseLogger.create('interpolator');
        this.options = options;
        this.format = options.interpolation && options.interpolation.format || function(value) {
            return value;
        };
        this.init(options);
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Interpolator, [
        {
            key: "init",
            value: function init() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                if (!options.interpolation) options.interpolation = {
                    escapeValue: true
                };
                var iOpts = options.interpolation;
                this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
                this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
                this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
                this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
                this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
                this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
                this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
                this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
                this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
                this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
                this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
                this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
                this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
                this.resetRegExp();
            }
        },
        {
            key: "reset",
            value: function reset() {
                if (this.options) this.init(this.options);
            }
        },
        {
            key: "resetRegExp",
            value: function resetRegExp() {
                var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
                this.regexp = new RegExp(regexpStr, 'g');
                var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
                this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
                var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
                this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
            }
        },
        {
            key: "interpolate",
            value: function interpolate(str, data, lng, options) {
                var _this = this;
                var match;
                var value;
                var replaces;
                var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
                function regexSafe(val) {
                    return val.replace(/\$/g, '$$$$');
                }
                var handleFormat = function handleFormat(key) {
                    if (key.indexOf(_this.formatSeparator) < 0) {
                        var path = getPathWithDefaults(data, defaultData, key);
                        return _this.alwaysFormat ? _this.format(path, undefined, lng) : path;
                    }
                    var p = key.split(_this.formatSeparator);
                    var k = p.shift().trim();
                    var f = p.join(_this.formatSeparator).trim();
                    return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, options);
                };
                this.resetRegExp();
                var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
                var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
                var todos = [
                    {
                        regex: this.regexpUnescape,
                        safeValue: function safeValue(val) {
                            return regexSafe(val);
                        }
                    },
                    {
                        regex: this.regexp,
                        safeValue: function safeValue(val) {
                            return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
                        }
                    }
                ];
                todos.forEach(function(todo) {
                    replaces = 0;
                    while(match = todo.regex.exec(str)){
                        value = handleFormat(match[1].trim());
                        if (value === undefined) {
                            if (typeof missingInterpolationHandler === 'function') {
                                var temp = missingInterpolationHandler(str, match, options);
                                value = typeof temp === 'string' ? temp : '';
                            } else if (skipOnVariables) {
                                value = match[0];
                                continue;
                            } else {
                                _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));
                                value = '';
                            }
                        } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
                            value = makeString(value);
                        }
                        str = str.replace(match[0], todo.safeValue(value));
                        todo.regex.lastIndex = 0;
                        replaces++;
                        if (replaces >= _this.maxReplaces) {
                            break;
                        }
                    }
                });
                return str;
            }
        },
        {
            key: "nest",
            value: function nest(str, fc) {
                var _this2 = this;
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var match;
                var value;
                var clonedOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, options);
                clonedOptions.applyPostProcessor = false;
                delete clonedOptions.defaultValue;
                function handleHasOptions(key, inheritedOptions) {
                    var sep = this.nestingOptionsSeparator;
                    if (key.indexOf(sep) < 0) return key;
                    var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
                    var optionsString = "{".concat(c[1]);
                    key = c[0];
                    optionsString = this.interpolate(optionsString, clonedOptions);
                    optionsString = optionsString.replace(/'/g, '"');
                    try {
                        clonedOptions = JSON.parse(optionsString);
                        if (inheritedOptions) clonedOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, inheritedOptions, clonedOptions);
                    } catch (e) {
                        this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
                        return "".concat(key).concat(sep).concat(optionsString);
                    }
                    delete clonedOptions.defaultValue;
                    return key;
                }
                while(match = this.nestingRegexp.exec(str)){
                    var formatters = [];
                    var doReduce = false;
                    if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {
                        var r = match[1].split(this.formatSeparator).map(function(elem) {
                            return elem.trim();
                        });
                        match[1] = r.shift();
                        formatters = r;
                        doReduce = true;
                    }
                    value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                    if (value && match[0] === str && typeof value !== 'string') return value;
                    if (typeof value !== 'string') value = makeString(value);
                    if (!value) {
                        this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                        value = '';
                    }
                    if (doReduce) {
                        value = formatters.reduce(function(v, f) {
                            return _this2.format(v, f, options.lng, options);
                        }, value.trim());
                    }
                    str = str.replace(match[0], value);
                    this.regexp.lastIndex = 0;
                }
                return str;
            }
        }
    ]);
    return Interpolator;
}();
function remove(arr, what) {
    var found = arr.indexOf(what);
    while(found !== -1){
        arr.splice(found, 1);
        found = arr.indexOf(what);
    }
}
var Connector = function(_EventEmitter) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$inherits$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Connector, _EventEmitter);
    function Connector(backend, store, services) {
        var _this;
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, Connector);
        _this = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$possibleConstructorReturn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$getPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Connector).call(this));
        if (isIE10) {
            EventEmitter.call((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this));
        }
        _this.backend = backend;
        _this.store = store;
        _this.services = services;
        _this.languageUtils = services.languageUtils;
        _this.options = options;
        _this.logger = baseLogger.create('backendConnector');
        _this.state = {};
        _this.queue = [];
        if (_this.backend && _this.backend.init) {
            _this.backend.init(services, options.backend, options);
        }
        return _this;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Connector, [
        {
            key: "queueLoad",
            value: function queueLoad(languages, namespaces, options, callback) {
                var _this2 = this;
                var toLoad = [];
                var pending = [];
                var toLoadLanguages = [];
                var toLoadNamespaces = [];
                languages.forEach(function(lng) {
                    var hasAllNamespaces = true;
                    namespaces.forEach(function(ns) {
                        var name = "".concat(lng, "|").concat(ns);
                        if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                            _this2.state[name] = 2;
                        } else if (_this2.state[name] < 0) ;
                        else if (_this2.state[name] === 1) {
                            if (pending.indexOf(name) < 0) pending.push(name);
                        } else {
                            _this2.state[name] = 1;
                            hasAllNamespaces = false;
                            if (pending.indexOf(name) < 0) pending.push(name);
                            if (toLoad.indexOf(name) < 0) toLoad.push(name);
                            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
                        }
                    });
                    if (!hasAllNamespaces) toLoadLanguages.push(lng);
                });
                if (toLoad.length || pending.length) {
                    this.queue.push({
                        pending: pending,
                        loaded: {},
                        errors: [],
                        callback: callback
                    });
                }
                return {
                    toLoad: toLoad,
                    pending: pending,
                    toLoadLanguages: toLoadLanguages,
                    toLoadNamespaces: toLoadNamespaces
                };
            }
        },
        {
            key: "loaded",
            value: function loaded(name, err, data) {
                var s = name.split('|');
                var lng = s[0];
                var ns = s[1];
                if (err) this.emit('failedLoading', lng, ns, err);
                if (data) {
                    this.store.addResourceBundle(lng, ns, data);
                }
                this.state[name] = err ? -1 : 2;
                var loaded = {};
                this.queue.forEach(function(q) {
                    pushPath(q.loaded, [
                        lng
                    ], ns);
                    remove(q.pending, name);
                    if (err) q.errors.push(err);
                    if (q.pending.length === 0 && !q.done) {
                        Object.keys(q.loaded).forEach(function(l) {
                            if (!loaded[l]) loaded[l] = [];
                            if (q.loaded[l].length) {
                                q.loaded[l].forEach(function(ns) {
                                    if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
                                });
                            }
                        });
                        q.done = true;
                        if (q.errors.length) {
                            q.callback(q.errors);
                        } else {
                            q.callback();
                        }
                    }
                });
                this.emit('loaded', loaded);
                this.queue = this.queue.filter(function(q) {
                    return !q.done;
                });
            }
        },
        {
            key: "read",
            value: function read(lng, ns, fcName) {
                var _this3 = this;
                var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
                var callback = arguments.length > 5 ? arguments[5] : undefined;
                if (!lng.length) return callback(null, {});
                return this.backend[fcName](lng, ns, function(err, data) {
                    if (err && data && tried < 5) {
                        setTimeout(function() {
                            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                        }, wait);
                        return;
                    }
                    callback(err, data);
                });
            }
        },
        {
            key: "prepareLoading",
            value: function prepareLoading(languages, namespaces) {
                var _this4 = this;
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var callback = arguments.length > 3 ? arguments[3] : undefined;
                if (!this.backend) {
                    this.logger.warn('No backend was added via i18next.use. Will not load resources.');
                    return callback && callback();
                }
                if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
                if (typeof namespaces === 'string') namespaces = [
                    namespaces
                ];
                var toLoad = this.queueLoad(languages, namespaces, options, callback);
                if (!toLoad.toLoad.length) {
                    if (!toLoad.pending.length) callback();
                    return null;
                }
                toLoad.toLoad.forEach(function(name) {
                    _this4.loadOne(name);
                });
            }
        },
        {
            key: "load",
            value: function load(languages, namespaces, callback) {
                this.prepareLoading(languages, namespaces, {}, callback);
            }
        },
        {
            key: "reload",
            value: function reload(languages, namespaces, callback) {
                this.prepareLoading(languages, namespaces, {
                    reload: true
                }, callback);
            }
        },
        {
            key: "loadOne",
            value: function loadOne(name) {
                var _this5 = this;
                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var s = name.split('|');
                var lng = s[0];
                var ns = s[1];
                this.read(lng, ns, 'read', undefined, undefined, function(err, data) {
                    if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
                    if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
                    _this5.loaded(name, err, data);
                });
            }
        },
        {
            key: "saveMissing",
            value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
                var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
                if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
                    this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                    return;
                }
                if (key === undefined || key === null || key === '') return;
                if (this.backend && this.backend.create) {
                    this.backend.create(languages, namespace, key, fallbackValue, null, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, options, {
                        isUpdate: isUpdate
                    }));
                }
                if (!languages || !languages[0]) return;
                this.store.addResource(languages[0], namespace, key, fallbackValue);
            }
        }
    ]);
    return Connector;
}(EventEmitter);
function get() {
    return {
        debug: false,
        initImmediate: true,
        ns: [
            'translation'
        ],
        defaultNS: [
            'translation'
        ],
        fallbackLng: [
            'dev'
        ],
        fallbackNS: false,
        whitelist: false,
        nonExplicitWhitelist: false,
        supportedLngs: false,
        nonExplicitSupportedLngs: false,
        load: 'all',
        preload: false,
        simplifyPluralSuffix: true,
        keySeparator: '.',
        nsSeparator: ':',
        pluralSeparator: '_',
        contextSeparator: '_',
        partialBundledLanguages: false,
        saveMissing: false,
        updateMissing: false,
        saveMissingTo: 'fallback',
        saveMissingPlurals: true,
        missingKeyHandler: false,
        missingInterpolationHandler: false,
        postProcess: false,
        postProcessPassResolved: false,
        returnNull: true,
        returnEmptyString: true,
        returnObjects: false,
        joinArrays: false,
        returnedObjectHandler: false,
        parseMissingKeyHandler: false,
        appendNamespaceToMissingKey: false,
        appendNamespaceToCIMode: false,
        overloadTranslationOptionHandler: function handle(args) {
            var ret = {};
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(args[1]) === 'object') ret = args[1];
            if (typeof args[1] === 'string') ret.defaultValue = args[1];
            if (typeof args[2] === 'string') ret.tDescription = args[2];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(args[2]) === 'object' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(args[3]) === 'object') {
                var options = args[3] || args[2];
                Object.keys(options).forEach(function(key) {
                    ret[key] = options[key];
                });
            }
            return ret;
        },
        interpolation: {
            escapeValue: true,
            format: function format(value, _format, lng, options) {
                return value;
            },
            prefix: '{{',
            suffix: '}}',
            formatSeparator: ',',
            unescapePrefix: '-',
            nestingPrefix: '$t(',
            nestingSuffix: ')',
            nestingOptionsSeparator: ',',
            maxReplaces: 1000,
            skipOnVariables: false
        }
    };
}
function transformOptions(options) {
    if (typeof options.ns === 'string') options.ns = [
        options.ns
    ];
    if (typeof options.fallbackLng === 'string') options.fallbackLng = [
        options.fallbackLng
    ];
    if (typeof options.fallbackNS === 'string') options.fallbackNS = [
        options.fallbackNS
    ];
    if (options.whitelist) {
        if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
            options.whitelist = options.whitelist.concat([
                'cimode'
            ]);
        }
        options.supportedLngs = options.whitelist;
    }
    if (options.nonExplicitWhitelist) {
        options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
    }
    if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
        options.supportedLngs = options.supportedLngs.concat([
            'cimode'
        ]);
    }
    return options;
}
function noop() {}
var I18n = function(_EventEmitter) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$inherits$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(I18n, _EventEmitter);
    function I18n() {
        var _this;
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : undefined;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, I18n);
        _this = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$possibleConstructorReturn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$getPrototypeOf$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(I18n).call(this));
        if (isIE10) {
            EventEmitter.call((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this));
        }
        _this.options = transformOptions(options);
        _this.services = {};
        _this.logger = baseLogger;
        _this.modules = {
            external: []
        };
        if (callback && !_this.isInitialized && !options.isClone) {
            if (!_this.options.initImmediate) {
                _this.init(options, callback);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$possibleConstructorReturn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$assertThisInitialized$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_this));
            }
            setTimeout(function() {
                _this.init(options, callback);
            }, 0);
        }
        return _this;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(I18n, [
        {
            key: "init",
            value: function init() {
                var _this2 = this;
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var callback = arguments.length > 1 ? arguments[1] : undefined;
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                }
                if (options.whitelist && !options.supportedLngs) {
                    this.logger.deprecate('whitelist', 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
                }
                if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {
                    this.logger.deprecate('whitelist', 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
                }
                this.options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, get(), this.options, transformOptions(options));
                this.format = this.options.interpolation.format;
                if (!callback) callback = noop;
                function createClassOnDemand(ClassOrObject) {
                    if (!ClassOrObject) return null;
                    if (typeof ClassOrObject === 'function') return new ClassOrObject();
                    return ClassOrObject;
                }
                if (!this.options.isClone) {
                    if (this.modules.logger) {
                        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
                    } else {
                        baseLogger.init(null, this.options);
                    }
                    var lu = new LanguageUtil(this.options);
                    this.store = new ResourceStore(this.options.resources, this.options);
                    var s = this.services;
                    s.logger = baseLogger;
                    s.resourceStore = this.store;
                    s.languageUtils = lu;
                    s.pluralResolver = new PluralResolver(lu, {
                        prepend: this.options.pluralSeparator,
                        compatibilityJSON: this.options.compatibilityJSON,
                        simplifyPluralSuffix: this.options.simplifyPluralSuffix
                    });
                    s.interpolator = new Interpolator(this.options);
                    s.utils = {
                        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                    };
                    s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                    s.backendConnector.on('*', function(event) {
                        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                            args[_key - 1] = arguments[_key];
                        }
                        _this2.emit.apply(_this2, [
                            event
                        ].concat(args));
                    });
                    if (this.modules.languageDetector) {
                        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                        s.languageDetector.init(s, this.options.detection, this.options);
                    }
                    if (this.modules.i18nFormat) {
                        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                        if (s.i18nFormat.init) s.i18nFormat.init(this);
                    }
                    this.translator = new Translator(this.services, this.options);
                    this.translator.on('*', function(event) {
                        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                            args[_key2 - 1] = arguments[_key2];
                        }
                        _this2.emit.apply(_this2, [
                            event
                        ].concat(args));
                    });
                    this.modules.external.forEach(function(m) {
                        if (m.init) m.init(_this2);
                    });
                }
                if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
                    var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                    if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
                }
                if (!this.services.languageDetector && !this.options.lng) {
                    this.logger.warn('init: no languageDetector is used and no lng is defined');
                }
                var storeApi = [
                    'getResource',
                    'hasResourceBundle',
                    'getResourceBundle',
                    'getDataByLanguage'
                ];
                storeApi.forEach(function(fcName) {
                    _this2[fcName] = function() {
                        var _this2$store;
                        return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
                    };
                });
                var storeApiChained = [
                    'addResource',
                    'addResources',
                    'addResourceBundle',
                    'removeResourceBundle'
                ];
                storeApiChained.forEach(function(fcName) {
                    _this2[fcName] = function() {
                        var _this2$store2;
                        (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
                        return _this2;
                    };
                });
                var deferred = defer();
                var load = function load() {
                    var finish = function finish(err, t) {
                        if (_this2.isInitialized) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
                        _this2.isInitialized = true;
                        if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);
                        _this2.emit('initialized', _this2.options);
                        deferred.resolve(t);
                        callback(err, t);
                    };
                    if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
                    _this2.changeLanguage(_this2.options.lng, finish);
                };
                if (this.options.resources || !this.options.initImmediate) {
                    load();
                } else {
                    setTimeout(load, 0);
                }
                return deferred;
            }
        },
        {
            key: "loadResources",
            value: function loadResources(language) {
                var _this3 = this;
                var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
                var usedCallback = callback;
                var usedLng = typeof language === 'string' ? language : this.language;
                if (typeof language === 'function') usedCallback = language;
                if (!this.options.resources || this.options.partialBundledLanguages) {
                    if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
                    var toLoad = [];
                    var append = function append(lng) {
                        if (!lng) return;
                        var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                        lngs.forEach(function(l) {
                            if (toLoad.indexOf(l) < 0) toLoad.push(l);
                        });
                    };
                    if (!usedLng) {
                        var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                        fallbacks.forEach(function(l) {
                            return append(l);
                        });
                    } else {
                        append(usedLng);
                    }
                    if (this.options.preload) {
                        this.options.preload.forEach(function(l) {
                            return append(l);
                        });
                    }
                    this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
                } else {
                    usedCallback(null);
                }
            }
        },
        {
            key: "reloadResources",
            value: function reloadResources(lngs, ns, callback) {
                var deferred = defer();
                if (!lngs) lngs = this.languages;
                if (!ns) ns = this.options.ns;
                if (!callback) callback = noop;
                this.services.backendConnector.reload(lngs, ns, function(err) {
                    deferred.resolve();
                    callback(err);
                });
                return deferred;
            }
        },
        {
            key: "use",
            value: function use(module) {
                if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
                if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
                if (module.type === 'backend') {
                    this.modules.backend = module;
                }
                if (module.type === 'logger' || module.log && module.warn && module.error) {
                    this.modules.logger = module;
                }
                if (module.type === 'languageDetector') {
                    this.modules.languageDetector = module;
                }
                if (module.type === 'i18nFormat') {
                    this.modules.i18nFormat = module;
                }
                if (module.type === 'postProcessor') {
                    postProcessor.addPostProcessor(module);
                }
                if (module.type === '3rdParty') {
                    this.modules.external.push(module);
                }
                return this;
            }
        },
        {
            key: "changeLanguage",
            value: function changeLanguage(lng, callback) {
                var _this4 = this;
                this.isLanguageChangingTo = lng;
                var deferred = defer();
                this.emit('languageChanging', lng);
                var done = function done(err, l) {
                    if (l) {
                        _this4.language = l;
                        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                        _this4.translator.changeLanguage(l);
                        _this4.isLanguageChangingTo = undefined;
                        _this4.emit('languageChanged', l);
                        _this4.logger.log('languageChanged', l);
                    } else {
                        _this4.isLanguageChangingTo = undefined;
                    }
                    deferred.resolve(function() {
                        return _this4.t.apply(_this4, arguments);
                    });
                    if (callback) callback(err, function() {
                        return _this4.t.apply(_this4, arguments);
                    });
                };
                var setLng = function setLng(lngs) {
                    var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
                    if (l) {
                        if (!_this4.language) {
                            _this4.language = l;
                            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                        }
                        if (!_this4.translator.language) _this4.translator.changeLanguage(l);
                        if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
                    }
                    _this4.loadResources(l, function(err) {
                        done(err, l);
                    });
                };
                if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
                    setLng(this.services.languageDetector.detect());
                } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
                    this.services.languageDetector.detect(setLng);
                } else {
                    setLng(lng);
                }
                return deferred;
            }
        },
        {
            key: "getFixedT",
            value: function getFixedT(lng, ns) {
                var _this5 = this;
                var fixedT = function fixedT(key, opts) {
                    var options;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$typeof$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(opts) !== 'object') {
                        for(var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++){
                            rest[_key3 - 2] = arguments[_key3];
                        }
                        options = _this5.options.overloadTranslationOptionHandler([
                            key,
                            opts
                        ].concat(rest));
                    } else {
                        options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, opts);
                    }
                    options.lng = options.lng || fixedT.lng;
                    options.lngs = options.lngs || fixedT.lngs;
                    options.ns = options.ns || fixedT.ns;
                    return _this5.t(key, options);
                };
                if (typeof lng === 'string') {
                    fixedT.lng = lng;
                } else {
                    fixedT.lngs = lng;
                }
                fixedT.ns = ns;
                return fixedT;
            }
        },
        {
            key: "t",
            value: function t() {
                var _this$translator;
                return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
            }
        },
        {
            key: "exists",
            value: function exists() {
                var _this$translator2;
                return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
            }
        },
        {
            key: "setDefaultNamespace",
            value: function setDefaultNamespace(ns) {
                this.options.defaultNS = ns;
            }
        },
        {
            key: "hasLoadedNamespace",
            value: function hasLoadedNamespace(ns) {
                var _this6 = this;
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                if (!this.isInitialized) {
                    this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
                    return false;
                }
                if (!this.languages || !this.languages.length) {
                    this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
                    return false;
                }
                var lng = this.languages[0];
                var fallbackLng = this.options ? this.options.fallbackLng : false;
                var lastLng = this.languages[this.languages.length - 1];
                if (lng.toLowerCase() === 'cimode') return true;
                var loadNotPending = function loadNotPending(l, n) {
                    var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
                    return loadState === -1 || loadState === 2;
                };
                if (options.precheck) {
                    var preResult = options.precheck(this, loadNotPending);
                    if (preResult !== undefined) return preResult;
                }
                if (this.hasResourceBundle(lng, ns)) return true;
                if (!this.services.backendConnector.backend) return true;
                if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
                return false;
            }
        },
        {
            key: "loadNamespaces",
            value: function loadNamespaces(ns, callback) {
                var _this7 = this;
                var deferred = defer();
                if (!this.options.ns) {
                    callback && callback();
                    return Promise.resolve();
                }
                if (typeof ns === 'string') ns = [
                    ns
                ];
                ns.forEach(function(n) {
                    if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
                });
                this.loadResources(function(err) {
                    deferred.resolve();
                    if (callback) callback(err);
                });
                return deferred;
            }
        },
        {
            key: "loadLanguages",
            value: function loadLanguages(lngs, callback) {
                var deferred = defer();
                if (typeof lngs === 'string') lngs = [
                    lngs
                ];
                var preloaded = this.options.preload || [];
                var newLngs = lngs.filter(function(lng) {
                    return preloaded.indexOf(lng) < 0;
                });
                if (!newLngs.length) {
                    if (callback) callback();
                    return Promise.resolve();
                }
                this.options.preload = preloaded.concat(newLngs);
                this.loadResources(function(err) {
                    deferred.resolve();
                    if (callback) callback(err);
                });
                return deferred;
            }
        },
        {
            key: "dir",
            value: function dir(lng) {
                if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
                if (!lng) return 'rtl';
                var rtlLngs = [
                    'ar',
                    'shu',
                    'sqr',
                    'ssh',
                    'xaa',
                    'yhd',
                    'yud',
                    'aao',
                    'abh',
                    'abv',
                    'acm',
                    'acq',
                    'acw',
                    'acx',
                    'acy',
                    'adf',
                    'ads',
                    'aeb',
                    'aec',
                    'afb',
                    'ajp',
                    'apc',
                    'apd',
                    'arb',
                    'arq',
                    'ars',
                    'ary',
                    'arz',
                    'auz',
                    'avl',
                    'ayh',
                    'ayl',
                    'ayn',
                    'ayp',
                    'bbz',
                    'pga',
                    'he',
                    'iw',
                    'ps',
                    'pbt',
                    'pbu',
                    'pst',
                    'prp',
                    'prd',
                    'ug',
                    'ur',
                    'ydd',
                    'yds',
                    'yih',
                    'ji',
                    'yi',
                    'hbo',
                    'men',
                    'xmn',
                    'fa',
                    'jpr',
                    'peo',
                    'pes',
                    'prs',
                    'dv',
                    'sam'
                ];
                return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
            }
        },
        {
            key: "createInstance",
            value: function createInstance() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var callback = arguments.length > 1 ? arguments[1] : undefined;
                return new I18n(options, callback);
            }
        },
        {
            key: "cloneInstance",
            value: function cloneInstance() {
                var _this8 = this;
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
                var mergedOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, this.options, options, {
                    isClone: true
                });
                var clone = new I18n(mergedOptions);
                var membersToCopy = [
                    'store',
                    'services',
                    'language'
                ];
                membersToCopy.forEach(function(m) {
                    clone[m] = _this8[m];
                });
                clone.services = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$objectSpread$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({}, this.services);
                clone.services.utils = {
                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
                };
                clone.translator = new Translator(clone.services, clone.options);
                clone.translator.on('*', function(event) {
                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){
                        args[_key4 - 1] = arguments[_key4];
                    }
                    clone.emit.apply(clone, [
                        event
                    ].concat(args));
                });
                clone.init(mergedOptions, callback);
                clone.translator.options = clone.options;
                clone.translator.backendConnector.services.utils = {
                    hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
                };
                return clone;
            }
        }
    ]);
    return I18n;
}(EventEmitter);
var i18next = new I18n();
const __TURBOPACK__default__export__ = i18next;
}}),
"[project]/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/classCallCheck.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@babel/runtime/helpers/esm/createClass.js [app-client] (ecmascript)");
;
;
var arr = [];
var each = arr.forEach;
var slice = arr.slice;
function defaults(obj) {
    each.call(slice.call(arguments, 1), function(source) {
        if (source) {
            for(var prop in source){
                if (obj[prop] === undefined) obj[prop] = source[prop];
            }
        }
    });
    return obj;
}
var cookie = {
    create: function create(name, value, minutes, domain) {
        var cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
            path: '/'
        };
        var expires;
        if (minutes) {
            var date = new Date();
            date.setTime(date.getTime() + minutes * 60 * 1000);
            expires = '; expires=' + date.toUTCString();
        } else expires = '';
        domain = domain ? 'domain=' + domain + ';' : '';
        cookieOptions = Object.keys(cookieOptions).reduce(function(acc, key) {
            return acc + ';' + key.replace(/([A-Z])/g, function($1) {
                return '-' + $1.toLowerCase();
            }) + '=' + cookieOptions[key];
        }, '');
        document.cookie = name + '=' + encodeURIComponent(value) + expires + ';' + domain + cookieOptions;
    },
    read: function read(name) {
        var nameEQ = name + '=';
        var ca = document.cookie.split(';');
        for(var i = 0; i < ca.length; i++){
            var c = ca[i];
            while(c.charAt(0) === ' '){
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    },
    remove: function remove(name) {
        this.create(name, '', -1);
    }
};
var cookie$1 = {
    name: 'cookie',
    lookup: function lookup(options) {
        var found;
        if (options.lookupCookie && typeof document !== 'undefined') {
            var c = cookie.read(options.lookupCookie);
            if (c) found = c;
        }
        return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
        if (options.lookupCookie && typeof document !== 'undefined') {
            cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);
        }
    }
};
var querystring = {
    name: 'querystring',
    lookup: function lookup(options) {
        var found;
        if (typeof window !== 'undefined') {
            var query = window.location.search.substring(1);
            var params = query.split('&');
            for(var i = 0; i < params.length; i++){
                var pos = params[i].indexOf('=');
                if (pos > 0) {
                    var key = params[i].substring(0, pos);
                    if (key === options.lookupQuerystring) {
                        found = params[i].substring(pos + 1);
                    }
                }
            }
        }
        return found;
    }
};
var hasLocalStorageSupport;
try {
    hasLocalStorageSupport = window !== 'undefined' && window.localStorage !== null;
    var testKey = 'i18next.translate.boo';
    window.localStorage.setItem(testKey, 'foo');
    window.localStorage.removeItem(testKey);
} catch (e) {
    hasLocalStorageSupport = false;
}
var localStorage = {
    name: 'localStorage',
    lookup: function lookup(options) {
        var found;
        if (options.lookupLocalStorage && hasLocalStorageSupport) {
            var lng = window.localStorage.getItem(options.lookupLocalStorage);
            if (lng) found = lng;
        }
        return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
        if (options.lookupLocalStorage && hasLocalStorageSupport) {
            window.localStorage.setItem(options.lookupLocalStorage, lng);
        }
    }
};
var hasSessionStorageSupport;
try {
    hasSessionStorageSupport = window !== 'undefined' && window.sessionStorage !== null;
    var testKey$1 = 'i18next.translate.boo';
    window.sessionStorage.setItem(testKey$1, 'foo');
    window.sessionStorage.removeItem(testKey$1);
} catch (e) {
    hasSessionStorageSupport = false;
}
var sessionStorage = {
    name: 'sessionStorage',
    lookup: function lookup(options) {
        var found;
        if (options.lookupsessionStorage && hasSessionStorageSupport) {
            var lng = window.sessionStorage.getItem(options.lookupsessionStorage);
            if (lng) found = lng;
        }
        return found;
    },
    cacheUserLanguage: function cacheUserLanguage(lng, options) {
        if (options.lookupsessionStorage && hasSessionStorageSupport) {
            window.sessionStorage.setItem(options.lookupsessionStorage, lng);
        }
    }
};
var navigator$1 = {
    name: 'navigator',
    lookup: function lookup(options) {
        var found = [];
        if (typeof navigator !== 'undefined') {
            if (navigator.languages) {
                // chrome only; not an array, so can't use .push.apply instead of iterating
                for(var i = 0; i < navigator.languages.length; i++){
                    found.push(navigator.languages[i]);
                }
            }
            if (navigator.userLanguage) {
                found.push(navigator.userLanguage);
            }
            if (navigator.language) {
                found.push(navigator.language);
            }
        }
        return found.length > 0 ? found : undefined;
    }
};
var htmlTag = {
    name: 'htmlTag',
    lookup: function lookup(options) {
        var found;
        var htmlTag = options.htmlTag || (typeof document !== 'undefined' ? document.documentElement : null);
        if (htmlTag && typeof htmlTag.getAttribute === 'function') {
            found = htmlTag.getAttribute('lang');
        }
        return found;
    }
};
var path = {
    name: 'path',
    lookup: function lookup(options) {
        var found;
        if (typeof window !== 'undefined') {
            var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
            if (language instanceof Array) {
                if (typeof options.lookupFromPathIndex === 'number') {
                    if (typeof language[options.lookupFromPathIndex] !== 'string') {
                        return undefined;
                    }
                    found = language[options.lookupFromPathIndex].replace('/', '');
                } else {
                    found = language[0].replace('/', '');
                }
            }
        }
        return found;
    }
};
var subdomain = {
    name: 'subdomain',
    lookup: function lookup(options) {
        var found;
        if (typeof window !== 'undefined') {
            var language = window.location.href.match(/(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi);
            if (language instanceof Array) {
                if (typeof options.lookupFromSubdomainIndex === 'number') {
                    found = language[options.lookupFromSubdomainIndex].replace('http://', '').replace('https://', '').replace('.', '');
                } else {
                    found = language[0].replace('http://', '').replace('https://', '').replace('.', '');
                }
            }
        }
        return found;
    }
};
function getDefaults() {
    return {
        order: [
            'querystring',
            'cookie',
            'localStorage',
            'sessionStorage',
            'navigator',
            'htmlTag'
        ],
        lookupQuerystring: 'lng',
        lookupCookie: 'i18next',
        lookupLocalStorage: 'i18nextLng',
        // cache user language
        caches: [
            'localStorage'
        ],
        excludeCacheFor: [
            'cimode'
        ],
        //cookieMinutes: 10,
        //cookieDomain: 'myDomain'
        checkWhitelist: true,
        checkForSimilarInWhitelist: false
    };
}
var Browser = /*#__PURE__*/ function() {
    function Browser(services) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$classCallCheck$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this, Browser);
        this.type = 'languageDetector';
        this.detectors = {};
        this.init(services, options);
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$babel$2f$runtime$2f$helpers$2f$esm$2f$createClass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(Browser, [
        {
            key: "init",
            value: function init(services) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.services = services;
                this.options = defaults(options, this.options || {}, getDefaults()); // if checking for similar, user needs to check whitelist
                if (this.options.checkForSimilarInWhitelist) this.options.checkWhitelist = true; // backwards compatibility
                if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
                this.i18nOptions = i18nOptions;
                this.addDetector(cookie$1);
                this.addDetector(querystring);
                this.addDetector(localStorage);
                this.addDetector(sessionStorage);
                this.addDetector(navigator$1);
                this.addDetector(htmlTag);
                this.addDetector(path);
                this.addDetector(subdomain);
            }
        },
        {
            key: "addDetector",
            value: function addDetector(detector) {
                this.detectors[detector.name] = detector;
            }
        },
        {
            key: "detect",
            value: function detect(detectionOrder) {
                var _this = this;
                if (!detectionOrder) detectionOrder = this.options.order;
                var detected = [];
                detectionOrder.forEach(function(detectorName) {
                    if (_this.detectors[detectorName]) {
                        var lookup = _this.detectors[detectorName].lookup(_this.options);
                        if (lookup && typeof lookup === 'string') lookup = [
                            lookup
                        ];
                        if (lookup) detected = detected.concat(lookup);
                    }
                });
                var found;
                detected.forEach(function(lng) {
                    if (found) return;
                    var cleanedLng = _this.services.languageUtils.formatLanguageCode(lng);
                    if (!_this.options.checkWhitelist || _this.services.languageUtils.isWhitelisted(cleanedLng)) found = cleanedLng;
                    if (!found && _this.options.checkForSimilarInWhitelist) {
                        found = _this.getSimilarInWhitelist(cleanedLng);
                    }
                });
                if (!found) {
                    var fallbacks = this.i18nOptions.fallbackLng;
                    if (typeof fallbacks === 'string') fallbacks = [
                        fallbacks
                    ];
                    if (!fallbacks) fallbacks = [];
                    if (Object.prototype.toString.apply(fallbacks) === '[object Array]') {
                        found = fallbacks[0];
                    } else {
                        found = fallbacks[0] || fallbacks["default"] && fallbacks["default"][0];
                    }
                }
                return found;
            }
        },
        {
            key: "cacheUserLanguage",
            value: function cacheUserLanguage(lng, caches) {
                var _this2 = this;
                if (!caches) caches = this.options.caches;
                if (!caches) return;
                if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
                caches.forEach(function(cacheName) {
                    if (_this2.detectors[cacheName]) _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
                });
            }
        },
        {
            key: "getSimilarInWhitelist",
            value: function getSimilarInWhitelist(cleanedLng) {
                var _this3 = this;
                if (!this.i18nOptions.whitelist) return;
                if (cleanedLng.includes('-')) {
                    // i.e. es-MX should check if es is in whitelist
                    var prefix = cleanedLng.split('-')[0];
                    var cleanedPrefix = this.services.languageUtils.formatLanguageCode(prefix);
                    if (this.services.languageUtils.isWhitelisted(cleanedPrefix)) return cleanedPrefix; // if reached here, nothing found. continue to search for similar using only prefix
                    cleanedLng = cleanedPrefix;
                } // i.e. 'pt' should return 'pt-BR'. If multiple in whitelist with 'pt-', then use first one in whitelist
                var similar = this.i18nOptions.whitelist.find(function(whitelistLng) {
                    var cleanedWhitelistLng = _this3.services.languageUtils.formatLanguageCode(whitelistLng);
                    if (cleanedWhitelistLng.startsWith(cleanedLng)) return cleanedWhitelistLng;
                });
                if (similar) return similar;
            }
        }
    ]);
    return Browser;
}();
Browser.type = 'languageDetector';
const __TURBOPACK__default__export__ = Browser;
}}),
"[project]/node_modules/acorn-walk/dist/walk.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// AST walker module for ESTree compatible trees
// A simple walk is one where you simply specify callbacks to be
// called on specific nodes. The last two arguments are optional. A
// simple use would be
//
//     walk.simple(myTree, {
//         Expression: function(node) { ... }
//     });
//
// to do something with all expressions. All ESTree node types
// can be used to identify node types, as well as Expression and
// Statement, which denote categories of nodes.
//
// The base argument can be used to pass a custom (recursive)
// walker, and state can be used to give this walked an initial
// state.
__turbopack_context__.s({
    "ancestor": (()=>ancestor),
    "base": (()=>base),
    "findNodeAfter": (()=>findNodeAfter),
    "findNodeAround": (()=>findNodeAround),
    "findNodeAt": (()=>findNodeAt),
    "findNodeBefore": (()=>findNodeBefore),
    "full": (()=>full),
    "fullAncestor": (()=>fullAncestor),
    "make": (()=>make),
    "recursive": (()=>recursive),
    "simple": (()=>simple)
});
function simple(node, visitors, baseVisitor, state, override) {
    if (!baseVisitor) {
        baseVisitor = base;
    }
    (function c(node, st, override) {
        var type = override || node.type;
        baseVisitor[type](node, st, c);
        if (visitors[type]) {
            visitors[type](node, st);
        }
    })(node, state, override);
}
// An ancestor walk keeps an array of ancestor nodes (including the
// current node) and passes them to the callback as third parameter
// (and also as state parameter when no other state is present).
function ancestor(node, visitors, baseVisitor, state, override) {
    var ancestors = [];
    if (!baseVisitor) {
        baseVisitor = base;
    }
    (function c(node, st, override) {
        var type = override || node.type;
        var isNew = node !== ancestors[ancestors.length - 1];
        if (isNew) {
            ancestors.push(node);
        }
        baseVisitor[type](node, st, c);
        if (visitors[type]) {
            visitors[type](node, st || ancestors, ancestors);
        }
        if (isNew) {
            ancestors.pop();
        }
    })(node, state, override);
}
// A recursive walk is one where your functions override the default
// walkers. They can modify and replace the state parameter that's
// threaded through the walk, and can opt how and whether to walk
// their child nodes (by calling their third argument on these
// nodes).
function recursive(node, state, funcs, baseVisitor, override) {
    var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor;
    (function c(node, st, override) {
        visitor[override || node.type](node, st, c);
    })(node, state, override);
}
function makeTest(test) {
    if (typeof test === "string") {
        return function(type) {
            return type === test;
        };
    } else if (!test) {
        return function() {
            return true;
        };
    } else {
        return test;
    }
}
var Found = function Found(node, state) {
    this.node = node;
    this.state = state;
};
// A full walk triggers the callback on each node
function full(node, callback, baseVisitor, state, override) {
    if (!baseVisitor) {
        baseVisitor = base;
    }
    var last;
    (function c(node, st, override) {
        var type = override || node.type;
        baseVisitor[type](node, st, c);
        if (last !== node) {
            callback(node, st, type);
            last = node;
        }
    })(node, state, override);
}
// An fullAncestor walk is like an ancestor walk, but triggers
// the callback on each node
function fullAncestor(node, callback, baseVisitor, state) {
    if (!baseVisitor) {
        baseVisitor = base;
    }
    var ancestors = [], last;
    (function c(node, st, override) {
        var type = override || node.type;
        var isNew = node !== ancestors[ancestors.length - 1];
        if (isNew) {
            ancestors.push(node);
        }
        baseVisitor[type](node, st, c);
        if (last !== node) {
            callback(node, st || ancestors, ancestors, type);
            last = node;
        }
        if (isNew) {
            ancestors.pop();
        }
    })(node, state);
}
// Find a node with a given start, end, and type (all are optional,
// null can be used as wildcard). Returns a {node, state} object, or
// undefined when it doesn't find a matching node.
function findNodeAt(node, start, end, test, baseVisitor, state) {
    if (!baseVisitor) {
        baseVisitor = base;
    }
    test = makeTest(test);
    try {
        (function c(node, st, override) {
            var type = override || node.type;
            if ((start == null || node.start <= start) && (end == null || node.end >= end)) {
                baseVisitor[type](node, st, c);
            }
            if ((start == null || node.start === start) && (end == null || node.end === end) && test(type, node)) {
                throw new Found(node, st);
            }
        })(node, state);
    } catch (e) {
        if (e instanceof Found) {
            return e;
        }
        throw e;
    }
}
// Find the innermost node of a given type that contains the given
// position. Interface similar to findNodeAt.
function findNodeAround(node, pos, test, baseVisitor, state) {
    test = makeTest(test);
    if (!baseVisitor) {
        baseVisitor = base;
    }
    try {
        (function c(node, st, override) {
            var type = override || node.type;
            if (node.start > pos || node.end < pos) {
                return;
            }
            baseVisitor[type](node, st, c);
            if (test(type, node)) {
                throw new Found(node, st);
            }
        })(node, state);
    } catch (e) {
        if (e instanceof Found) {
            return e;
        }
        throw e;
    }
}
// Find the outermost matching node after a given position.
function findNodeAfter(node, pos, test, baseVisitor, state) {
    test = makeTest(test);
    if (!baseVisitor) {
        baseVisitor = base;
    }
    try {
        (function c(node, st, override) {
            if (node.end < pos) {
                return;
            }
            var type = override || node.type;
            if (node.start >= pos && test(type, node)) {
                throw new Found(node, st);
            }
            baseVisitor[type](node, st, c);
        })(node, state);
    } catch (e) {
        if (e instanceof Found) {
            return e;
        }
        throw e;
    }
}
// Find the outermost matching node before a given position.
function findNodeBefore(node, pos, test, baseVisitor, state) {
    test = makeTest(test);
    if (!baseVisitor) {
        baseVisitor = base;
    }
    var max;
    (function c(node, st, override) {
        if (node.start > pos) {
            return;
        }
        var type = override || node.type;
        if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) {
            max = new Found(node, st);
        }
        baseVisitor[type](node, st, c);
    })(node, state);
    return max;
}
// Used to create a custom walker. Will fill in all missing node
// type properties with the defaults.
function make(funcs, baseVisitor) {
    var visitor = Object.create(baseVisitor || base);
    for(var type in funcs){
        visitor[type] = funcs[type];
    }
    return visitor;
}
function skipThrough(node, st, c) {
    c(node, st);
}
function ignore(_node, _st, _c) {}
// Node walkers.
var base = {};
base.Program = base.BlockStatement = base.StaticBlock = function(node, st, c) {
    for(var i = 0, list = node.body; i < list.length; i += 1){
        var stmt = list[i];
        c(stmt, st, "Statement");
    }
};
base.Statement = skipThrough;
base.EmptyStatement = ignore;
base.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression = function(node, st, c) {
    return c(node.expression, st, "Expression");
};
base.IfStatement = function(node, st, c) {
    c(node.test, st, "Expression");
    c(node.consequent, st, "Statement");
    if (node.alternate) {
        c(node.alternate, st, "Statement");
    }
};
base.LabeledStatement = function(node, st, c) {
    return c(node.body, st, "Statement");
};
base.BreakStatement = base.ContinueStatement = ignore;
base.WithStatement = function(node, st, c) {
    c(node.object, st, "Expression");
    c(node.body, st, "Statement");
};
base.SwitchStatement = function(node, st, c) {
    c(node.discriminant, st, "Expression");
    for(var i = 0, list = node.cases; i < list.length; i += 1){
        var cs = list[i];
        c(cs, st);
    }
};
base.SwitchCase = function(node, st, c) {
    if (node.test) {
        c(node.test, st, "Expression");
    }
    for(var i = 0, list = node.consequent; i < list.length; i += 1){
        var cons = list[i];
        c(cons, st, "Statement");
    }
};
base.ReturnStatement = base.YieldExpression = base.AwaitExpression = function(node, st, c) {
    if (node.argument) {
        c(node.argument, st, "Expression");
    }
};
base.ThrowStatement = base.SpreadElement = function(node, st, c) {
    return c(node.argument, st, "Expression");
};
base.TryStatement = function(node, st, c) {
    c(node.block, st, "Statement");
    if (node.handler) {
        c(node.handler, st);
    }
    if (node.finalizer) {
        c(node.finalizer, st, "Statement");
    }
};
base.CatchClause = function(node, st, c) {
    if (node.param) {
        c(node.param, st, "Pattern");
    }
    c(node.body, st, "Statement");
};
base.WhileStatement = base.DoWhileStatement = function(node, st, c) {
    c(node.test, st, "Expression");
    c(node.body, st, "Statement");
};
base.ForStatement = function(node, st, c) {
    if (node.init) {
        c(node.init, st, "ForInit");
    }
    if (node.test) {
        c(node.test, st, "Expression");
    }
    if (node.update) {
        c(node.update, st, "Expression");
    }
    c(node.body, st, "Statement");
};
base.ForInStatement = base.ForOfStatement = function(node, st, c) {
    c(node.left, st, "ForInit");
    c(node.right, st, "Expression");
    c(node.body, st, "Statement");
};
base.ForInit = function(node, st, c) {
    if (node.type === "VariableDeclaration") {
        c(node, st);
    } else {
        c(node, st, "Expression");
    }
};
base.DebuggerStatement = ignore;
base.FunctionDeclaration = function(node, st, c) {
    return c(node, st, "Function");
};
base.VariableDeclaration = function(node, st, c) {
    for(var i = 0, list = node.declarations; i < list.length; i += 1){
        var decl = list[i];
        c(decl, st);
    }
};
base.VariableDeclarator = function(node, st, c) {
    c(node.id, st, "Pattern");
    if (node.init) {
        c(node.init, st, "Expression");
    }
};
base.Function = function(node, st, c) {
    if (node.id) {
        c(node.id, st, "Pattern");
    }
    for(var i = 0, list = node.params; i < list.length; i += 1){
        var param = list[i];
        c(param, st, "Pattern");
    }
    c(node.body, st, node.expression ? "Expression" : "Statement");
};
base.Pattern = function(node, st, c) {
    if (node.type === "Identifier") {
        c(node, st, "VariablePattern");
    } else if (node.type === "MemberExpression") {
        c(node, st, "MemberPattern");
    } else {
        c(node, st);
    }
};
base.VariablePattern = ignore;
base.MemberPattern = skipThrough;
base.RestElement = function(node, st, c) {
    return c(node.argument, st, "Pattern");
};
base.ArrayPattern = function(node, st, c) {
    for(var i = 0, list = node.elements; i < list.length; i += 1){
        var elt = list[i];
        if (elt) {
            c(elt, st, "Pattern");
        }
    }
};
base.ObjectPattern = function(node, st, c) {
    for(var i = 0, list = node.properties; i < list.length; i += 1){
        var prop = list[i];
        if (prop.type === "Property") {
            if (prop.computed) {
                c(prop.key, st, "Expression");
            }
            c(prop.value, st, "Pattern");
        } else if (prop.type === "RestElement") {
            c(prop.argument, st, "Pattern");
        }
    }
};
base.Expression = skipThrough;
base.ThisExpression = base.Super = base.MetaProperty = ignore;
base.ArrayExpression = function(node, st, c) {
    for(var i = 0, list = node.elements; i < list.length; i += 1){
        var elt = list[i];
        if (elt) {
            c(elt, st, "Expression");
        }
    }
};
base.ObjectExpression = function(node, st, c) {
    for(var i = 0, list = node.properties; i < list.length; i += 1){
        var prop = list[i];
        c(prop, st);
    }
};
base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;
base.SequenceExpression = function(node, st, c) {
    for(var i = 0, list = node.expressions; i < list.length; i += 1){
        var expr = list[i];
        c(expr, st, "Expression");
    }
};
base.TemplateLiteral = function(node, st, c) {
    for(var i = 0, list = node.quasis; i < list.length; i += 1){
        var quasi = list[i];
        c(quasi, st);
    }
    for(var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1){
        var expr = list$1[i$1];
        c(expr, st, "Expression");
    }
};
base.TemplateElement = ignore;
base.UnaryExpression = base.UpdateExpression = function(node, st, c) {
    c(node.argument, st, "Expression");
};
base.BinaryExpression = base.LogicalExpression = function(node, st, c) {
    c(node.left, st, "Expression");
    c(node.right, st, "Expression");
};
base.AssignmentExpression = base.AssignmentPattern = function(node, st, c) {
    c(node.left, st, "Pattern");
    c(node.right, st, "Expression");
};
base.ConditionalExpression = function(node, st, c) {
    c(node.test, st, "Expression");
    c(node.consequent, st, "Expression");
    c(node.alternate, st, "Expression");
};
base.NewExpression = base.CallExpression = function(node, st, c) {
    c(node.callee, st, "Expression");
    if (node.arguments) {
        for(var i = 0, list = node.arguments; i < list.length; i += 1){
            var arg = list[i];
            c(arg, st, "Expression");
        }
    }
};
base.MemberExpression = function(node, st, c) {
    c(node.object, st, "Expression");
    if (node.computed) {
        c(node.property, st, "Expression");
    }
};
base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function(node, st, c) {
    if (node.declaration) {
        c(node.declaration, st, node.type === "ExportNamedDeclaration" || node.declaration.id ? "Statement" : "Expression");
    }
    if (node.source) {
        c(node.source, st, "Expression");
    }
};
base.ExportAllDeclaration = function(node, st, c) {
    if (node.exported) {
        c(node.exported, st);
    }
    c(node.source, st, "Expression");
};
base.ImportDeclaration = function(node, st, c) {
    for(var i = 0, list = node.specifiers; i < list.length; i += 1){
        var spec = list[i];
        c(spec, st);
    }
    c(node.source, st, "Expression");
};
base.ImportExpression = function(node, st, c) {
    c(node.source, st, "Expression");
};
base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.PrivateIdentifier = base.Literal = ignore;
base.TaggedTemplateExpression = function(node, st, c) {
    c(node.tag, st, "Expression");
    c(node.quasi, st, "Expression");
};
base.ClassDeclaration = base.ClassExpression = function(node, st, c) {
    return c(node, st, "Class");
};
base.Class = function(node, st, c) {
    if (node.id) {
        c(node.id, st, "Pattern");
    }
    if (node.superClass) {
        c(node.superClass, st, "Expression");
    }
    c(node.body, st);
};
base.ClassBody = function(node, st, c) {
    for(var i = 0, list = node.body; i < list.length; i += 1){
        var elt = list[i];
        c(elt, st);
    }
};
base.MethodDefinition = base.PropertyDefinition = base.Property = function(node, st, c) {
    if (node.computed) {
        c(node.key, st, "Expression");
    }
    if (node.value) {
        c(node.value, st, "Expression");
    }
};
;
}}),
"[project]/node_modules/@japont/unicode-range/lib/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var UnicodeRange = function() {
    function UnicodeRange() {}
    UnicodeRange.parse = function(arr) {
        var result = new Set();
        for(var _i = 0, arr_1 = arr; _i < arr_1.length; _i++){
            var range = arr_1[_i];
            if (!UnicodeRange.REGEXP.test(range)) {
                throw new TypeError("\"" + range + "\" is invalid unicode-range.");
            }
            var _a = range.match(UnicodeRange.REGEXP), single = _a[1], start = _a[2], end = _a[3];
            // Single unicode-range (e.g. U+20, U+3F U+30??)
            if (single) {
                if (/\?[^?]+$/.test(single)) {
                    throw new TypeError("\"" + range + "\" is invalid unicode-range.");
                }
                if (single.includes('?')) {
                    var start_1 = single.replace(/\?/g, '0');
                    var end_1 = single.replace(/\?/g, 'F');
                    var tmp = UnicodeRange.parse([
                        "U+" + start_1 + "-" + end_1
                    ]);
                    for(var _b = 0, tmp_1 = tmp; _b < tmp_1.length; _b++){
                        var codePoint = tmp_1[_b];
                        result.add(codePoint);
                    }
                } else {
                    result.add(parseInt(single, 16));
                }
            }
            // Interval unicode-range (e.g. U+30-39)
            if (start && end) {
                var startCodePoint = parseInt(start, 16);
                var endCodePoint = parseInt(end, 16);
                for(var codePoint = startCodePoint; codePoint <= endCodePoint; codePoint++){
                    result.add(codePoint);
                }
            }
        }
        return Array.from(result).sort(function(a, b) {
            return a - b;
        });
    };
    UnicodeRange.stringify = function(arr) {
        var sorted = Array.from(new Set(arr)).sort(function(a, b) {
            return a - b;
        });
        var results = [];
        var rangeStart;
        for(var idx = 0; idx < sorted.length; idx++){
            var current = sorted[idx];
            var prev = sorted[idx - 1];
            if (rangeStart && current - prev !== 1) {
                results.push(UnicodeRange.rangeString(rangeStart, prev));
                rangeStart = current;
            }
            // First
            if (!rangeStart) {
                rangeStart = current;
            }
            // Last
            if (idx === sorted.length - 1) {
                if (rangeStart === current) {
                    results.push(UnicodeRange.rangeString(current));
                } else {
                    results.push(UnicodeRange.rangeString(rangeStart, current));
                }
            }
        }
        return results;
    };
    UnicodeRange.rangeString = function(start, end) {
        if (!end || start === end) {
            return "U+" + start.toString(16);
        }
        return "U+" + start.toString(16) + "-" + end.toString(16);
    };
    UnicodeRange.REGEXP = /^u\+(?:([0-9a-f]?[0-9a-f?]{1,5})|([0-9a-f]{1,6})-([0-9a-f]{1,6}))?$/i;
    return UnicodeRange;
}();
exports.UnicodeRange = UnicodeRange;
}}),
"[project]/node_modules/@davepagurek/bezier-path/build/bezier-path.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
!function(t, e) {
    ("TURBOPACK compile-time truthy", 1) ? module.exports = e() : ("TURBOPACK unreachable", undefined);
}(self, ()=>(()=>{
        "use strict";
        var t = {
            177: (t, e, s)=>{
                Object.defineProperty(e, "__esModule", {
                    value: !0
                }), e.BezierPath = void 0;
                const i = s(558), h = s(188);
                e.BezierPath = class {
                    constructor(t){
                        this.samples = [], this.segments = t;
                        const e = t.map((t)=>t.getTotalLength()), s = [
                            0
                        ];
                        for(let t = 1; t < e.length; t++)s.push(s[t - 1] + e[t - 1]);
                        this._totalLength = s[s.length - 1] + e[e.length - 1];
                        const a = t.map((t)=>Math.max(4, Math.ceil(t.getTotalLength() / i.BezierSegment.sampleSpacing()))), n = a.reduce((t, e)=>t + e), r = 1 / n / 10, o = this._totalLength / n;
                        this.samples.push({
                            dist: 0,
                            pt: this.segments[0].A,
                            tan: this.segments[0].tangentAtParameter(0),
                            segIdx: 0,
                            t: 0
                        }), t.forEach((t, e)=>{
                            const i = a[e], n = (0, h.times)(i + 1).map((t)=>t / i), x = n.map((e)=>t.pointAtParameter(e));
                            let y;
                            for(let e = 0; e < 4; e++){
                                y = (0, h.times)(i).map((t)=>Math.hypot(x[t + 1].x - x[t].x, x[t + 1].y - x[t].y));
                                const e = y.map((t)=>t - o);
                                let s = 0;
                                for(let i = 1; i < n.length - 1; i++)s += e[i - 1], n[i] -= r * s, x[i] = t.pointAtParameter(n[i]);
                            }
                            let p = 0;
                            x.slice(1).forEach((t, i)=>{
                                p += y[i], this.samples.push({
                                    dist: s[e] + p,
                                    pt: t,
                                    tan: this.segments[e].tangentAtParameter(n[i + 1]),
                                    segIdx: e,
                                    t: n[i + 1]
                                });
                            });
                        }), this._jumps = [], this.segmentStartEnds = [
                            {
                                start: 0,
                                end: 0
                            }
                        ];
                        for(let t = 1; t < this.samples.length; t++){
                            const e = this.samples[t - 1], s = this.samples[t];
                            if (s.segIdx === e.segIdx ? this.segmentStartEnds[this.segmentStartEnds.length - 1].end = s.dist : this.segmentStartEnds[s.segIdx] = {
                                start: s.dist,
                                end: s.dist
                            }, e.segIdx !== s.segIdx && (this.segments[e.segIdx].D.x !== this.segments[s.segIdx].A.x || this.segments[e.segIdx].D.y !== this.segments[s.segIdx].A.y)) {
                                const i = (e.dist + s.dist) / 2, h = {
                                    dist: i - 1e-8,
                                    pt: this.segments[e.segIdx].D,
                                    tan: this.segments[e.segIdx].tangentAtParameter(1),
                                    segIdx: e.segIdx,
                                    t: 1
                                }, a = {
                                    dist: i + 1e-8,
                                    pt: this.segments[s.segIdx].A,
                                    tan: this.segments[s.segIdx].tangentAtParameter(0),
                                    segIdx: s.segIdx,
                                    t: 0
                                };
                                this._jumps.push(i), this.samples.splice(t, 0, h, a), t += 2;
                            }
                        }
                    }
                    jumps() {
                        return [
                            ...this._jumps
                        ];
                    }
                    getTotalLength() {
                        return this._totalLength;
                    }
                    findClosestSampleIdx(t) {
                        let e = 0, s = this.samples.length - 1;
                        for(; e < s;){
                            const i = Math.floor((e + s) / 2);
                            if (this.samples[i].dist > t) s = i - 1;
                            else {
                                if (!(this.samples[i].dist < t)) return i;
                                e = i + 1;
                            }
                        }
                        return Math.max(0, Math.min(this.samples.length - 1, Math.floor((e + s) / 2)));
                    }
                    getPointAtLength(t, e = !1) {
                        if (t <= 0) return this.samples[0].pt;
                        if (t >= this._totalLength) return this.samples[this.samples.length - 1].pt;
                        const s = this.findClosestSampleIdx(t), i = this.samples[s].dist < t ? Math.min(s + 1, this.samples.length - 1) : Math.max(0, s - 1), h = Math.abs(this.samples[i].dist - this.samples[s].dist) < 1e-6 ? 0 : (t - this.samples[s].dist) / (this.samples[i].dist - this.samples[s].dist);
                        if (e || this.samples[s].segIdx > this.samples[i].segIdx) return {
                            x: (1 - h) * this.samples[s].pt.x + h * this.samples[i].pt.x,
                            y: (1 - h) * this.samples[s].pt.y + h * this.samples[i].pt.y
                        };
                        if (this.samples[s].segIdx !== this.samples[i].segIdx) {
                            if (h < .5) {
                                const t = this.segments[this.samples[s].segIdx], e = 2 * h, i = (1 - e) * this.samples[s].t + e;
                                return t.pointAtParameter(i);
                            }
                            {
                                const t = this.segments[this.samples[i].segIdx], e = 2 * (h - .5) * this.samples[i].t;
                                return t.pointAtParameter(e);
                            }
                        }
                        {
                            const t = this.segments[this.samples[s].segIdx], e = (1 - h) * this.samples[s].t + h * this.samples[i].t;
                            return t.pointAtParameter(e);
                        }
                    }
                    getAngleAtLength(t, e = !1) {
                        const s = this.getTangentAtLength(t, e);
                        return Math.atan2(s.y, s.x);
                    }
                    getTangentAtLength(t, e = !1) {
                        if (t <= 0) return this.samples[0].tan;
                        if (t >= this._totalLength) return this.samples[this.samples.length - 1].tan;
                        const s = this.findClosestSampleIdx(t), i = this.samples[s].dist < t ? Math.min(s + 1, this.samples.length - 1) : Math.max(0, s - 1), h = (t - this.samples[s].dist) / (this.samples[i].dist - this.samples[s].dist);
                        if (e || this.samples[s].segIdx > this.samples[i].segIdx) {
                            let t = (1 - h) * this.samples[s].tan.x + h * this.samples[i].tan.x, e = (1 - h) * this.samples[s].tan.y + h * this.samples[i].tan.y;
                            const a = Math.max(Math.hypot(t, e), 1e-4);
                            return t /= a, e /= a, {
                                x: t,
                                y: e
                            };
                        }
                        if (this.samples[s].segIdx !== this.samples[i].segIdx) {
                            if (h < .5) {
                                const t = this.segments[this.samples[s].segIdx], e = 2 * h, i = (1 - e) * this.samples[s].t + e;
                                return t.tangentAtParameter(i);
                            }
                            {
                                const t = this.segments[this.samples[i].segIdx], e = 2 * (h - .5) * this.samples[i].t;
                                return t.tangentAtParameter(e);
                            }
                        }
                        {
                            const t = this.segments[this.samples[s].segIdx], e = (1 - h) * this.samples[s].t + h * this.samples[i].t;
                            return t.tangentAtParameter(e);
                        }
                    }
                };
            },
            558: (t, e, s)=>{
                Object.defineProperty(e, "__esModule", {
                    value: !0
                }), e.BezierSegment = void 0;
                const i = s(188);
                class h {
                    constructor(t, e, s, i){
                        this._totalLength = void 0, this.A = t, this.B = e, this.C = s, this.D = i;
                    }
                    static sampleSpacing() {
                        return 2;
                    }
                    tangentAtParameter(t) {
                        const e = Math.max(0, Math.min(1, t));
                        if (0 === e || 1 === e) {
                            let t, s;
                            0 === e ? this.A.x === this.B.x && this.A.y === this.B.y ? (t = this.C.x - this.A.x, s = this.C.y - this.A.y) : (t = this.B.x - this.A.x, s = this.B.y - this.A.y) : this.D.x === this.C.x && this.D.y === this.C.y ? (t = this.D.x - this.B.x, s = this.D.y - this.B.y) : (t = this.D.x - this.C.x, s = this.D.y - this.C.y);
                            const i = Math.hypot(t, s);
                            return Math.abs(i) > 1e-4 && (t /= i, s /= i), {
                                x: t,
                                y: s
                            };
                        }
                        const s = 1 - e;
                        let i = 3 * this.D.x * Math.pow(e, 2) - 3 * this.C.x * Math.pow(e, 2) + 6 * this.C.x * s * e - 6 * this.B.x * s * e + 3 * this.B.x * Math.pow(s, 2) - 3 * this.A.x * Math.pow(s, 2), h = 3 * this.D.y * Math.pow(e, 2) - 3 * this.C.y * Math.pow(e, 2) + 6 * this.C.y * s * e - 6 * this.B.y * s * e + 3 * this.B.y * Math.pow(s, 2) - 3 * this.A.y * Math.pow(s, 2);
                        const a = Math.hypot(i, h);
                        return Math.abs(a) > 1e-4 && (i /= a, h /= a), {
                            x: i,
                            y: h
                        };
                    }
                    isLinear() {
                        return this.A.x === this.B.x && this.A.y === this.B.y && this.C.x === this.D.x && this.C.y === this.D.y;
                    }
                    pointAtParameter(t) {
                        const e = Math.max(0, Math.min(1, t));
                        return {
                            x: Math.pow(1 - e, 3) * this.A.x + 3 * Math.pow(1 - e, 2) * e * this.B.x + 3 * (1 - e) * Math.pow(e, 2) * this.C.x + Math.pow(e, 3) * this.D.x,
                            y: Math.pow(1 - e, 3) * this.A.y + 3 * Math.pow(1 - e, 2) * e * this.B.y + 3 * (1 - e) * Math.pow(e, 2) * this.C.y + Math.pow(e, 3) * this.D.y
                        };
                    }
                    getTotalLength() {
                        if (void 0 === this._totalLength) if (this.isLinear()) this._totalLength = Math.hypot(this.D.x - this.A.x, this.D.y - this.A.y);
                        else {
                            const t = Math.max(10, Math.ceil((Math.hypot(this.B.x - this.A.x, this.B.y - this.A.y) + Math.hypot(this.C.x - this.B.x, this.C.y - this.B.y) + Math.hypot(this.D.x - this.C.x, this.D.y - this.C.y)) / h.sampleSpacing())), e = (0, i.times)(t).map((e)=>this.pointAtParameter(e / (t - 1)));
                            let s = 0;
                            for(let t = 1; t < e.length; t++)s += Math.hypot(e[t].x - e[t - 1].x, e[t].y - e[t - 1].y);
                            this._totalLength = s;
                        }
                        return this._totalLength;
                    }
                }
                e.BezierSegment = h;
            },
            729: (t, e, s)=>{
                Object.defineProperty(e, "__esModule", {
                    value: !0
                }), e.createFromCommands = e.create = e.createFromElement = e.createFromCircle = e.createFromLine = e.createFromPath = void 0;
                const i = s(821), h = s(558), a = {
                    M: [
                        "x",
                        "y"
                    ],
                    m: [
                        "dx",
                        "dy"
                    ],
                    H: [
                        "x"
                    ],
                    h: [
                        "dx"
                    ],
                    V: [
                        "y"
                    ],
                    v: [
                        "dy"
                    ],
                    L: [
                        "x",
                        "y"
                    ],
                    l: [
                        "dx",
                        "dy"
                    ],
                    Z: [],
                    C: [
                        "x1",
                        "y1",
                        "x2",
                        "y2",
                        "x",
                        "y"
                    ],
                    c: [
                        "dx1",
                        "dy1",
                        "dx2",
                        "dy2",
                        "dx",
                        "dy"
                    ],
                    S: [
                        "x2",
                        "y2",
                        "x",
                        "y"
                    ],
                    s: [
                        "dx2",
                        "dy2",
                        "dx",
                        "dy"
                    ],
                    Q: [
                        "x1",
                        "y1",
                        "x",
                        "y"
                    ],
                    q: [
                        "dx1",
                        "dy1",
                        "dx",
                        "dy"
                    ],
                    T: [
                        "x",
                        "y"
                    ],
                    t: [
                        "dx",
                        "dy"
                    ],
                    A: [
                        "rx",
                        "ry",
                        "rotation",
                        "large-arc",
                        "sweep",
                        "x",
                        "y"
                    ],
                    a: [
                        "rx",
                        "ry",
                        "rotation",
                        "large-arc",
                        "sweep",
                        "dx",
                        "dy"
                    ]
                };
                e.createFromPath = (t)=>{
                    const e = function(t) {
                        const e = t.replace(/[\n\r]/g, "").replace(/-/g, " -").replace(/(\d*\.)(\d+)(?=\.)/g, "$1$2 ").replace(/(\d)([A-Za-z])/g, "$1 $2").replace(/([A-Za-z])(\d)/g, "$1 $2").trim().split(/\s*,|\s+/), s = [];
                        let i = "", h = {};
                        for(; e.length > 0;){
                            let t = e.shift();
                            a.hasOwnProperty(t) ? i = t : e.unshift(t), h = {
                                type: i
                            }, a[i].forEach((s)=>{
                                t = e.shift(), h[s] = parseFloat(t);
                            }), "M" === i ? i = "L" : "m" === i && (i = "l"), s.push(h);
                        }
                        return s;
                    }(t.getAttribute("d"));
                    if (e.length < 2) throw new Error(`Path doesn't have enough commands: ${JSON.stringify(e)}`);
                    if ("M" !== e[0].type) throw new Error(`Path starts with ${e[0].type} instead of M!`);
                    let s = {
                        x: e[0].x,
                        y: e[0].y
                    };
                    e.shift();
                    const n = [];
                    for(; e.length > 0;){
                        const t = e.shift();
                        if ("C" === t.type) n.push(new h.BezierSegment(s, {
                            x: t.x1,
                            y: t.y1
                        }, {
                            x: t.x2,
                            y: t.y2
                        }, {
                            x: t.x,
                            y: t.y
                        })), s = {
                            x: t.x,
                            y: t.y
                        };
                        else if ("L" === t.type) n.push(new h.BezierSegment(s, s, {
                            x: t.x,
                            y: t.y
                        }, {
                            x: t.x,
                            y: t.y
                        })), s = {
                            x: t.x,
                            y: t.y
                        };
                        else if ("H" === t.type) n.push(new h.BezierSegment(s, s, {
                            x: t.x,
                            y: s.y
                        }, {
                            x: t.x,
                            y: s.y
                        })), s = {
                            x: t.x,
                            y: s.y
                        };
                        else if ("V" === t.type) n.push(new h.BezierSegment(s, s, {
                            x: s.x,
                            y: t.y
                        }, {
                            x: s.x,
                            y: t.y
                        })), s = {
                            x: s.x,
                            y: t.y
                        };
                        else if ("Z" !== t.type) throw new Error(`Unsupported path command ${t.type}; use only H, V, M, L, C, Z!`);
                    }
                    return new i.BezierPath(n);
                }, e.createFromLine = (t)=>{
                    const [e, s, a, n] = [
                        "x1",
                        "x2",
                        "y1",
                        "y2"
                    ].map((e)=>parseFloat(t.getAttribute(e) || "0"));
                    return new i.BezierPath([
                        new h.BezierSegment({
                            x: e,
                            y: a
                        }, {
                            x: e,
                            y: a
                        }, {
                            x: s,
                            y: n
                        }, {
                            x: s,
                            y: n
                        })
                    ]);
                }, e.createFromCircle = (t)=>{
                    const [e, s, a] = [
                        "cx",
                        "cy",
                        "r"
                    ].map((e)=>parseFloat(t.getAttribute(e) || "0")), n = 1.3;
                    return new i.BezierPath([
                        new h.BezierSegment({
                            x: e - a,
                            y: s
                        }, {
                            x: e - a,
                            y: s - n * a
                        }, {
                            x: e + a,
                            y: s - n * a
                        }, {
                            x: e + a,
                            y: s
                        }),
                        new h.BezierSegment({
                            x: e + a,
                            y: s
                        }, {
                            x: e + a,
                            y: s + n * a
                        }, {
                            x: e - a,
                            y: s + n * a
                        }, {
                            x: e - a,
                            y: s
                        })
                    ]);
                }, e.createFromElement = (t)=>{
                    const s = t.tagName.toLowerCase();
                    if ("path" === s) return (0, e.createFromPath)(t);
                    if ("line" === s) return (0, e.createFromLine)(t);
                    if ("circle" === s) return (0, e.createFromCircle)(t);
                    throw new Error(`Unsupported SVG tag: ${s}`);
                }, e.create = (t)=>{
                    const e = [];
                    for(let s = 1; s < t.length; s++){
                        const i = t[s - 1], a = t[s];
                        e.push(new h.BezierSegment(i.pt, i.right || i.pt, a.left || a.pt, a.pt));
                    }
                    return new i.BezierPath(e);
                }, e.createFromCommands = (t)=>{
                    const e = t.slice();
                    if (e.length < 2) throw new Error(`Path doesn't have enough commands: ${JSON.stringify(e)}`);
                    if ("M" !== e[0].type) throw new Error(`Path starts with ${e[0].type} instead of M!`);
                    let s = {
                        x: e[0].x,
                        y: e[0].y
                    }, a = Object.assign({}, s);
                    const n = [];
                    for(; e.length > 0;){
                        const t = e.shift();
                        if ("M" === t.type) a = {
                            x: t.x,
                            y: t.y
                        }, s = a;
                        else if ("C" === t.type) n.push(new h.BezierSegment(s, {
                            x: t.x1,
                            y: t.y1
                        }, {
                            x: t.x2,
                            y: t.y2
                        }, {
                            x: t.x,
                            y: t.y
                        })), s = {
                            x: t.x,
                            y: t.y
                        };
                        else if ("L" === t.type) t.x === s.x && t.y === s.y || n.push(new h.BezierSegment(s, s, {
                            x: t.x,
                            y: t.y
                        }, {
                            x: t.x,
                            y: t.y
                        })), s = {
                            x: t.x,
                            y: t.y
                        };
                        else if ("H" === t.type) t.x !== s.x && n.push(new h.BezierSegment(s, s, {
                            x: t.x,
                            y: s.y
                        }, {
                            x: t.x,
                            y: s.y
                        })), s = {
                            x: t.x,
                            y: s.y
                        };
                        else if ("V" === t.type) t.y !== s.y && n.push(new h.BezierSegment(s, s, {
                            x: s.x,
                            y: t.y
                        }, {
                            x: s.x,
                            y: t.y
                        })), s = {
                            x: s.x,
                            y: t.y
                        };
                        else if ("Q" === t.type) n.push(new h.BezierSegment(s, {
                            x: s.x + 2 / 3 * (t.x1 - s.x),
                            y: s.y + 2 / 3 * (t.y1 - s.y)
                        }, {
                            x: t.x + 2 / 3 * (t.x1 - t.x),
                            y: t.y + 2 / 3 * (t.y1 - t.y)
                        }, {
                            x: t.x,
                            y: t.y
                        })), s = {
                            x: t.x,
                            y: t.y
                        };
                        else {
                            if ("Z" !== t.type) throw new Error(`Unsupported path command ${t.type}; use only H, V, M, L, C, Z!`);
                            Math.hypot(s.x - a.x, s.y - a.y) > 0 && n.push(new h.BezierSegment(s, s, a, a));
                        }
                    }
                    return new i.BezierPath(n);
                };
            },
            821: function(t, e, s) {
                var i = this && this.__createBinding || (Object.create ? function(t, e, s, i) {
                    void 0 === i && (i = s);
                    var h = Object.getOwnPropertyDescriptor(e, s);
                    h && !("get" in h ? !e.__esModule : h.writable || h.configurable) || (h = {
                        enumerable: !0,
                        get: function() {
                            return e[s];
                        }
                    }), Object.defineProperty(t, i, h);
                } : function(t, e, s, i) {
                    void 0 === i && (i = s), t[i] = e[s];
                }), h = this && this.__exportStar || function(t, e) {
                    for(var s in t)"default" === s || Object.prototype.hasOwnProperty.call(e, s) || i(e, t, s);
                };
                Object.defineProperty(e, "__esModule", {
                    value: !0
                }), h(s(177), e), h(s(558), e), h(s(729), e), h(s(856), e);
            },
            856: (t, e)=>{
                Object.defineProperty(e, "__esModule", {
                    value: !0
                });
            },
            188: (t, e)=>{
                Object.defineProperty(e, "__esModule", {
                    value: !0
                }), e.times = void 0, e.times = function(t) {
                    const e = [];
                    for(let s = 0; s < t; s++)e.push(s);
                    return e;
                };
            }
        }, e = {};
        return function s(i) {
            var h = e[i];
            if (void 0 !== h) return h.exports;
            var a = e[i] = {
                exports: {}
            };
            return t[i].call(a.exports, a, a.exports, s), a.exports;
        }(821);
    })());
}}),
"[project]/node_modules/escodegen/package.json (json)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.v(JSON.parse("{\"name\":\"escodegen\",\"description\":\"ECMAScript code generator\",\"homepage\":\"http://github.com/estools/escodegen\",\"main\":\"escodegen.js\",\"bin\":{\"esgenerate\":\"./bin/esgenerate.js\",\"escodegen\":\"./bin/escodegen.js\"},\"files\":[\"LICENSE.BSD\",\"README.md\",\"bin\",\"escodegen.js\",\"package.json\"],\"version\":\"2.1.0\",\"engines\":{\"node\":\">=6.0\"},\"maintainers\":[{\"name\":\"Yusuke Suzuki\",\"email\":\"utatane.tea@gmail.com\",\"web\":\"http://github.com/Constellation\"}],\"repository\":{\"type\":\"git\",\"url\":\"http://github.com/estools/escodegen.git\"},\"dependencies\":{\"estraverse\":\"^5.2.0\",\"esutils\":\"^2.0.2\",\"esprima\":\"^4.0.1\"},\"optionalDependencies\":{\"source-map\":\"~0.6.1\"},\"devDependencies\":{\"acorn\":\"^8.0.4\",\"bluebird\":\"^3.4.7\",\"bower-registry-client\":\"^1.0.0\",\"chai\":\"^4.2.0\",\"chai-exclude\":\"^2.0.2\",\"commonjs-everywhere\":\"^0.9.7\",\"gulp\":\"^4.0.2\",\"gulp-eslint\":\"^6.0.0\",\"gulp-mocha\":\"^7.0.2\",\"minimist\":\"^1.2.5\",\"optionator\":\"^0.9.1\",\"semver\":\"^7.3.4\"},\"license\":\"BSD-2-Clause\",\"scripts\":{\"test\":\"gulp travis\",\"unit-test\":\"gulp test\",\"lint\":\"gulp lint\",\"release\":\"node tools/release.js\",\"build-min\":\"./node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js\",\"build\":\"./node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js\"}}"));}}),
"[project]/node_modules/escodegen/escodegen.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2020 Apple Inc. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ /*global exports:true, require:true, global:true*/ (function() {
    'use strict';
    var Syntax, Precedence, BinaryPrecedence, SourceNode, estraverse, esutils, base, indent, json, renumber, hexadecimal, quotes, escapeless, newline, space, parentheses, semicolons, safeConcatenation, directive, extra, parse, sourceMap, sourceCode, preserveBlankLines, FORMAT_MINIFY, FORMAT_DEFAULTS;
    estraverse = __turbopack_context__.r("[project]/node_modules/estraverse/estraverse.js [app-client] (ecmascript)");
    esutils = __turbopack_context__.r("[project]/node_modules/esutils/lib/utils.js [app-client] (ecmascript)");
    Syntax = estraverse.Syntax;
    // Generation is done by generateExpression.
    function isExpression(node) {
        return CodeGenerator.Expression.hasOwnProperty(node.type);
    }
    // Generation is done by generateStatement.
    function isStatement(node) {
        return CodeGenerator.Statement.hasOwnProperty(node.type);
    }
    Precedence = {
        Sequence: 0,
        Yield: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        Coalesce: 3,
        LogicalOR: 4,
        LogicalAND: 5,
        BitwiseOR: 6,
        BitwiseXOR: 7,
        BitwiseAND: 8,
        Equality: 9,
        Relational: 10,
        BitwiseSHIFT: 11,
        Additive: 12,
        Multiplicative: 13,
        Exponentiation: 14,
        Await: 15,
        Unary: 15,
        Postfix: 16,
        OptionalChaining: 17,
        Call: 18,
        New: 19,
        TaggedTemplate: 20,
        Member: 21,
        Primary: 22
    };
    BinaryPrecedence = {
        '??': Precedence.Coalesce,
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative,
        '**': Precedence.Exponentiation
    };
    //Flags
    var F_ALLOW_IN = 1, F_ALLOW_CALL = 1 << 1, F_ALLOW_UNPARATH_NEW = 1 << 2, F_FUNC_BODY = 1 << 3, F_DIRECTIVE_CTX = 1 << 4, F_SEMICOLON_OPT = 1 << 5, F_FOUND_COALESCE = 1 << 6;
    //Expression flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_ALLOW_CALL
    // F_ALLOW_UNPARATH_NEW
    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TTF = F_ALLOW_IN | F_ALLOW_CALL, E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW, E_TFF = F_ALLOW_IN, E_FFT = F_ALLOW_UNPARATH_NEW, E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;
    //Statement flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_FUNC_BODY
    // F_DIRECTIVE_CTX
    // F_SEMICOLON_OPT
    var S_TFFF = F_ALLOW_IN, S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT, S_FFFF = 0x00, S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX, S_TTFF = F_ALLOW_IN | F_FUNC_BODY;
    function getDefaultOptions() {
        // default options
        return {
            indent: null,
            base: null,
            parse: null,
            comment: false,
            format: {
                indent: {
                    style: '    ',
                    base: 0,
                    adjustMultilineComment: false
                },
                newline: '\n',
                space: ' ',
                json: false,
                renumber: false,
                hexadecimal: false,
                quotes: 'single',
                escapeless: false,
                compact: false,
                parentheses: true,
                semicolons: true,
                safeConcatenation: false,
                preserveBlankLines: false
            },
            moz: {
                comprehensionExpressionStartsWithAssignment: false,
                starlessGenerator: false
            },
            sourceMap: null,
            sourceMapRoot: null,
            sourceMapWithCode: false,
            directive: false,
            raw: true,
            verbatim: null,
            sourceCode: null
        };
    }
    function stringRepeat(str, num) {
        var result = '';
        for(num |= 0; num > 0; num >>>= 1, str += str){
            if (num & 1) {
                result += str;
            }
        }
        return result;
    }
    function hasLineTerminator(str) {
        return /[\r\n]/g.test(str);
    }
    function endsWithLineTerminator(str) {
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
    }
    function merge(target, override) {
        var key;
        for(key in override){
            if (override.hasOwnProperty(key)) {
                target[key] = override[key];
            }
        }
        return target;
    }
    function updateDeeply(target, override) {
        var key, val;
        function isHashObject(target) {
            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
        }
        for(key in override){
            if (override.hasOwnProperty(key)) {
                val = override[key];
                if (isHashObject(val)) {
                    if (isHashObject(target[key])) {
                        updateDeeply(target[key], val);
                    } else {
                        target[key] = updateDeeply({}, val);
                    }
                } else {
                    target[key] = val;
                }
            }
        }
        return target;
    }
    function generateNumber(value) {
        var result, point, temp, exponent, pos;
        if (value !== value) {
            throw new Error('Numeric literal whose value is NaN');
        }
        if (value < 0 || value === 0 && 1 / value < 0) {
            throw new Error('Numeric literal whose value is negative');
        }
        if (value === 1 / 0) {
            return json ? 'null' : renumber ? '1e400' : '1e+400';
        }
        result = '' + value;
        if (!renumber || result.length < 3) {
            return result;
        }
        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 0x30 /* 0 */  && point === 1) {
            point = 0;
            result = result.slice(1);
        }
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) {
            exponent = +temp.slice(pos + 1);
            temp = temp.slice(0, pos);
        }
        if (point >= 0) {
            exponent -= temp.length - point - 1;
            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
        }
        pos = 0;
        while(temp.charCodeAt(temp.length + pos - 1) === 0x30 /* 0 */ ){
            --pos;
        }
        if (pos !== 0) {
            exponent -= pos;
            temp = temp.slice(0, pos);
        }
        if (exponent !== 0) {
            temp += 'e' + exponent;
        }
        if ((temp.length < result.length || hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length) && +temp === value) {
            result = temp;
        }
        return result;
    }
    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine
    function escapeRegExpCharacter(ch, previousIsBackslash) {
        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
        if ((ch & ~1) === 0x2028) {
            return (previousIsBackslash ? 'u' : '\\u') + (ch === 0x2028 ? '2028' : '2029');
        } else if (ch === 10 || ch === 13) {
            return (previousIsBackslash ? '' : '\\') + (ch === 10 ? 'n' : 'r');
        }
        return String.fromCharCode(ch);
    }
    function generateRegExp(reg) {
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;
        result = reg.toString();
        if (reg.source) {
            // extract flag from toString result
            match = result.match(/\/([^/]*)$/);
            if (!match) {
                return result;
            }
            flags = match[1];
            result = '';
            characterInBrack = false;
            previousIsBackslash = false;
            for(i = 0, iz = reg.source.length; i < iz; ++i){
                ch = reg.source.charCodeAt(i);
                if (!previousIsBackslash) {
                    if (characterInBrack) {
                        if (ch === 93) {
                            characterInBrack = false;
                        }
                    } else {
                        if (ch === 47) {
                            result += '\\';
                        } else if (ch === 91) {
                            characterInBrack = true;
                        }
                    }
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    previousIsBackslash = ch === 92; // \
                } else {
                    // if new RegExp("\\\n') is provided, create /\n/
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    // prevent like /\\[/]/
                    previousIsBackslash = false;
                }
            }
            return '/' + result + '/' + flags;
        }
        return result;
    }
    function escapeAllowedCharacter(code, next) {
        var hex;
        if (code === 0x08 /* \b */ ) {
            return '\\b';
        }
        if (code === 0x0C /* \f */ ) {
            return '\\f';
        }
        if (code === 0x09 /* \t */ ) {
            return '\\t';
        }
        hex = code.toString(16).toUpperCase();
        if (json || code > 0xFF) {
            return '\\u' + '0000'.slice(hex.length) + hex;
        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
            return '\\0';
        } else if (code === 0x000B /* \v */ ) {
            return '\\x0B';
        } else {
            return '\\x' + '00'.slice(hex.length) + hex;
        }
    }
    function escapeDisallowedCharacter(code) {
        if (code === 0x5C /* \ */ ) {
            return '\\\\';
        }
        if (code === 0x0A /* \n */ ) {
            return '\\n';
        }
        if (code === 0x0D /* \r */ ) {
            return '\\r';
        }
        if (code === 0x2028) {
            return '\\u2028';
        }
        if (code === 0x2029) {
            return '\\u2029';
        }
        throw new Error('Incorrectly classified character');
    }
    function escapeDirective(str) {
        var i, iz, code, quote;
        quote = quotes === 'double' ? '"' : '\'';
        for(i = 0, iz = str.length; i < iz; ++i){
            code = str.charCodeAt(i);
            if (code === 0x27 /* ' */ ) {
                quote = '"';
                break;
            } else if (code === 0x22 /* " */ ) {
                quote = '\'';
                break;
            } else if (code === 0x5C /* \ */ ) {
                ++i;
            }
        }
        return quote + str + quote;
    }
    function escapeString(str) {
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;
        for(i = 0, len = str.length; i < len; ++i){
            code = str.charCodeAt(i);
            if (code === 0x27 /* ' */ ) {
                ++singleQuotes;
            } else if (code === 0x22 /* " */ ) {
                ++doubleQuotes;
            } else if (code === 0x2F /* / */  && json) {
                result += '\\';
            } else if (esutils.code.isLineTerminator(code) || code === 0x5C /* \ */ ) {
                result += escapeDisallowedCharacter(code);
                continue;
            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20 /* SP */  || !json && !escapeless && (code < 0x20 /* SP */  || code > 0x7E /* ~ */ ))) {
                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                continue;
            }
            result += String.fromCharCode(code);
        }
        single = !(quotes === 'double' || quotes === 'auto' && doubleQuotes < singleQuotes);
        quote = single ? '\'' : '"';
        if (!(single ? singleQuotes : doubleQuotes)) {
            return quote + result + quote;
        }
        str = result;
        result = quote;
        for(i = 0, len = str.length; i < len; ++i){
            code = str.charCodeAt(i);
            if (code === 0x27 /* ' */  && single || code === 0x22 /* " */  && !single) {
                result += '\\';
            }
            result += String.fromCharCode(code);
        }
        return result + quote;
    }
    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */ function flattenToString(arr) {
        var i, iz, elem, result = '';
        for(i = 0, iz = arr.length; i < iz; ++i){
            elem = arr[i];
            result += Array.isArray(elem) ? flattenToString(elem) : elem;
        }
        return result;
    }
    /**
     * convert generated to a SourceNode when source maps are enabled.
     */ function toSourceNodeWhenNeeded(generated, node) {
        if (!sourceMap) {
            // with no source maps, generated is either an
            // array or a string.  if an array, flatten it.
            // if a string, just return it
            if (Array.isArray(generated)) {
                return flattenToString(generated);
            } else {
                return generated;
            }
        }
        if (node == null) {
            if (generated instanceof SourceNode) {
                return generated;
            } else {
                node = {};
            }
        }
        if (node.loc == null) {
            return new SourceNode(null, null, sourceMap, generated, node.name || null);
        }
        return new SourceNode(node.loc.start.line, node.loc.start.column, sourceMap === true ? node.loc.source || null : sourceMap, generated, node.name || null);
    }
    function noEmptySpace() {
        return space ? space : ' ';
    }
    function join(left, right) {
        var leftSource, rightSource, leftCharCode, rightCharCode;
        leftSource = toSourceNodeWhenNeeded(left).toString();
        if (leftSource.length === 0) {
            return [
                right
            ];
        }
        rightSource = toSourceNodeWhenNeeded(right).toString();
        if (rightSource.length === 0) {
            return [
                left
            ];
        }
        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
        rightCharCode = rightSource.charCodeAt(0);
        if ((leftCharCode === 0x2B /* + */  || leftCharCode === 0x2D /* - */ ) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) || leftCharCode === 0x2F /* / */  && rightCharCode === 0x69 /* i */ ) {
            return [
                left,
                noEmptySpace(),
                right
            ];
        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) || esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
            return [
                left,
                right
            ];
        }
        return [
            left,
            space,
            right
        ];
    }
    function addIndent(stmt) {
        return [
            base,
            stmt
        ];
    }
    function withIndent(fn) {
        var previousBase;
        previousBase = base;
        base += indent;
        fn(base);
        base = previousBase;
    }
    function calculateSpaces(str) {
        var i;
        for(i = str.length - 1; i >= 0; --i){
            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
                break;
            }
        }
        return str.length - 1 - i;
    }
    function adjustMultilineComment(value, specialBase) {
        var array, i, len, line, j, spaces, previousBase, sn;
        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;
        // first line doesn't have indentation
        for(i = 1, len = array.length; i < len; ++i){
            line = array[i];
            j = 0;
            while(j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))){
                ++j;
            }
            if (spaces > j) {
                spaces = j;
            }
        }
        if (typeof specialBase !== 'undefined') {
            // pattern like
            // {
            //   var t = 20;  /*
            //                 * this is comment
            //                 */
            // }
            previousBase = base;
            if (array[1][spaces] === '*') {
                specialBase += ' ';
            }
            base = specialBase;
        } else {
            if (spaces & 1) {
                // /*
                //  *
                //  */
                // If spaces are odd number, above pattern is considered.
                // We waste 1 space.
                --spaces;
            }
            previousBase = base;
        }
        for(i = 1, len = array.length; i < len; ++i){
            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
            array[i] = sourceMap ? sn.join('') : sn;
        }
        base = previousBase;
        return array.join('\n');
    }
    function generateComment(comment, specialBase) {
        if (comment.type === 'Line') {
            if (endsWithLineTerminator(comment.value)) {
                return '//' + comment.value;
            } else {
                // Always use LineTerminator
                var result = '//' + comment.value;
                if (!preserveBlankLines) {
                    result += '\n';
                }
                return result;
            }
        }
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
        }
        return '/*' + comment.value + '*/';
    }
    function addComments(stmt, result) {
        var i, len, comment, save, tailingToStatement, specialBase, fragment, extRange, range, prevRange, prefix, infix, suffix, count;
        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
            save = result;
            if (preserveBlankLines) {
                comment = stmt.leadingComments[0];
                result = [];
                extRange = comment.extendedRange;
                range = comment.range;
                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;
                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }
                prevRange = range;
                for(i = 1, len = stmt.leadingComments.length; i < len; i++){
                    comment = stmt.leadingComments[i];
                    range = comment.range;
                    infix = sourceCode.substring(prevRange[1], range[0]);
                    count = (infix.match(/\n/g) || []).length;
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                    prevRange = range;
                }
                suffix = sourceCode.substring(range[1], extRange[1]);
                count = (suffix.match(/\n/g) || []).length;
                result.push(stringRepeat('\n', count));
            } else {
                comment = stmt.leadingComments[0];
                result = [];
                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
                    result.push('\n');
                }
                result.push(generateComment(comment));
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push('\n');
                }
                for(i = 1, len = stmt.leadingComments.length; i < len; ++i){
                    comment = stmt.leadingComments[i];
                    fragment = [
                        generateComment(comment)
                    ];
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        fragment.push('\n');
                    }
                    result.push(addIndent(fragment));
                }
            }
            result.push(addIndent(save));
        }
        if (stmt.trailingComments) {
            if (preserveBlankLines) {
                comment = stmt.trailingComments[0];
                extRange = comment.extendedRange;
                range = comment.range;
                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;
                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }
            } else {
                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([
                    base,
                    result,
                    indent
                ]).toString()));
                for(i = 0, len = stmt.trailingComments.length; i < len; ++i){
                    comment = stmt.trailingComments[i];
                    if (tailingToStatement) {
                        // We assume target like following script
                        //
                        // var t = 20;  /**
                        //               * This is comment of t
                        //               */
                        if (i === 0) {
                            // first case
                            result = [
                                result,
                                indent
                            ];
                        } else {
                            result = [
                                result,
                                specialBase
                            ];
                        }
                        result.push(generateComment(comment, specialBase));
                    } else {
                        result = [
                            result,
                            addIndent(generateComment(comment))
                        ];
                    }
                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result = [
                            result,
                            '\n'
                        ];
                    }
                }
            }
        }
        return result;
    }
    function generateBlankLines(start, end, result) {
        var j, newlineCount = 0;
        for(j = start; j < end; j++){
            if (sourceCode[j] === '\n') {
                newlineCount++;
            }
        }
        for(j = 1; j < newlineCount; j++){
            result.push(newline);
        }
    }
    function parenthesize(text, current, should) {
        if (current < should) {
            return [
                '(',
                text,
                ')'
            ];
        }
        return text;
    }
    function generateVerbatimString(string) {
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for(i = 1, iz = result.length; i < iz; i++){
            result[i] = newline + base + result[i];
        }
        return result;
    }
    function generateVerbatim(expr, precedence) {
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];
        if (typeof verbatim === 'string') {
            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
        } else {
            // verbatim is object
            result = generateVerbatimString(verbatim.content);
            prec = verbatim.precedence != null ? verbatim.precedence : Precedence.Sequence;
            result = parenthesize(result, prec, precedence);
        }
        return toSourceNodeWhenNeeded(result, expr);
    }
    function CodeGenerator() {}
    // Helpers.
    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {
        var result, noLeadingComment, that = this;
        noLeadingComment = !extra.comment || !stmt.leadingComments;
        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
            return [
                space,
                this.generateStatement(stmt, flags)
            ];
        }
        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
            return ';';
        }
        withIndent(function() {
            result = [
                newline,
                addIndent(that.generateStatement(stmt, flags))
            ];
        });
        return result;
    };
    CodeGenerator.prototype.maybeBlockSuffix = function(stmt, result) {
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
            return [
                result,
                space
            ];
        }
        if (ends) {
            return [
                result,
                base
            ];
        }
        return [
            result,
            newline,
            base
        ];
    };
    function generateIdentifier(node) {
        return toSourceNodeWhenNeeded(node.name, node);
    }
    function generateAsyncPrefix(node, spaceRequired) {
        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
    }
    function generateStarSuffix(node) {
        var isGenerator = node.generator && !extra.moz.starlessGenerator;
        return isGenerator ? '*' + space : '';
    }
    function generateMethodPrefix(prop) {
        var func = prop.value, prefix = '';
        if (func.async) {
            prefix += generateAsyncPrefix(func, !prop.computed);
        }
        if (func.generator) {
            // avoid space before method name
            prefix += generateStarSuffix(func) ? '*' : '';
        }
        return prefix;
    }
    CodeGenerator.prototype.generatePattern = function(node, precedence, flags) {
        if (node.type === Syntax.Identifier) {
            return generateIdentifier(node);
        }
        return this.generateExpression(node, precedence, flags);
    };
    CodeGenerator.prototype.generateFunctionParams = function(node) {
        var i, iz, result, hasDefault;
        hasDefault = false;
        if (node.type === Syntax.ArrowFunctionExpression && !node.rest && (!node.defaults || node.defaults.length === 0) && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
            // arg => { } case
            result = [
                generateAsyncPrefix(node, true),
                generateIdentifier(node.params[0])
            ];
        } else {
            result = node.type === Syntax.ArrowFunctionExpression ? [
                generateAsyncPrefix(node, false)
            ] : [];
            result.push('(');
            if (node.defaults) {
                hasDefault = true;
            }
            for(i = 0, iz = node.params.length; i < iz; ++i){
                if (hasDefault && node.defaults[i]) {
                    // Handle default values.
                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
                } else {
                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
                }
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            if (node.rest) {
                if (node.params.length) {
                    result.push(',' + space);
                }
                result.push('...');
                result.push(generateIdentifier(node.rest));
            }
            result.push(')');
        }
        return result;
    };
    CodeGenerator.prototype.generateFunctionBody = function(node) {
        var result, expr;
        result = this.generateFunctionParams(node);
        if (node.type === Syntax.ArrowFunctionExpression) {
            result.push(space);
            result.push('=>');
        }
        if (node.expression) {
            result.push(space);
            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
            if (expr.toString().charAt(0) === '{') {
                expr = [
                    '(',
                    expr,
                    ')'
                ];
            }
            result.push(expr);
        } else {
            result.push(this.maybeBlock(node.body, S_TTFF));
        }
        return result;
    };
    CodeGenerator.prototype.generateIterationForStatement = function(operator, stmt, flags) {
        var result = [
            'for' + (stmt.await ? noEmptySpace() + 'await' : '') + space + '('
        ], that = this;
        withIndent(function() {
            if (stmt.left.type === Syntax.VariableDeclaration) {
                withIndent(function() {
                    result.push(stmt.left.kind + noEmptySpace());
                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
                });
            } else {
                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
            }
            result = join(result, operator);
            result = [
                join(result, that.generateExpression(stmt.right, Precedence.Assignment, E_TTT)),
                ')'
            ];
        });
        result.push(this.maybeBlock(stmt.body, flags));
        return result;
    };
    CodeGenerator.prototype.generatePropertyKey = function(expr, computed) {
        var result = [];
        if (computed) {
            result.push('[');
        }
        result.push(this.generateExpression(expr, Precedence.Assignment, E_TTT));
        if (computed) {
            result.push(']');
        }
        return result;
    };
    CodeGenerator.prototype.generateAssignment = function(left, right, operator, precedence, flags) {
        if (Precedence.Assignment < precedence) {
            flags |= F_ALLOW_IN;
        }
        return parenthesize([
            this.generateExpression(left, Precedence.Call, flags),
            space + operator + space,
            this.generateExpression(right, Precedence.Assignment, flags)
        ], Precedence.Assignment, precedence);
    };
    CodeGenerator.prototype.semicolon = function(flags) {
        if (!semicolons && flags & F_SEMICOLON_OPT) {
            return '';
        }
        return ';';
    };
    // Statements.
    CodeGenerator.Statement = {
        BlockStatement: function(stmt, flags) {
            var range, content, result = [
                '{',
                newline
            ], that = this;
            withIndent(function() {
                // handle functions without any code
                if (stmt.body.length === 0 && preserveBlankLines) {
                    range = stmt.range;
                    if (range[1] - range[0] > 2) {
                        content = sourceCode.substring(range[0] + 1, range[1] - 1);
                        if (content[0] === '\n') {
                            result = [
                                '{'
                            ];
                        }
                        result.push(content);
                    }
                }
                var i, iz, fragment, bodyFlags;
                bodyFlags = S_TFFF;
                if (flags & F_FUNC_BODY) {
                    bodyFlags |= F_DIRECTIVE_CTX;
                }
                for(i = 0, iz = stmt.body.length; i < iz; ++i){
                    if (preserveBlankLines) {
                        // handle spaces before the first line
                        if (i === 0) {
                            if (stmt.body[0].leadingComments) {
                                range = stmt.body[0].leadingComments[0].extendedRange;
                                content = sourceCode.substring(range[0], range[1]);
                                if (content[0] === '\n') {
                                    result = [
                                        '{'
                                    ];
                                }
                            }
                            if (!stmt.body[0].leadingComments) {
                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                            }
                        }
                        // handle spaces between lines
                        if (i > 0) {
                            if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                            }
                        }
                    }
                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    if (stmt.body[i].leadingComments && preserveBlankLines) {
                        fragment = that.generateStatement(stmt.body[i], bodyFlags);
                    } else {
                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
                    }
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        if (preserveBlankLines && i < iz - 1) {
                            // don't add a new line if there are leading coments
                            // in the next statement
                            if (!stmt.body[i + 1].leadingComments) {
                                result.push(newline);
                            }
                        } else {
                            result.push(newline);
                        }
                    }
                    if (preserveBlankLines) {
                        // handle spaces after the last line
                        if (i === iz - 1) {
                            if (!stmt.body[i].trailingComments) {
                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                            }
                        }
                    }
                }
            });
            result.push(addIndent('}'));
            return result;
        },
        BreakStatement: function(stmt, flags) {
            if (stmt.label) {
                return 'break ' + stmt.label.name + this.semicolon(flags);
            }
            return 'break' + this.semicolon(flags);
        },
        ContinueStatement: function(stmt, flags) {
            if (stmt.label) {
                return 'continue ' + stmt.label.name + this.semicolon(flags);
            }
            return 'continue' + this.semicolon(flags);
        },
        ClassBody: function(stmt, flags) {
            var result = [
                '{',
                newline
            ], that = this;
            withIndent(function(indent) {
                var i, iz;
                for(i = 0, iz = stmt.body.length; i < iz; ++i){
                    result.push(indent);
                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(newline);
                    }
                }
            });
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },
        ClassDeclaration: function(stmt, flags) {
            var result, fragment;
            result = [
                'class'
            ];
            if (stmt.id) {
                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));
            }
            if (stmt.superClass) {
                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Unary, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(stmt.body, S_TFFT));
            return result;
        },
        DirectiveStatement: function(stmt, flags) {
            if (extra.raw && stmt.raw) {
                return stmt.raw + this.semicolon(flags);
            }
            return escapeDirective(stmt.directive) + this.semicolon(flags);
        },
        DoWhileStatement: function(stmt, flags) {
            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
            result = this.maybeBlockSuffix(stmt.body, result);
            return join(result, [
                'while' + space + '(',
                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                ')' + this.semicolon(flags)
            ]);
        },
        CatchClause: function(stmt, flags) {
            var result, that = this;
            withIndent(function() {
                var guard;
                if (stmt.param) {
                    result = [
                        'catch' + space + '(',
                        that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
                        ')'
                    ];
                    if (stmt.guard) {
                        guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
                        result.splice(2, 0, ' if ', guard);
                    }
                } else {
                    result = [
                        'catch'
                    ];
                }
            });
            result.push(this.maybeBlock(stmt.body, S_TFFF));
            return result;
        },
        DebuggerStatement: function(stmt, flags) {
            return 'debugger' + this.semicolon(flags);
        },
        EmptyStatement: function(stmt, flags) {
            return ';';
        },
        ExportDefaultDeclaration: function(stmt, flags) {
            var result = [
                'export'
            ], bodyFlags;
            bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;
            // export default HoistableDeclaration[Default]
            // export default AssignmentExpression[In] ;
            result = join(result, 'default');
            if (isStatement(stmt.declaration)) {
                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
            } else {
                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
            }
            return result;
        },
        ExportNamedDeclaration: function(stmt, flags) {
            var result = [
                'export'
            ], bodyFlags, that = this;
            bodyFlags = flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF;
            // export VariableStatement
            // export Declaration[Default]
            if (stmt.declaration) {
                return join(result, this.generateStatement(stmt.declaration, bodyFlags));
            }
            // export ExportClause[NoReference] FromClause ;
            // export ExportClause ;
            if (stmt.specifiers) {
                if (stmt.specifiers.length === 0) {
                    result = join(result, '{' + space + '}');
                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
                } else {
                    result = join(result, '{');
                    withIndent(function(indent) {
                        var i, iz;
                        result.push(newline);
                        for(i = 0, iz = stmt.specifiers.length; i < iz; ++i){
                            result.push(indent);
                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                            if (i + 1 < iz) {
                                result.push(',' + newline);
                            }
                        }
                    });
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result.push(newline);
                    }
                    result.push(base + '}');
                }
                if (stmt.source) {
                    result = join(result, [
                        'from' + space,
                        // ModuleSpecifier
                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                        this.semicolon(flags)
                    ]);
                } else {
                    result.push(this.semicolon(flags));
                }
            }
            return result;
        },
        ExportAllDeclaration: function(stmt, flags) {
            // export * FromClause ;
            return [
                'export' + space,
                '*' + space,
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ];
        },
        ExpressionStatement: function(stmt, flags) {
            var result, fragment;
            function isClassPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 5) !== 'class') {
                    return false;
                }
                code = fragment.charCodeAt(5);
                return code === 0x7B /* '{' */  || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
            }
            function isFunctionPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(8);
                return code === 0x28 /* '(' */  || esutils.code.isWhiteSpace(code) || code === 0x2A /* '*' */  || esutils.code.isLineTerminator(code);
            }
            function isAsyncPrefixed(fragment) {
                var code, i, iz;
                if (fragment.slice(0, 5) !== 'async') {
                    return false;
                }
                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
                    return false;
                }
                for(i = 6, iz = fragment.length; i < iz; ++i){
                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
                        break;
                    }
                }
                if (i === iz) {
                    return false;
                }
                if (fragment.slice(i, i + 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(i + 8);
                return code === 0x28 /* '(' */  || esutils.code.isWhiteSpace(code) || code === 0x2A /* '*' */  || esutils.code.isLineTerminator(code);
            }
            result = [
                this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)
            ];
            // 12.4 '{', 'function', 'class' is not allowed in this position.
            // wrap expression with parentheses
            fragment = toSourceNodeWhenNeeded(result).toString();
            if (fragment.charCodeAt(0) === 0x7B /* '{' */  || // ObjectExpression
            isClassPrefixed(fragment) || isFunctionPrefixed(fragment) || isAsyncPrefixed(fragment) || directive && flags & F_DIRECTIVE_CTX && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string') {
                result = [
                    '(',
                    result,
                    ')' + this.semicolon(flags)
                ];
            } else {
                result.push(this.semicolon(flags));
            }
            return result;
        },
        ImportDeclaration: function(stmt, flags) {
            // ES6: 15.2.1 valid import declarations:
            //     - import ImportClause FromClause ;
            //     - import ModuleSpecifier ;
            var result, cursor, that = this;
            // If no ImportClause is present,
            // this should be `import ModuleSpecifier` so skip `from`
            // ModuleSpecifier is StringLiteral.
            if (stmt.specifiers.length === 0) {
                // import ModuleSpecifier ;
                return [
                    'import',
                    space,
                    // ModuleSpecifier
                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                    this.semicolon(flags)
                ];
            }
            // import ImportClause FromClause ;
            result = [
                'import'
            ];
            cursor = 0;
            // ImportedBinding
            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
                result = join(result, [
                    this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                ]);
                ++cursor;
            }
            if (stmt.specifiers[cursor]) {
                if (cursor !== 0) {
                    result.push(',');
                }
                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
                    // NameSpaceImport
                    result = join(result, [
                        space,
                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                    ]);
                } else {
                    // NamedImports
                    result.push(space + '{');
                    if (stmt.specifiers.length - cursor === 1) {
                        // import { ... } from "...";
                        result.push(space);
                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                        result.push(space + '}' + space);
                    } else {
                        // import {
                        //    ...,
                        //    ...,
                        // } from "...";
                        withIndent(function(indent) {
                            var i, iz;
                            result.push(newline);
                            for(i = cursor, iz = stmt.specifiers.length; i < iz; ++i){
                                result.push(indent);
                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                if (i + 1 < iz) {
                                    result.push(',' + newline);
                                }
                            }
                        });
                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                            result.push(newline);
                        }
                        result.push(base + '}' + space);
                    }
                }
            }
            result = join(result, [
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ]);
            return result;
        },
        VariableDeclarator: function(stmt, flags) {
            var itemFlags = flags & F_ALLOW_IN ? E_TTT : E_FTT;
            if (stmt.init) {
                return [
                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
                    space,
                    '=',
                    space,
                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
                ];
            }
            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
        },
        VariableDeclaration: function(stmt, flags) {
            // VariableDeclarator is typed as Statement,
            // but joined with comma (not LineTerminator).
            // So if comment is attached to target node, we should specialize.
            var result, i, iz, node, bodyFlags, that = this;
            result = [
                stmt.kind
            ];
            bodyFlags = flags & F_ALLOW_IN ? S_TFFF : S_FFFF;
            function block() {
                node = stmt.declarations[0];
                if (extra.comment && node.leadingComments) {
                    result.push('\n');
                    result.push(addIndent(that.generateStatement(node, bodyFlags)));
                } else {
                    result.push(noEmptySpace());
                    result.push(that.generateStatement(node, bodyFlags));
                }
                for(i = 1, iz = stmt.declarations.length; i < iz; ++i){
                    node = stmt.declarations[i];
                    if (extra.comment && node.leadingComments) {
                        result.push(',' + newline);
                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
                    } else {
                        result.push(',' + space);
                        result.push(that.generateStatement(node, bodyFlags));
                    }
                }
            }
            if (stmt.declarations.length > 1) {
                withIndent(block);
            } else {
                block();
            }
            result.push(this.semicolon(flags));
            return result;
        },
        ThrowStatement: function(stmt, flags) {
            return [
                join('throw', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),
                this.semicolon(flags)
            ];
        },
        TryStatement: function(stmt, flags) {
            var result, i, iz, guardedHandlers;
            result = [
                'try',
                this.maybeBlock(stmt.block, S_TFFF)
            ];
            result = this.maybeBlockSuffix(stmt.block, result);
            if (stmt.handlers) {
                // old interface
                for(i = 0, iz = stmt.handlers.length; i < iz; ++i){
                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
                    }
                }
            } else {
                guardedHandlers = stmt.guardedHandlers || [];
                for(i = 0, iz = guardedHandlers.length; i < iz; ++i){
                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
                    }
                }
                // new interface
                if (stmt.handler) {
                    if (Array.isArray(stmt.handler)) {
                        for(i = 0, iz = stmt.handler.length; i < iz; ++i){
                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                            if (stmt.finalizer || i + 1 !== iz) {
                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                            }
                        }
                    } else {
                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                        if (stmt.finalizer) {
                            result = this.maybeBlockSuffix(stmt.handler.body, result);
                        }
                    }
                }
            }
            if (stmt.finalizer) {
                result = join(result, [
                    'finally',
                    this.maybeBlock(stmt.finalizer, S_TFFF)
                ]);
            }
            return result;
        },
        SwitchStatement: function(stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function() {
                result = [
                    'switch' + space + '(',
                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
                    ')' + space + '{' + newline
                ];
            });
            if (stmt.cases) {
                bodyFlags = S_TFFF;
                for(i = 0, iz = stmt.cases.length; i < iz; ++i){
                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            }
            result.push(addIndent('}'));
            return result;
        },
        SwitchCase: function(stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function() {
                if (stmt.test) {
                    result = [
                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                        ':'
                    ];
                } else {
                    result = [
                        'default:'
                    ];
                }
                i = 0;
                iz = stmt.consequent.length;
                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
                    result.push(fragment);
                    i = 1;
                }
                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push(newline);
                }
                bodyFlags = S_TFFF;
                for(; i < iz; ++i){
                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
                    result.push(fragment);
                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            });
            return result;
        },
        IfStatement: function(stmt, flags) {
            var result, bodyFlags, semicolonOptional, that = this;
            withIndent(function() {
                result = [
                    'if' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            semicolonOptional = flags & F_SEMICOLON_OPT;
            bodyFlags = S_TFFF;
            if (semicolonOptional) {
                bodyFlags |= F_SEMICOLON_OPT;
            }
            if (stmt.alternate) {
                result.push(this.maybeBlock(stmt.consequent, S_TFFF));
                result = this.maybeBlockSuffix(stmt.consequent, result);
                if (stmt.alternate.type === Syntax.IfStatement) {
                    result = join(result, [
                        'else ',
                        this.generateStatement(stmt.alternate, bodyFlags)
                    ]);
                } else {
                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
                }
            } else {
                result.push(this.maybeBlock(stmt.consequent, bodyFlags));
            }
            return result;
        },
        ForStatement: function(stmt, flags) {
            var result, that = this;
            withIndent(function() {
                result = [
                    'for' + space + '('
                ];
                if (stmt.init) {
                    if (stmt.init.type === Syntax.VariableDeclaration) {
                        result.push(that.generateStatement(stmt.init, S_FFFF));
                    } else {
                        // F_ALLOW_IN becomes false.
                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                        result.push(';');
                    }
                } else {
                    result.push(';');
                }
                if (stmt.test) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
                    result.push(';');
                } else {
                    result.push(';');
                }
                if (stmt.update) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
                    result.push(')');
                } else {
                    result.push(')');
                }
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },
        ForInStatement: function(stmt, flags) {
            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },
        ForOfStatement: function(stmt, flags) {
            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },
        LabeledStatement: function(stmt, flags) {
            return [
                stmt.label.name + ':',
                this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)
            ];
        },
        Program: function(stmt, flags) {
            var result, fragment, i, iz, bodyFlags;
            iz = stmt.body.length;
            result = [
                safeConcatenation && iz > 0 ? '\n' : ''
            ];
            bodyFlags = S_TFTF;
            for(i = 0; i < iz; ++i){
                if (!safeConcatenation && i === iz - 1) {
                    bodyFlags |= F_SEMICOLON_OPT;
                }
                if (preserveBlankLines) {
                    // handle spaces before the first line
                    if (i === 0) {
                        if (!stmt.body[0].leadingComments) {
                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
                        }
                    }
                    // handle spaces between lines
                    if (i > 0) {
                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                        }
                    }
                }
                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
                result.push(fragment);
                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    if (preserveBlankLines) {
                        if (!stmt.body[i + 1].leadingComments) {
                            result.push(newline);
                        }
                    } else {
                        result.push(newline);
                    }
                }
                if (preserveBlankLines) {
                    // handle spaces after the last line
                    if (i === iz - 1) {
                        if (!stmt.body[i].trailingComments) {
                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                        }
                    }
                }
            }
            return result;
        },
        FunctionDeclaration: function(stmt, flags) {
            return [
                generateAsyncPrefix(stmt, true),
                'function',
                generateStarSuffix(stmt) || noEmptySpace(),
                stmt.id ? generateIdentifier(stmt.id) : '',
                this.generateFunctionBody(stmt)
            ];
        },
        ReturnStatement: function(stmt, flags) {
            if (stmt.argument) {
                return [
                    join('return', this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)),
                    this.semicolon(flags)
                ];
            }
            return [
                'return' + this.semicolon(flags)
            ];
        },
        WhileStatement: function(stmt, flags) {
            var result, that = this;
            withIndent(function() {
                result = [
                    'while' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },
        WithStatement: function(stmt, flags) {
            var result, that = this;
            withIndent(function() {
                result = [
                    'with' + space + '(',
                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        }
    };
    merge(CodeGenerator.prototype, CodeGenerator.Statement);
    // Expressions.
    CodeGenerator.Expression = {
        SequenceExpression: function(expr, precedence, flags) {
            var result, i, iz;
            if (Precedence.Sequence < precedence) {
                flags |= F_ALLOW_IN;
            }
            result = [];
            for(i = 0, iz = expr.expressions.length; i < iz; ++i){
                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            return parenthesize(result, Precedence.Sequence, precedence);
        },
        AssignmentExpression: function(expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
        },
        ArrowFunctionExpression: function(expr, precedence, flags) {
            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
        },
        ConditionalExpression: function(expr, precedence, flags) {
            if (Precedence.Conditional < precedence) {
                flags |= F_ALLOW_IN;
            }
            return parenthesize([
                this.generateExpression(expr.test, Precedence.Coalesce, flags),
                space + '?' + space,
                this.generateExpression(expr.consequent, Precedence.Assignment, flags),
                space + ':' + space,
                this.generateExpression(expr.alternate, Precedence.Assignment, flags)
            ], Precedence.Conditional, precedence);
        },
        LogicalExpression: function(expr, precedence, flags) {
            if (expr.operator === '??') {
                flags |= F_FOUND_COALESCE;
            }
            return this.BinaryExpression(expr, precedence, flags);
        },
        BinaryExpression: function(expr, precedence, flags) {
            var result, leftPrecedence, rightPrecedence, currentPrecedence, fragment, leftSource;
            currentPrecedence = BinaryPrecedence[expr.operator];
            leftPrecedence = expr.operator === '**' ? Precedence.Postfix : currentPrecedence;
            rightPrecedence = expr.operator === '**' ? currentPrecedence : currentPrecedence + 1;
            if (currentPrecedence < precedence) {
                flags |= F_ALLOW_IN;
            }
            fragment = this.generateExpression(expr.left, leftPrecedence, flags);
            leftSource = fragment.toString();
            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */  && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {
                result = [
                    fragment,
                    noEmptySpace(),
                    expr.operator
                ];
            } else {
                result = join(fragment, expr.operator);
            }
            fragment = this.generateExpression(expr.right, rightPrecedence, flags);
            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' || expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                result.push(noEmptySpace());
                result.push(fragment);
            } else {
                result = join(result, fragment);
            }
            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
                return [
                    '(',
                    result,
                    ')'
                ];
            }
            if ((expr.operator === '||' || expr.operator === '&&') && flags & F_FOUND_COALESCE) {
                return [
                    '(',
                    result,
                    ')'
                ];
            }
            return parenthesize(result, currentPrecedence, precedence);
        },
        CallExpression: function(expr, precedence, flags) {
            var result, i, iz;
            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [
                this.generateExpression(expr.callee, Precedence.Call, E_TTF)
            ];
            if (expr.optional) {
                result.push('?.');
            }
            result.push('(');
            for(i = 0, iz = expr['arguments'].length; i < iz; ++i){
                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            result.push(')');
            if (!(flags & F_ALLOW_CALL)) {
                return [
                    '(',
                    result,
                    ')'
                ];
            }
            return parenthesize(result, Precedence.Call, precedence);
        },
        ChainExpression: function(expr, precedence, flags) {
            if (Precedence.OptionalChaining < precedence) {
                flags |= F_ALLOW_CALL;
            }
            var result = this.generateExpression(expr.expression, Precedence.OptionalChaining, flags);
            return parenthesize(result, Precedence.OptionalChaining, precedence);
        },
        NewExpression: function(expr, precedence, flags) {
            var result, length, i, iz, itemFlags;
            length = expr['arguments'].length;
            // F_ALLOW_CALL becomes false.
            // F_ALLOW_UNPARATH_NEW may become false.
            itemFlags = flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0 ? E_TFT : E_TFF;
            result = join('new', this.generateExpression(expr.callee, Precedence.New, itemFlags));
            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
                result.push('(');
                for(i = 0, iz = length; i < iz; ++i){
                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + space);
                    }
                }
                result.push(')');
            }
            return parenthesize(result, Precedence.New, precedence);
        },
        MemberExpression: function(expr, precedence, flags) {
            var result, fragment;
            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [
                this.generateExpression(expr.object, Precedence.Call, flags & F_ALLOW_CALL ? E_TTF : E_TFF)
            ];
            if (expr.computed) {
                if (expr.optional) {
                    result.push('?.');
                }
                result.push('[');
                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
                result.push(']');
            } else {
                if (!expr.optional && expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
                    fragment = toSourceNodeWhenNeeded(result).toString();
                    // When the following conditions are all true,
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // we should add a floating point.
                    if (fragment.indexOf('.') < 0 && !/[eExX]/.test(fragment) && esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) && !(fragment.length >= 2 && fragment.charCodeAt(0) === 48) // '0'
                    ) {
                        result.push(' ');
                    }
                }
                result.push(expr.optional ? '?.' : '.');
                result.push(generateIdentifier(expr.property));
            }
            return parenthesize(result, Precedence.Member, precedence);
        },
        MetaProperty: function(expr, precedence, flags) {
            var result;
            result = [];
            result.push(typeof expr.meta === "string" ? expr.meta : generateIdentifier(expr.meta));
            result.push('.');
            result.push(typeof expr.property === "string" ? expr.property : generateIdentifier(expr.property));
            return parenthesize(result, Precedence.Member, precedence);
        },
        UnaryExpression: function(expr, precedence, flags) {
            var result, fragment, rightCharCode, leftSource, leftCharCode;
            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);
            if (space === '') {
                result = join(expr.operator, fragment);
            } else {
                result = [
                    expr.operator
                ];
                if (expr.operator.length > 2) {
                    // delete, void, typeof
                    // get `typeof []`, not `typeof[]`
                    result = join(result, fragment);
                } else {
                    // Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    leftSource = toSourceNodeWhenNeeded(result).toString();
                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                    rightCharCode = fragment.toString().charCodeAt(0);
                    if ((leftCharCode === 0x2B /* + */  || leftCharCode === 0x2D /* - */ ) && leftCharCode === rightCharCode || esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode)) {
                        result.push(noEmptySpace());
                        result.push(fragment);
                    } else {
                        result.push(fragment);
                    }
                }
            }
            return parenthesize(result, Precedence.Unary, precedence);
        },
        YieldExpression: function(expr, precedence, flags) {
            var result;
            if (expr.delegate) {
                result = 'yield*';
            } else {
                result = 'yield';
            }
            if (expr.argument) {
                result = join(result, this.generateExpression(expr.argument, Precedence.Yield, E_TTT));
            }
            return parenthesize(result, Precedence.Yield, precedence);
        },
        AwaitExpression: function(expr, precedence, flags) {
            var result = join(expr.all ? 'await*' : 'await', this.generateExpression(expr.argument, Precedence.Await, E_TTT));
            return parenthesize(result, Precedence.Await, precedence);
        },
        UpdateExpression: function(expr, precedence, flags) {
            if (expr.prefix) {
                return parenthesize([
                    expr.operator,
                    this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
                ], Precedence.Unary, precedence);
            }
            return parenthesize([
                this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
                expr.operator
            ], Precedence.Postfix, precedence);
        },
        FunctionExpression: function(expr, precedence, flags) {
            var result = [
                generateAsyncPrefix(expr, true),
                'function'
            ];
            if (expr.id) {
                result.push(generateStarSuffix(expr) || noEmptySpace());
                result.push(generateIdentifier(expr.id));
            } else {
                result.push(generateStarSuffix(expr) || space);
            }
            result.push(this.generateFunctionBody(expr));
            return result;
        },
        ArrayPattern: function(expr, precedence, flags) {
            return this.ArrayExpression(expr, precedence, flags, true);
        },
        ArrayExpression: function(expr, precedence, flags, isPattern) {
            var result, multiline, that = this;
            if (!expr.elements.length) {
                return '[]';
            }
            multiline = isPattern ? false : expr.elements.length > 1;
            result = [
                '[',
                multiline ? newline : ''
            ];
            withIndent(function(indent) {
                var i, iz;
                for(i = 0, iz = expr.elements.length; i < iz; ++i){
                    if (!expr.elements[i]) {
                        if (multiline) {
                            result.push(indent);
                        }
                        if (i + 1 === iz) {
                            result.push(',');
                        }
                    } else {
                        result.push(multiline ? indent : '');
                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
                    }
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push(']');
            return result;
        },
        RestElement: function(expr, precedence, flags) {
            return '...' + this.generatePattern(expr.argument);
        },
        ClassExpression: function(expr, precedence, flags) {
            var result, fragment;
            result = [
                'class'
            ];
            if (expr.id) {
                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
            }
            if (expr.superClass) {
                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Unary, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(expr.body, S_TFFT));
            return result;
        },
        MethodDefinition: function(expr, precedence, flags) {
            var result, fragment;
            if (expr['static']) {
                result = [
                    'static' + space
                ];
            } else {
                result = [];
            }
            if (expr.kind === 'get' || expr.kind === 'set') {
                fragment = [
                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
                    this.generateFunctionBody(expr.value)
                ];
            } else {
                fragment = [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }
            return join(result, fragment);
        },
        Property: function(expr, precedence, flags) {
            if (expr.kind === 'get' || expr.kind === 'set') {
                return [
                    expr.kind,
                    noEmptySpace(),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }
            if (expr.shorthand) {
                if (expr.value.type === "AssignmentPattern") {
                    return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);
                }
                return this.generatePropertyKey(expr.key, expr.computed);
            }
            if (expr.method) {
                return [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }
            return [
                this.generatePropertyKey(expr.key, expr.computed),
                ':' + space,
                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
            ];
        },
        ObjectExpression: function(expr, precedence, flags) {
            var multiline, result, fragment, that = this;
            if (!expr.properties.length) {
                return '{}';
            }
            multiline = expr.properties.length > 1;
            withIndent(function() {
                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
            });
            if (!multiline) {
                // issues 4
                // Do not transform from
                //   dejavu.Class.declare({
                //       method2: function () {}
                //   });
                // to
                //   dejavu.Class.declare({method2: function () {
                //       }});
                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    return [
                        '{',
                        space,
                        fragment,
                        space,
                        '}'
                    ];
                }
            }
            withIndent(function(indent) {
                var i, iz;
                result = [
                    '{',
                    newline,
                    indent,
                    fragment
                ];
                if (multiline) {
                    result.push(',' + newline);
                    for(i = 1, iz = expr.properties.length; i < iz; ++i){
                        result.push(indent);
                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                        if (i + 1 < iz) {
                            result.push(',' + newline);
                        }
                    }
                }
            });
            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },
        AssignmentPattern: function(expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);
        },
        ObjectPattern: function(expr, precedence, flags) {
            var result, i, iz, multiline, property, that = this;
            if (!expr.properties.length) {
                return '{}';
            }
            multiline = false;
            if (expr.properties.length === 1) {
                property = expr.properties[0];
                if (property.type === Syntax.Property && property.value.type !== Syntax.Identifier) {
                    multiline = true;
                }
            } else {
                for(i = 0, iz = expr.properties.length; i < iz; ++i){
                    property = expr.properties[i];
                    if (property.type === Syntax.Property && !property.shorthand) {
                        multiline = true;
                        break;
                    }
                }
            }
            result = [
                '{',
                multiline ? newline : ''
            ];
            withIndent(function(indent) {
                var i, iz;
                for(i = 0, iz = expr.properties.length; i < iz; ++i){
                    result.push(multiline ? indent : '');
                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push('}');
            return result;
        },
        ThisExpression: function(expr, precedence, flags) {
            return 'this';
        },
        Super: function(expr, precedence, flags) {
            return 'super';
        },
        Identifier: function(expr, precedence, flags) {
            return generateIdentifier(expr);
        },
        ImportDefaultSpecifier: function(expr, precedence, flags) {
            return generateIdentifier(expr.id || expr.local);
        },
        ImportNamespaceSpecifier: function(expr, precedence, flags) {
            var result = [
                '*'
            ];
            var id = expr.id || expr.local;
            if (id) {
                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
            }
            return result;
        },
        ImportSpecifier: function(expr, precedence, flags) {
            var imported = expr.imported;
            var result = [
                imported.name
            ];
            var local = expr.local;
            if (local && local.name !== imported.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));
            }
            return result;
        },
        ExportSpecifier: function(expr, precedence, flags) {
            var local = expr.local;
            var result = [
                local.name
            ];
            var exported = expr.exported;
            if (exported && exported.name !== local.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));
            }
            return result;
        },
        Literal: function(expr, precedence, flags) {
            var raw;
            if (expr.hasOwnProperty('raw') && parse && extra.raw) {
                try {
                    raw = parse(expr.raw).body[0].expression;
                    if (raw.type === Syntax.Literal) {
                        if (raw.value === expr.value) {
                            return expr.raw;
                        }
                    }
                } catch (e) {
                // not use raw property
                }
            }
            if (expr.regex) {
                return '/' + expr.regex.pattern + '/' + expr.regex.flags;
            }
            if (typeof expr.value === 'bigint') {
                return expr.value.toString() + 'n';
            }
            // `expr.value` can be null if `expr.bigint` exists. We need to check
            // `expr.bigint` first.
            if (expr.bigint) {
                return expr.bigint + 'n';
            }
            if (expr.value === null) {
                return 'null';
            }
            if (typeof expr.value === 'string') {
                return escapeString(expr.value);
            }
            if (typeof expr.value === 'number') {
                return generateNumber(expr.value);
            }
            if (typeof expr.value === 'boolean') {
                return expr.value ? 'true' : 'false';
            }
            return generateRegExp(expr.value);
        },
        GeneratorExpression: function(expr, precedence, flags) {
            return this.ComprehensionExpression(expr, precedence, flags);
        },
        ComprehensionExpression: function(expr, precedence, flags) {
            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6
            var result, i, iz, fragment, that = this;
            result = expr.type === Syntax.GeneratorExpression ? [
                '('
            ] : [
                '['
            ];
            if (extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                result.push(fragment);
            }
            if (expr.blocks) {
                withIndent(function() {
                    for(i = 0, iz = expr.blocks.length; i < iz; ++i){
                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                            result = join(result, fragment);
                        } else {
                            result.push(fragment);
                        }
                    }
                });
            }
            if (expr.filter) {
                result = join(result, 'if' + space);
                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
                result = join(result, [
                    '(',
                    fragment,
                    ')'
                ]);
            }
            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                result = join(result, fragment);
            }
            result.push(expr.type === Syntax.GeneratorExpression ? ')' : ']');
            return result;
        },
        ComprehensionBlock: function(expr, precedence, flags) {
            var fragment;
            if (expr.left.type === Syntax.VariableDeclaration) {
                fragment = [
                    expr.left.kind,
                    noEmptySpace(),
                    this.generateStatement(expr.left.declarations[0], S_FFFF)
                ];
            } else {
                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
            }
            fragment = join(fragment, expr.of ? 'of' : 'in');
            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));
            return [
                'for' + space + '(',
                fragment,
                ')'
            ];
        },
        SpreadElement: function(expr, precedence, flags) {
            return [
                '...',
                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
            ];
        },
        TaggedTemplateExpression: function(expr, precedence, flags) {
            var itemFlags = E_TTF;
            if (!(flags & F_ALLOW_CALL)) {
                itemFlags = E_TFF;
            }
            var result = [
                this.generateExpression(expr.tag, Precedence.Call, itemFlags),
                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
            ];
            return parenthesize(result, Precedence.TaggedTemplate, precedence);
        },
        TemplateElement: function(expr, precedence, flags) {
            // Don't use "cooked". Since tagged template can use raw template
            // representation. So if we do so, it breaks the script semantics.
            return expr.value.raw;
        },
        TemplateLiteral: function(expr, precedence, flags) {
            var result, i, iz;
            result = [
                '`'
            ];
            for(i = 0, iz = expr.quasis.length; i < iz; ++i){
                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
                if (i + 1 < iz) {
                    result.push('${' + space);
                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
                    result.push(space + '}');
                }
            }
            result.push('`');
            return result;
        },
        ModuleSpecifier: function(expr, precedence, flags) {
            return this.Literal(expr, precedence, flags);
        },
        ImportExpression: function(expr, precedence, flag) {
            return parenthesize([
                'import(',
                this.generateExpression(expr.source, Precedence.Assignment, E_TTT),
                ')'
            ], Precedence.Call, precedence);
        }
    };
    merge(CodeGenerator.prototype, CodeGenerator.Expression);
    CodeGenerator.prototype.generateExpression = function(expr, precedence, flags) {
        var result, type;
        type = expr.type || Syntax.Property;
        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
            return generateVerbatim(expr, precedence);
        }
        result = this[type](expr, precedence, flags);
        if (extra.comment) {
            result = addComments(expr, result);
        }
        return toSourceNodeWhenNeeded(result, expr);
    };
    CodeGenerator.prototype.generateStatement = function(stmt, flags) {
        var result, fragment;
        result = this[stmt.type](stmt, flags);
        // Attach comments
        if (extra.comment) {
            result = addComments(stmt, result);
        }
        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' && fragment.charAt(fragment.length - 1) === '\n') {
            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
        }
        return toSourceNodeWhenNeeded(result, stmt);
    };
    function generateInternal(node) {
        var codegen;
        codegen = new CodeGenerator();
        if (isStatement(node)) {
            return codegen.generateStatement(node, S_TFFF);
        }
        if (isExpression(node)) {
            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
        }
        throw new Error('Unknown node type: ' + node.type);
    }
    function generate(node, options) {
        var defaultOptions = getDefaultOptions(), result, pair;
        if (options != null) {
            // Obsolete options
            //
            //   `options.indent`
            //   `options.base`
            //
            // Instead of them, we can use `option.format.indent`.
            if (typeof options.indent === 'string') {
                defaultOptions.format.indent.style = options.indent;
            }
            if (typeof options.base === 'number') {
                defaultOptions.format.indent.base = options.base;
            }
            options = updateDeeply(defaultOptions, options);
            indent = options.format.indent.style;
            if (typeof options.base === 'string') {
                base = options.base;
            } else {
                base = stringRepeat(indent, options.format.indent.base);
            }
        } else {
            options = defaultOptions;
            indent = options.format.indent.style;
            base = stringRepeat(indent, options.format.indent.base);
        }
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) {
            newline = space = indent = base = '';
        }
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        sourceCode = options.sourceCode;
        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
        extra = options;
        if (sourceMap) {
            if (!exports.browser) {
                // We assume environment is node.js
                // And prevent from including source-map by browserify
                SourceNode = __turbopack_context__.r("[project]/node_modules/source-map/source-map.js [app-client] (ecmascript)").SourceNode;
            } else {
                SourceNode = global.sourceMap.SourceNode;
            }
        }
        result = generateInternal(node);
        if (!sourceMap) {
            pair = {
                code: result.toString(),
                map: null
            };
            return options.sourceMapWithCode ? pair : pair.code;
        }
        pair = result.toStringWithSourceMap({
            file: options.file,
            sourceRoot: options.sourceMapRoot
        });
        if (options.sourceContent) {
            pair.map.setSourceContent(options.sourceMap, options.sourceContent);
        }
        if (options.sourceMapWithCode) {
            return pair;
        }
        return pair.map.toString();
    }
    FORMAT_MINIFY = {
        indent: {
            style: '',
            base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
    };
    FORMAT_DEFAULTS = getDefaultOptions().format;
    exports.version = __turbopack_context__.r("[project]/node_modules/escodegen/package.json (json)").version;
    exports.generate = generate;
    exports.attachComments = estraverse.attachComments;
    exports.Precedence = updateDeeply({}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
})(); /* vim: set sw=4 ts=4 et tw=80 : */ 
}}),
"[project]/node_modules/estraverse/estraverse.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ /*jslint vars:false, bitwise:true*/ /*jshint indent:4*/ /*global exports:true*/ (function clone(exports1) {
    'use strict';
    var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;
    function deepCopy(obj) {
        var ret = {}, key, val;
        for(key in obj){
            if (obj.hasOwnProperty(key)) {
                val = obj[key];
                if (typeof val === 'object' && val !== null) {
                    ret[key] = deepCopy(val);
                } else {
                    ret[key] = val;
                }
            }
        }
        return ret;
    }
    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License
    function upperBound(array, func) {
        var diff, len, i, current;
        len = array.length;
        i = 0;
        while(len){
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                len = diff;
            } else {
                i = current + 1;
                len -= diff + 1;
            }
        }
        return i;
    }
    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ChainExpression: 'ChainExpression',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',
        ComprehensionExpression: 'ComprehensionExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportExpression: 'ImportExpression',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        PrivateIdentifier: 'PrivateIdentifier',
        Program: 'Program',
        Property: 'Property',
        PropertyDefinition: 'PropertyDefinition',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };
    VisitorKeys = {
        AssignmentExpression: [
            'left',
            'right'
        ],
        AssignmentPattern: [
            'left',
            'right'
        ],
        ArrayExpression: [
            'elements'
        ],
        ArrayPattern: [
            'elements'
        ],
        ArrowFunctionExpression: [
            'params',
            'body'
        ],
        AwaitExpression: [
            'argument'
        ],
        BlockStatement: [
            'body'
        ],
        BinaryExpression: [
            'left',
            'right'
        ],
        BreakStatement: [
            'label'
        ],
        CallExpression: [
            'callee',
            'arguments'
        ],
        CatchClause: [
            'param',
            'body'
        ],
        ChainExpression: [
            'expression'
        ],
        ClassBody: [
            'body'
        ],
        ClassDeclaration: [
            'id',
            'superClass',
            'body'
        ],
        ClassExpression: [
            'id',
            'superClass',
            'body'
        ],
        ComprehensionBlock: [
            'left',
            'right'
        ],
        ComprehensionExpression: [
            'blocks',
            'filter',
            'body'
        ],
        ConditionalExpression: [
            'test',
            'consequent',
            'alternate'
        ],
        ContinueStatement: [
            'label'
        ],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: [
            'body',
            'test'
        ],
        EmptyStatement: [],
        ExportAllDeclaration: [
            'source'
        ],
        ExportDefaultDeclaration: [
            'declaration'
        ],
        ExportNamedDeclaration: [
            'declaration',
            'specifiers',
            'source'
        ],
        ExportSpecifier: [
            'exported',
            'local'
        ],
        ExpressionStatement: [
            'expression'
        ],
        ForStatement: [
            'init',
            'test',
            'update',
            'body'
        ],
        ForInStatement: [
            'left',
            'right',
            'body'
        ],
        ForOfStatement: [
            'left',
            'right',
            'body'
        ],
        FunctionDeclaration: [
            'id',
            'params',
            'body'
        ],
        FunctionExpression: [
            'id',
            'params',
            'body'
        ],
        GeneratorExpression: [
            'blocks',
            'filter',
            'body'
        ],
        Identifier: [],
        IfStatement: [
            'test',
            'consequent',
            'alternate'
        ],
        ImportExpression: [
            'source'
        ],
        ImportDeclaration: [
            'specifiers',
            'source'
        ],
        ImportDefaultSpecifier: [
            'local'
        ],
        ImportNamespaceSpecifier: [
            'local'
        ],
        ImportSpecifier: [
            'imported',
            'local'
        ],
        Literal: [],
        LabeledStatement: [
            'label',
            'body'
        ],
        LogicalExpression: [
            'left',
            'right'
        ],
        MemberExpression: [
            'object',
            'property'
        ],
        MetaProperty: [
            'meta',
            'property'
        ],
        MethodDefinition: [
            'key',
            'value'
        ],
        ModuleSpecifier: [],
        NewExpression: [
            'callee',
            'arguments'
        ],
        ObjectExpression: [
            'properties'
        ],
        ObjectPattern: [
            'properties'
        ],
        PrivateIdentifier: [],
        Program: [
            'body'
        ],
        Property: [
            'key',
            'value'
        ],
        PropertyDefinition: [
            'key',
            'value'
        ],
        RestElement: [
            'argument'
        ],
        ReturnStatement: [
            'argument'
        ],
        SequenceExpression: [
            'expressions'
        ],
        SpreadElement: [
            'argument'
        ],
        Super: [],
        SwitchStatement: [
            'discriminant',
            'cases'
        ],
        SwitchCase: [
            'test',
            'consequent'
        ],
        TaggedTemplateExpression: [
            'tag',
            'quasi'
        ],
        TemplateElement: [],
        TemplateLiteral: [
            'quasis',
            'expressions'
        ],
        ThisExpression: [],
        ThrowStatement: [
            'argument'
        ],
        TryStatement: [
            'block',
            'handler',
            'finalizer'
        ],
        UnaryExpression: [
            'argument'
        ],
        UpdateExpression: [
            'argument'
        ],
        VariableDeclaration: [
            'declarations'
        ],
        VariableDeclarator: [
            'id',
            'init'
        ],
        WhileStatement: [
            'test',
            'body'
        ],
        WithStatement: [
            'object',
            'body'
        ],
        YieldExpression: [
            'argument'
        ]
    };
    // unique id
    BREAK = {};
    SKIP = {};
    REMOVE = {};
    VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
    };
    function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
    }
    Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
    };
    Reference.prototype.remove = function remove() {
        if (Array.isArray(this.parent)) {
            this.parent.splice(this.key, 1);
            return true;
        } else {
            this.replace(null);
            return false;
        }
    };
    function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
    }
    function Controller() {}
    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;
        function addToPath(result, path) {
            if (Array.isArray(path)) {
                for(j = 0, jz = path.length; j < jz; ++j){
                    result.push(path[j]);
                }
            } else {
                result.push(path);
            }
        }
        // root node
        if (!this.__current.path) {
            return null;
        }
        // first node is sentinel, second node is root element
        result = [];
        for(i = 2, iz = this.__leavelist.length; i < iz; ++i){
            element = this.__leavelist[i];
            addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
    };
    // API:
    // return type of current node
    Controller.prototype.type = function() {
        var node = this.current();
        return node.type || this.__current.wrap;
    };
    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
        var i, iz, result;
        // first node is sentinel
        result = [];
        for(i = 1, iz = this.__leavelist.length; i < iz; ++i){
            result.push(this.__leavelist[i].node);
        }
        return result;
    };
    // API:
    // return current node
    Controller.prototype.current = function current() {
        return this.__current.node;
    };
    Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;
        result = undefined;
        previous = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;
        return result;
    };
    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
    };
    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function() {
        this.notify(SKIP);
    };
    // API:
    // break traversals
    Controller.prototype['break'] = function() {
        this.notify(BREAK);
    };
    // API:
    // remove node
    Controller.prototype.remove = function() {
        this.notify(REMOVE);
    };
    Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = null;
        if (visitor.fallback === 'iteration') {
            this.__fallback = Object.keys;
        } else if (typeof visitor.fallback === 'function') {
            this.__fallback = visitor.fallback;
        }
        this.__keys = VisitorKeys;
        if (visitor.keys) {
            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);
        }
    };
    function isNode(node) {
        if (node == null) {
            return false;
        }
        return typeof node === 'object' && typeof node.type === 'string';
    }
    function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
    }
    function candidateExistsInLeaveList(leavelist, candidate) {
        for(var i = leavelist.length - 1; i >= 0; --i){
            if (leavelist[i].node === candidate) {
                return true;
            }
        }
        return false;
    }
    Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
        this.__initialize(root, visitor);
        sentinel = {};
        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;
        // initialize
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));
        while(worklist.length){
            element = worklist.pop();
            if (element === sentinel) {
                element = leavelist.pop();
                ret = this.__execute(visitor.leave, element);
                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                continue;
            }
            if (element.node) {
                ret = this.__execute(visitor.enter, element);
                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                worklist.push(sentinel);
                leavelist.push(element);
                if (this.__state === SKIP || ret === SKIP) {
                    continue;
                }
                node = element.node;
                nodeType = node.type || element.wrap;
                candidates = this.__keys[nodeType];
                if (!candidates) {
                    if (this.__fallback) {
                        candidates = this.__fallback(node);
                    } else {
                        throw new Error('Unknown node type ' + nodeType + '.');
                    }
                }
                current = candidates.length;
                while((current -= 1) >= 0){
                    key = candidates[current];
                    candidate = node[key];
                    if (!candidate) {
                        continue;
                    }
                    if (Array.isArray(candidate)) {
                        current2 = candidate.length;
                        while((current2 -= 1) >= 0){
                            if (!candidate[current2]) {
                                continue;
                            }
                            if (candidateExistsInLeaveList(leavelist, candidate[current2])) {
                                continue;
                            }
                            if (isProperty(nodeType, candidates[current])) {
                                element = new Element(candidate[current2], [
                                    key,
                                    current2
                                ], 'Property', null);
                            } else if (isNode(candidate[current2])) {
                                element = new Element(candidate[current2], [
                                    key,
                                    current2
                                ], null, null);
                            } else {
                                continue;
                            }
                            worklist.push(element);
                        }
                    } else if (isNode(candidate)) {
                        if (candidateExistsInLeaveList(leavelist, candidate)) {
                            continue;
                        }
                        worklist.push(new Element(candidate, key, null, null));
                    }
                }
            }
        }
    };
    Controller.prototype.replace = function replace(root, visitor) {
        var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
        function removeElem(element) {
            var i, key, nextElem, parent;
            if (element.ref.remove()) {
                // When the reference is an element of an array.
                key = element.ref.key;
                parent = element.ref.parent;
                // If removed from array, then decrease following items' keys.
                i = worklist.length;
                while(i--){
                    nextElem = worklist[i];
                    if (nextElem.ref && nextElem.ref.parent === parent) {
                        if (nextElem.ref.key < key) {
                            break;
                        }
                        --nextElem.ref.key;
                    }
                }
            }
        }
        this.__initialize(root, visitor);
        sentinel = {};
        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;
        // initialize
        outer = {
            root: root
        };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);
        while(worklist.length){
            element = worklist.pop();
            if (element === sentinel) {
                element = leavelist.pop();
                target = this.__execute(visitor.leave, element);
                // node may be replaced with null,
                // so distinguish between undefined and null in this place
                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                    // replace
                    element.ref.replace(target);
                }
                if (this.__state === REMOVE || target === REMOVE) {
                    removeElem(element);
                }
                if (this.__state === BREAK || target === BREAK) {
                    return outer.root;
                }
                continue;
            }
            target = this.__execute(visitor.enter, element);
            // node may be replaced with null,
            // so distinguish between undefined and null in this place
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                // replace
                element.ref.replace(target);
                element.node = target;
            }
            if (this.__state === REMOVE || target === REMOVE) {
                removeElem(element);
                element.node = null;
            }
            if (this.__state === BREAK || target === BREAK) {
                return outer.root;
            }
            // node may be null
            node = element.node;
            if (!node) {
                continue;
            }
            worklist.push(sentinel);
            leavelist.push(element);
            if (this.__state === SKIP || target === SKIP) {
                continue;
            }
            nodeType = node.type || element.wrap;
            candidates = this.__keys[nodeType];
            if (!candidates) {
                if (this.__fallback) {
                    candidates = this.__fallback(node);
                } else {
                    throw new Error('Unknown node type ' + nodeType + '.');
                }
            }
            current = candidates.length;
            while((current -= 1) >= 0){
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                    continue;
                }
                if (Array.isArray(candidate)) {
                    current2 = candidate.length;
                    while((current2 -= 1) >= 0){
                        if (!candidate[current2]) {
                            continue;
                        }
                        if (isProperty(nodeType, candidates[current])) {
                            element = new Element(candidate[current2], [
                                key,
                                current2
                            ], 'Property', new Reference(candidate, current2));
                        } else if (isNode(candidate[current2])) {
                            element = new Element(candidate[current2], [
                                key,
                                current2
                            ], null, new Reference(candidate, current2));
                        } else {
                            continue;
                        }
                        worklist.push(element);
                    }
                } else if (isNode(candidate)) {
                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                }
            }
        }
        return outer.root;
    };
    function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
    }
    function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
    }
    function extendCommentRange(comment, tokens) {
        var target;
        target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
        });
        comment.extendedRange = [
            comment.range[0],
            comment.range[1]
        ];
        if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
        }
        target -= 1;
        if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
        }
        return comment;
    }
    function attachComments(tree, providedComments, tokens) {
        // At first, we should calculate extended comment ranges.
        var comments = [], comment, len, i, cursor;
        if (!tree.range) {
            throw new Error('attachComments needs range information');
        }
        // tokens array is empty, we attach comments to tree as 'leadingComments'
        if (!tokens.length) {
            if (providedComments.length) {
                for(i = 0, len = providedComments.length; i < len; i += 1){
                    comment = deepCopy(providedComments[i]);
                    comment.extendedRange = [
                        0,
                        tree.range[0]
                    ];
                    comments.push(comment);
                }
                tree.leadingComments = comments;
            }
            return tree;
        }
        for(i = 0, len = providedComments.length; i < len; i += 1){
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }
        // This is based on John Freeman's implementation.
        cursor = 0;
        traverse(tree, {
            enter: function(node) {
                var comment;
                while(cursor < comments.length){
                    comment = comments[cursor];
                    if (comment.extendedRange[1] > node.range[0]) {
                        break;
                    }
                    if (comment.extendedRange[1] === node.range[0]) {
                        if (!node.leadingComments) {
                            node.leadingComments = [];
                        }
                        node.leadingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }
                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }
                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });
        cursor = 0;
        traverse(tree, {
            leave: function(node) {
                var comment;
                while(cursor < comments.length){
                    comment = comments[cursor];
                    if (node.range[1] < comment.extendedRange[0]) {
                        break;
                    }
                    if (node.range[1] === comment.extendedRange[0]) {
                        if (!node.trailingComments) {
                            node.trailingComments = [];
                        }
                        node.trailingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }
                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }
                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });
        return tree;
    }
    exports1.Syntax = Syntax;
    exports1.traverse = traverse;
    exports1.replace = replace;
    exports1.attachComments = attachComments;
    exports1.VisitorKeys = VisitorKeys;
    exports1.VisitorOption = VisitorOption;
    exports1.Controller = Controller;
    exports1.cloneEnvironment = function() {
        return clone({});
    };
    return exports1;
})(exports); /* vim: set sw=4 ts=4 et tw=80 : */ 
}}),
"[project]/node_modules/esutils/lib/ast.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ (function() {
    'use strict';
    function isExpression(node) {
        if (node == null) {
            return false;
        }
        switch(node.type){
            case 'ArrayExpression':
            case 'AssignmentExpression':
            case 'BinaryExpression':
            case 'CallExpression':
            case 'ConditionalExpression':
            case 'FunctionExpression':
            case 'Identifier':
            case 'Literal':
            case 'LogicalExpression':
            case 'MemberExpression':
            case 'NewExpression':
            case 'ObjectExpression':
            case 'SequenceExpression':
            case 'ThisExpression':
            case 'UnaryExpression':
            case 'UpdateExpression':
                return true;
        }
        return false;
    }
    function isIterationStatement(node) {
        if (node == null) {
            return false;
        }
        switch(node.type){
            case 'DoWhileStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'WhileStatement':
                return true;
        }
        return false;
    }
    function isStatement(node) {
        if (node == null) {
            return false;
        }
        switch(node.type){
            case 'BlockStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
            case 'DebuggerStatement':
            case 'DoWhileStatement':
            case 'EmptyStatement':
            case 'ExpressionStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'IfStatement':
            case 'LabeledStatement':
            case 'ReturnStatement':
            case 'SwitchStatement':
            case 'ThrowStatement':
            case 'TryStatement':
            case 'VariableDeclaration':
            case 'WhileStatement':
            case 'WithStatement':
                return true;
        }
        return false;
    }
    function isSourceElement(node) {
        return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }
    function trailingStatement(node) {
        switch(node.type){
            case 'IfStatement':
                if (node.alternate != null) {
                    return node.alternate;
                }
                return node.consequent;
            case 'LabeledStatement':
            case 'ForStatement':
            case 'ForInStatement':
            case 'WhileStatement':
            case 'WithStatement':
                return node.body;
        }
        return null;
    }
    function isProblematicIfStatement(node) {
        var current;
        if (node.type !== 'IfStatement') {
            return false;
        }
        if (node.alternate == null) {
            return false;
        }
        current = node.consequent;
        do {
            if (current.type === 'IfStatement') {
                if (current.alternate == null) {
                    return true;
                }
            }
            current = trailingStatement(current);
        }while (current)
        return false;
    }
    module.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,
        trailingStatement: trailingStatement
    };
})(); /* vim: set sw=4 ts=4 et tw=80 : */ 
}}),
"[project]/node_modules/esutils/lib/code.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ (function() {
    'use strict';
    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;
    // See `tools/generate-identifier-regex.js`.
    ES5Regex = {
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };
    ES6Regex = {
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };
    function isDecimalDigit(ch) {
        return 0x30 <= ch && ch <= 0x39; // 0..9
    }
    function isHexDigit(ch) {
        return 0x30 <= ch && ch <= 0x39 || // 0..9
        0x61 <= ch && ch <= 0x66 || // a..f
        0x41 <= ch && ch <= 0x46; // A..F
    }
    function isOctalDigit(ch) {
        return ch >= 0x30 && ch <= 0x37; // 0..7
    }
    // 7.2 White Space
    NON_ASCII_WHITESPACES = [
        0x1680,
        0x2000,
        0x2001,
        0x2002,
        0x2003,
        0x2004,
        0x2005,
        0x2006,
        0x2007,
        0x2008,
        0x2009,
        0x200A,
        0x202F,
        0x205F,
        0x3000,
        0xFEFF
    ];
    function isWhiteSpace(ch) {
        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
    }
    // 7.3 Line Terminators
    function isLineTerminator(ch) {
        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    }
    // 7.6 Identifier Names and Identifiers
    function fromCodePoint(cp) {
        if (cp <= 0xFFFF) {
            return String.fromCharCode(cp);
        }
        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
        var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);
        return cu1 + cu2;
    }
    IDENTIFIER_START = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch){
        IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A || // a..z
        ch >= 0x41 && ch <= 0x5A || // A..Z
        ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)
    }
    IDENTIFIER_PART = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch){
        IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A || // a..z
        ch >= 0x41 && ch <= 0x5A || // A..Z
        ch >= 0x30 && ch <= 0x39 || // 0..9
        ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)
    }
    function isIdentifierStartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }
    function isIdentifierPartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }
    function isIdentifierStartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }
    function isIdentifierPartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }
    module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStartES5: isIdentifierStartES5,
        isIdentifierPartES5: isIdentifierPartES5,
        isIdentifierStartES6: isIdentifierStartES6,
        isIdentifierPartES6: isIdentifierPartES6
    };
})(); /* vim: set sw=4 ts=4 et tw=80 : */ 
}}),
"[project]/node_modules/esutils/lib/keyword.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ (function() {
    'use strict';
    var code = __turbopack_context__.r("[project]/node_modules/esutils/lib/code.js [app-client] (ecmascript)");
    function isStrictModeReservedWordES6(id) {
        switch(id){
            case 'implements':
            case 'interface':
            case 'package':
            case 'private':
            case 'protected':
            case 'public':
            case 'static':
            case 'let':
                return true;
            default:
                return false;
        }
    }
    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }
    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }
        switch(id.length){
            case 2:
                return id === 'if' || id === 'in' || id === 'do';
            case 3:
                return id === 'var' || id === 'for' || id === 'new' || id === 'try';
            case 4:
                return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
            case 5:
                return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
            case 6:
                return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
            case 7:
                return id === 'default' || id === 'finally' || id === 'extends';
            case 8:
                return id === 'function' || id === 'continue' || id === 'debugger';
            case 10:
                return id === 'instanceof';
            default:
                return false;
        }
    }
    function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }
    function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }
    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }
    function isIdentifierNameES5(id) {
        var i, iz, ch;
        if (id.length === 0) {
            return false;
        }
        ch = id.charCodeAt(0);
        if (!code.isIdentifierStartES5(ch)) {
            return false;
        }
        for(i = 1, iz = id.length; i < iz; ++i){
            ch = id.charCodeAt(i);
            if (!code.isIdentifierPartES5(ch)) {
                return false;
            }
        }
        return true;
    }
    function decodeUtf16(lead, trail) {
        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    }
    function isIdentifierNameES6(id) {
        var i, iz, ch, lowCh, check;
        if (id.length === 0) {
            return false;
        }
        check = code.isIdentifierStartES6;
        for(i = 0, iz = id.length; i < iz; ++i){
            ch = id.charCodeAt(i);
            if (0xD800 <= ch && ch <= 0xDBFF) {
                ++i;
                if (i >= iz) {
                    return false;
                }
                lowCh = id.charCodeAt(i);
                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                    return false;
                }
                ch = decodeUtf16(ch, lowCh);
            }
            if (!check(ch)) {
                return false;
            }
            check = code.isIdentifierPartES6;
        }
        return true;
    }
    function isIdentifierES5(id, strict) {
        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
    }
    function isIdentifierES6(id, strict) {
        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
    }
    module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierNameES5: isIdentifierNameES5,
        isIdentifierNameES6: isIdentifierNameES6,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
    };
})(); /* vim: set sw=4 ts=4 et tw=80 : */ 
}}),
"[project]/node_modules/esutils/lib/utils.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ (function() {
    'use strict';
    exports.ast = __turbopack_context__.r("[project]/node_modules/esutils/lib/ast.js [app-client] (ecmascript)");
    exports.code = __turbopack_context__.r("[project]/node_modules/esutils/lib/code.js [app-client] (ecmascript)");
    exports.keyword = __turbopack_context__.r("[project]/node_modules/esutils/lib/keyword.js [app-client] (ecmascript)");
})(); /* vim: set sw=4 ts=4 et tw=80 : */ 
}}),
"[project]/node_modules/source-map/lib/base64.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */ exports.encode = function(number) {
    if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
};
/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */ exports.decode = function(charCode) {
    var bigA = 65; // 'A'
    var bigZ = 90; // 'Z'
    var littleA = 97; // 'a'
    var littleZ = 122; // 'z'
    var zero = 48; // '0'
    var nine = 57; // '9'
    var plus = 43; // '+'
    var slash = 47; // '/'
    var littleOffset = 26;
    var numberOffset = 52;
    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
    }
    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
    }
    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
    }
    // 62: +
    if (charCode == plus) {
        return 62;
    }
    // 63: /
    if (charCode == slash) {
        return 63;
    }
    // Invalid base64 digit.
    return -1;
};
}}),
"[project]/node_modules/source-map/lib/base64-vlq.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ var base64 = __turbopack_context__.r("[project]/node_modules/source-map/lib/base64.js [app-client] (ecmascript)");
// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011
var VLQ_BASE_SHIFT = 5;
// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;
// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;
/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */ function toVLQSigned(aValue) {
    return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */ function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative ? -shifted : shifted;
}
/**
 * Returns the base 64 VLQ encoded value.
 */ exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;
    var vlq = toVLQSigned(aValue);
    do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
            // There are still more digits in this value, so we must make sure the
            // continuation bit is marked.
            digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
    }while (vlq > 0)
    return encoded;
};
/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */ exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;
    do {
        if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
    }while (continuation)
    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
};
}}),
"[project]/node_modules/source-map/lib/util.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ /**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */ function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
        return aArgs[aName];
    } else if (arguments.length === 3) {
        return aDefaultValue;
    } else {
        throw new Error('"' + aName + '" is a required argument.');
    }
}
exports.getArg = getArg;
var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;
function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
        return null;
    }
    return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
    };
}
exports.urlParse = urlParse;
function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
        url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
        url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
        url += aParsedUrl.path;
    }
    return url;
}
exports.urlGenerate = urlGenerate;
/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */ function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
        if (!url.path) {
            return aPath;
        }
        path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);
    var parts = path.split(/\/+/);
    for(var part, up = 0, i = parts.length - 1; i >= 0; i--){
        part = parts[i];
        if (part === '.') {
            parts.splice(i, 1);
        } else if (part === '..') {
            up++;
        } else if (up > 0) {
            if (part === '') {
                // The first part is blank if the path is absolute. Trying to go
                // above the root is a no-op. Therefore we can remove all '..' parts
                // directly after the root.
                parts.splice(i + 1, up);
                up = 0;
            } else {
                parts.splice(i, 2);
                up--;
            }
        }
    }
    path = parts.join('/');
    if (path === '') {
        path = isAbsolute ? '/' : '.';
    }
    if (url) {
        url.path = path;
        return urlGenerate(url);
    }
    return path;
}
exports.normalize = normalize;
/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */ function join(aRoot, aPath) {
    if (aRoot === "") {
        aRoot = ".";
    }
    if (aPath === "") {
        aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
        aRoot = aRootUrl.path || '/';
    }
    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
    }
    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
    if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
    }
    return joined;
}
exports.join = join;
exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};
/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */ function relative(aRoot, aPath) {
    if (aRoot === "") {
        aRoot = ".";
    }
    aRoot = aRoot.replace(/\/$/, '');
    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while(aPath.indexOf(aRoot + '/') !== 0){
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
            return aPath;
        }
        // If the only part of the root that is left is the scheme (i.e. http://,
        // file:///, etc.), one or more slashes (/), or simply nothing at all, we
        // have exhausted all components, so the path is not relative to the root.
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
        }
        ++level;
    }
    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;
var supportsNullProto = function() {
    var obj = Object.create(null);
    return !('__proto__' in obj);
}();
function identity(s) {
    return s;
}
/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */ function toSetString(aStr) {
    if (isProtoString(aStr)) {
        return '$' + aStr;
    }
    return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;
function fromSetString(aStr) {
    if (isProtoString(aStr)) {
        return aStr.slice(1);
    }
    return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;
function isProtoString(s) {
    if (!s) {
        return false;
    }
    var length = s.length;
    if (length < 9 /* "__proto__".length */ ) {
        return false;
    }
    if (s.charCodeAt(length - 1) !== 95 /* '_' */  || s.charCodeAt(length - 2) !== 95 /* '_' */  || s.charCodeAt(length - 3) !== 111 /* 'o' */  || s.charCodeAt(length - 4) !== 116 /* 't' */  || s.charCodeAt(length - 5) !== 111 /* 'o' */  || s.charCodeAt(length - 6) !== 114 /* 'r' */  || s.charCodeAt(length - 7) !== 112 /* 'p' */  || s.charCodeAt(length - 8) !== 95 /* '_' */  || s.charCodeAt(length - 9) !== 95 /* '_' */ ) {
        return false;
    }
    for(var i = length - 10; i >= 0; i--){
        if (s.charCodeAt(i) !== 36 /* '$' */ ) {
            return false;
        }
    }
    return true;
}
/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */ function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;
/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */ function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
        return 0;
    }
    if (aStr1 === null) {
        return 1; // aStr2 !== null
    }
    if (aStr2 === null) {
        return -1; // aStr1 !== null
    }
    if (aStr1 > aStr2) {
        return 1;
    }
    return -1;
}
/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */ function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
        return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
        return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */ function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;
/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */ function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || '';
    if (sourceRoot) {
        // This follows what Chrome does.
        if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
            sourceRoot += '/';
        }
        // The spec says:
        //   Line 4: An optional source root, useful for relocating source
        //   files on a server or removing repeated values in the
        //   “sources” entry.  This value is prepended to the individual
        //   entries in the “source” field.
        sourceURL = sourceRoot + sourceURL;
    }
    // Historically, SourceMapConsumer did not take the sourceMapURL as
    // a parameter.  This mode is still somewhat supported, which is why
    // this code block is conditional.  However, it's preferable to pass
    // the source map URL to SourceMapConsumer, so that this function
    // can implement the source URL resolution algorithm as outlined in
    // the spec.  This block is basically the equivalent of:
    //    new URL(sourceURL, sourceMapURL).toString()
    // ... except it avoids using URL, which wasn't available in the
    // older releases of node still supported by this library.
    //
    // The spec says:
    //   If the sources are not absolute URLs after prepending of the
    //   “sourceRoot”, the sources are resolved relative to the
    //   SourceMap (like resolving script src in a html document).
    if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
            // Strip the last path component, but keep the "/".
            var index = parsed.path.lastIndexOf('/');
            if (index >= 0) {
                parsed.path = parsed.path.substring(0, index + 1);
            }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
    }
    return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;
}}),
"[project]/node_modules/source-map/lib/array-set.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = __turbopack_context__.r("[project]/node_modules/source-map/lib/util.js [app-client] (ecmascript)");
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";
/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */ function ArraySet() {
    this._array = [];
    this._set = hasNativeMap ? new Map() : Object.create(null);
}
/**
 * Static method for creating ArraySet instances from an existing array.
 */ ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for(var i = 0, len = aArray.length; i < len; i++){
        set.add(aArray[i], aAllowDuplicates);
    }
    return set;
};
/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */ ArraySet.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};
/**
 * Add the given string to this set.
 *
 * @param String aStr
 */ ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
    }
    if (!isDuplicate) {
        if (hasNativeMap) {
            this._set.set(aStr, idx);
        } else {
            this._set[sStr] = idx;
        }
    }
};
/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */ ArraySet.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) {
        return this._set.has(aStr);
    } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
    }
};
/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */ ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
            return idx;
        }
    } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
            return this._set[sStr];
        }
    }
    throw new Error('"' + aStr + '" is not in the set.');
};
/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */ ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
};
/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */ ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
};
exports.ArraySet = ArraySet;
}}),
"[project]/node_modules/source-map/lib/mapping-list.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = __turbopack_context__.r("[project]/node_modules/source-map/lib/util.js [app-client] (ecmascript)");
/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */ function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */ function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {
        generatedLine: -1,
        generatedColumn: 0
    };
}
/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */ MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
};
/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */ MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
    } else {
        this._sorted = false;
        this._array.push(aMapping);
    }
};
/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */ MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
    }
    return this._array;
};
exports.MappingList = MappingList;
}}),
"[project]/node_modules/source-map/lib/source-map-generator.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var base64VLQ = __turbopack_context__.r("[project]/node_modules/source-map/lib/base64-vlq.js [app-client] (ecmascript)");
var util = __turbopack_context__.r("[project]/node_modules/source-map/lib/util.js [app-client] (ecmascript)");
var ArraySet = __turbopack_context__.r("[project]/node_modules/source-map/lib/array-set.js [app-client] (ecmascript)").ArraySet;
var MappingList = __turbopack_context__.r("[project]/node_modules/source-map/lib/mapping-list.js [app-client] (ecmascript)").MappingList;
/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */ function SourceMapGenerator(aArgs) {
    if (!aArgs) {
        aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
}
SourceMapGenerator.prototype._version = 3;
/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */ SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
            generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn
            }
        };
        if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
                newMapping.source = util.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
                line: mapping.originalLine,
                column: mapping.originalColumn
            };
            if (mapping.name != null) {
                newMapping.name = mapping.name;
            }
        }
        generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
            sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
            generator.setSourceContent(sourceFile, content);
        }
    });
    return generator;
};
/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */ SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);
    if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
    }
    if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
            this._sources.add(source);
        }
    }
    if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
            this._names.add(name);
        }
    }
    this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
    });
};
/**
 * Set the source content for a source file.
 */ SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
    }
    if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
            this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
        }
    }
};
/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */ SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
            throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
        }
        sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();
    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
            // Check if it can be mapped by the source map, then update the mapping.
            var original = aSourceMapConsumer.originalPositionFor({
                line: mapping.originalLine,
                column: mapping.originalColumn
            });
            if (original.source != null) {
                // Copy mapping
                mapping.source = original.source;
                if (aSourceMapPath != null) {
                    mapping.source = util.join(aSourceMapPath, mapping.source);
                }
                if (sourceRoot != null) {
                    mapping.source = util.relative(sourceRoot, mapping.source);
                }
                mapping.originalLine = original.line;
                mapping.originalColumn = original.column;
                if (original.name != null) {
                    mapping.name = original.name;
                }
            }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
            newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
            newNames.add(name);
        }
    }, this);
    this._sources = newSources;
    this._names = newNames;
    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
            if (aSourceMapPath != null) {
                sourceFile = util.join(aSourceMapPath, sourceFile);
            }
            if (sourceRoot != null) {
                sourceFile = util.relative(sourceRoot, sourceFile);
            }
            this.setSourceContent(sourceFile, content);
        }
    }, this);
};
/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */ SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error('original.line and original.column are not numbers -- you probably meant to omit ' + 'the original mapping entirely and only map the generated position. If so, pass ' + 'null for the original mapping instead of an object with empty or null values.');
    }
    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
    } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        // Cases 2 and 3.
        return;
    } else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
        }));
    }
};
/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */ SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;
    var mappings = this._mappings.toArray();
    for(var i = 0, len = mappings.length; i < len; i++){
        mapping = mappings[i];
        next = '';
        if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while(mapping.generatedLine !== previousGeneratedLine){
                next += ';';
                previousGeneratedLine++;
            }
        } else {
            if (i > 0) {
                if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                    continue;
                }
                next += ',';
            }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            // lines are stored 0-based in SourceMap spec version 3
            next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
                nameIdx = this._names.indexOf(mapping.name);
                next += base64VLQ.encode(nameIdx - previousName);
                previousName = nameIdx;
            }
        }
        result += next;
    }
    return result;
};
SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function(source) {
        if (!this._sourcesContents) {
            return null;
        }
        if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
    }, this);
};
/**
 * Externalize the source map.
 */ SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
    var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
    };
    if (this._file != null) {
        map.file = this._file;
    }
    if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }
    return map;
};
/**
 * Render the source map being generated to a string.
 */ SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
};
exports.SourceMapGenerator = SourceMapGenerator;
}}),
"[project]/node_modules/source-map/lib/binary-search.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;
/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */ function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
        // Found the element we are looking for.
        return mid;
    } else if (cmp > 0) {
        // Our needle is greater than aHaystack[mid].
        if (aHigh - mid > 1) {
            // The element is in the upper half.
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        // The exact needle element was not found in this haystack. Determine if
        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
        } else {
            return mid;
        }
    } else {
        // Our needle is less than aHaystack[mid].
        if (mid - aLow > 1) {
            // The element is in the lower half.
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
            return mid;
        } else {
            return aLow < 0 ? -1 : aLow;
        }
    }
}
/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */ exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
        return -1;
    }
    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
        return -1;
    }
    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while(index - 1 >= 0){
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
            break;
        }
        --index;
    }
    return index;
};
}}),
"[project]/node_modules/source-map/lib/quick-sort.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ // It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.
/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */ function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
}
/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */ function randomIntInRange(low, high) {
    return Math.round(low + Math.random() * (high - low));
}
/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */ function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.
    if (p < r) {
        // (1) Partitioning.
        //
        // The partitioning chooses a pivot between `p` and `r` and moves all
        // elements that are less than or equal to the pivot to the before it, and
        // all the elements that are greater than it after it. The effect is that
        // once partition is done, the pivot is in the exact place it will be when
        // the array is put in sorted order, and it will not need to be moved
        // again. This runs in O(n) time.
        // Always choose a random pivot so that an input array which is reverse
        // sorted does not cause O(n^2) running time.
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        // Immediately after `j` is incremented in this loop, the following hold
        // true:
        //
        //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
        //
        //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
        for(var j = p; j < r; j++){
            if (comparator(ary[j], pivot) <= 0) {
                i += 1;
                swap(ary, i, j);
            }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        // (2) Recurse on each half.
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
    }
}
/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */ exports.quickSort = function(ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
};
}}),
"[project]/node_modules/source-map/lib/source-map-consumer.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var util = __turbopack_context__.r("[project]/node_modules/source-map/lib/util.js [app-client] (ecmascript)");
var binarySearch = __turbopack_context__.r("[project]/node_modules/source-map/lib/binary-search.js [app-client] (ecmascript)");
var ArraySet = __turbopack_context__.r("[project]/node_modules/source-map/lib/array-set.js [app-client] (ecmascript)").ArraySet;
var base64VLQ = __turbopack_context__.r("[project]/node_modules/source-map/lib/base64-vlq.js [app-client] (ecmascript)");
var quickSort = __turbopack_context__.r("[project]/node_modules/source-map/lib/quick-sort.js [app-client] (ecmascript)").quickSort;
function SourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
        sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}
SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};
/**
 * The version of the source mapping spec that we are consuming.
 */ SourceMapConsumer.prototype._version = 3;
// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.
SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    configurable: true,
    enumerable: true,
    get: function() {
        if (!this.__generatedMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
    }
});
SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    configurable: true,
    enumerable: true,
    get: function() {
        if (!this.__originalMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
    }
});
SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
};
/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */ SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
};
SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;
SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;
/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */ SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
    var mappings;
    switch(order){
        case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
        case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
        default:
            throw new Error("Unknown order of iteration.");
    }
    var sourceRoot = this.sourceRoot;
    mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
            source: source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
        };
    }, this).forEach(aCallback, context);
};
/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */ SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');
    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
    };
    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
        return [];
    }
    var mappings = [];
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === undefined) {
            var originalLine = mapping.originalLine;
            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we found. Since
            // mappings are sorted, this is guaranteed to find all mappings for
            // the line we found.
            while(mapping && mapping.originalLine === originalLine){
                mappings.push({
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                });
                mapping = this._originalMappings[++index];
            }
        } else {
            var originalColumn = mapping.originalColumn;
            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we were searching for.
            // Since mappings are sorted, this is guaranteed to find all mappings for
            // the line we are searching for.
            while(mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn){
                mappings.push({
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                });
                mapping = this._originalMappings[++index];
            }
        }
    }
    return mappings;
};
exports.SourceMapConsumer = SourceMapConsumer;
/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */ function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
        sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);
    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
        throw new Error('Unsupported version: ' + version);
    }
    if (sourceRoot) {
        sourceRoot = util.normalize(sourceRoot);
    }
    sources = sources.map(String)// Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)// Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
    });
    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);
    this._absoluteSources = this._sources.toArray().map(function(s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
    });
    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this._sourceMapURL = aSourceMapURL;
    this.file = file;
}
BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */ BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
    }
    if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
    }
    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    var i;
    for(i = 0; i < this._absoluteSources.length; ++i){
        if (this._absoluteSources[i] == aSource) {
            return i;
        }
    }
    return -1;
};
/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */ BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);
    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });
    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.
    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];
    for(var i = 0, length = generatedMappings.length; i < length; i++){
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;
            if (srcMapping.name) {
                destMapping.name = names.indexOf(srcMapping.name);
            }
            destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
    }
    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
    return smc;
};
/**
 * The version of the source mapping spec that we are consuming.
 */ BasicSourceMapConsumer.prototype._version = 3;
/**
 * The list of original sources.
 */ Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function() {
        return this._absoluteSources.slice();
    }
});
/**
 * Provide the JIT with a nice shape / hidden class.
 */ function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
}
/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */ BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;
    while(index < length){
        if (aStr.charAt(index) === ';') {
            generatedLine++;
            index++;
            previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ',') {
            index++;
        } else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;
            // Because each offset is encoded relative to the previous one,
            // many segments often have the same encoding. We can exploit this
            // fact by caching the parsed variable length fields of each segment,
            // allowing us to avoid a second parse if we encounter the same
            // segment again.
            for(end = index; end < length; end++){
                if (this._charIsMappingSeparator(aStr, end)) {
                    break;
                }
            }
            str = aStr.slice(index, end);
            segment = cachedSegments[str];
            if (segment) {
                index += str.length;
            } else {
                segment = [];
                while(index < end){
                    base64VLQ.decode(aStr, index, temp);
                    value = temp.value;
                    index = temp.rest;
                    segment.push(value);
                }
                if (segment.length === 2) {
                    throw new Error('Found a source, but no line and column');
                }
                if (segment.length === 3) {
                    throw new Error('Found a source and line, but no column');
                }
                cachedSegments[str] = segment;
            }
            // Generated column.
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;
            if (segment.length > 1) {
                // Original source.
                mapping.source = previousSource + segment[1];
                previousSource += segment[1];
                // Original line.
                mapping.originalLine = previousOriginalLine + segment[2];
                previousOriginalLine = mapping.originalLine;
                // Lines are stored 0-based
                mapping.originalLine += 1;
                // Original column.
                mapping.originalColumn = previousOriginalColumn + segment[3];
                previousOriginalColumn = mapping.originalColumn;
                if (segment.length > 4) {
                    // Original name.
                    mapping.name = previousName + segment[4];
                    previousName += segment[4];
                }
            }
            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === 'number') {
                originalMappings.push(mapping);
            }
        }
    }
    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;
    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
};
/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */ BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.
    if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
    }
    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
};
/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */ BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
    for(var index = 0; index < this._generatedMappings.length; ++index){
        var mapping = this._generatedMappings[index];
        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
                mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                continue;
            }
        }
        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
    }
};
/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */ BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, 'source', null);
            if (source !== null) {
                source = this._sources.at(source);
                source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util.getArg(mapping, 'name', null);
            if (name !== null) {
                name = this._names.at(name);
            }
            return {
                source: source,
                line: util.getArg(mapping, 'originalLine', null),
                column: util.getArg(mapping, 'originalColumn', null),
                name: name
            };
        }
    }
    return {
        source: null,
        line: null,
        column: null,
        name: null
    };
};
/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */ BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
        return false;
    }
    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
    });
};
/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */ BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
        return null;
    }
    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
        return this.sourcesContent[index];
    }
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
    }
    var url;
    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
    }
    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
        return null;
    } else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
};
/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */ BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
        return {
            line: null,
            column: null,
            lastColumn: null
        };
    }
    var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
    };
    var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
    if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
            return {
                line: util.getArg(mapping, 'generatedLine', null),
                column: util.getArg(mapping, 'generatedColumn', null),
                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            };
        }
    }
    return {
        line: null,
        column: null,
        lastColumn: null
    };
};
exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */ function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
        sourceMap = util.parseSourceMapInput(aSourceMap);
    }
    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');
    if (version != this._version) {
        throw new Error('Unsupported version: ' + version);
    }
    this._sources = new ArraySet();
    this._names = new ArraySet();
    var lastOffset = {
        line: -1,
        column: 0
    };
    this._sections = sections.map(function(s) {
        if (s.url) {
            // The url field will require support for asynchronicity.
            // See https://github.com/mozilla/source-map/issues/16
            throw new Error('Support for url field in sections not implemented.');
        }
        var offset = util.getArg(s, 'offset');
        var offsetLine = util.getArg(offset, 'line');
        var offsetColumn = util.getArg(offset, 'column');
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
            throw new Error('Section offsets must be ordered and non-overlapping.');
        }
        lastOffset = offset;
        return {
            generatedOffset: {
                // The offset fields are 0-based, but we use 1-based indices when
                // encoding/decoding from VLQ.
                generatedLine: offsetLine + 1,
                generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
        };
    });
}
IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
/**
 * The version of the source mapping spec that we are consuming.
 */ IndexedSourceMapConsumer.prototype._version = 3;
/**
 * The list of original sources.
 */ Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function() {
        var sources = [];
        for(var i = 0; i < this._sections.length; i++){
            for(var j = 0; j < this._sections[i].consumer.sources.length; j++){
                sources.push(this._sections[i].consumer.sources[j]);
            }
        }
        return sources;
    }
});
/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */ IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
    };
    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections, function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
            return cmp;
        }
        return needle.generatedColumn - section.generatedOffset.generatedColumn;
    });
    var section = this._sections[sectionIndex];
    if (!section) {
        return {
            source: null,
            line: null,
            column: null,
            name: null
        };
    }
    return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
    });
};
/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */ IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
    });
};
/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */ IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for(var i = 0; i < this._sections.length; i++){
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
            return content;
        }
    }
    if (nullOnMissing) {
        return null;
    } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
};
/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */ IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for(var i = 0; i < this._sections.length; i++){
        var section = this._sections[i];
        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
            continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
            var ret = {
                line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
        }
    }
    return {
        line: null,
        column: null
    };
};
/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */ IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for(var i = 0; i < this._sections.length; i++){
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for(var j = 0; j < sectionMappings.length; j++){
            var mapping = sectionMappings[j];
            var source = section.consumer._sources.at(mapping.source);
            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);
            var name = null;
            if (mapping.name) {
                name = section.consumer._names.at(mapping.name);
                this._names.add(name);
                name = this._names.indexOf(name);
            }
            // The mappings coming from the consumer for the section have
            // generated positions relative to the start of the section, so we
            // need to offset them to be relative to the start of the concatenated
            // generated file.
            var adjustedMapping = {
                source: source,
                generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name: name
            };
            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === 'number') {
                this.__originalMappings.push(adjustedMapping);
            }
        }
    }
    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
};
exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
}}),
"[project]/node_modules/source-map/lib/source-node.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ var SourceMapGenerator = __turbopack_context__.r("[project]/node_modules/source-map/lib/source-map-generator.js [app-client] (ecmascript)").SourceMapGenerator;
var util = __turbopack_context__.r("[project]/node_modules/source-map/lib/util.js [app-client] (ecmascript)");
// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;
// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;
// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";
/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */ function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
}
/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */ SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();
    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
        var lineContents = getNextLine();
        // The last line of a file might not have a newline.
        var newLine = getNextLine() || "";
        return lineContents + newLine;
        "TURBOPACK unreachable";
        function getNextLine() {
            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;
        }
    };
    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;
    aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
            // We add the code from "lastMapping" to "mapping":
            // First check if there is a new line in between.
            if (lastGeneratedLine < mapping.generatedLine) {
                // Associate first line with "lastMapping"
                addMappingWithCode(lastMapping, shiftNextLine());
                lastGeneratedLine++;
                lastGeneratedColumn = 0;
            // The remaining code is added without mapping
            } else {
                // There is no new line in between.
                // Associate the code between "lastGeneratedColumn" and
                // "mapping.generatedColumn" with "lastMapping"
                var nextLine = remainingLines[remainingLinesIndex] || '';
                var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                lastGeneratedColumn = mapping.generatedColumn;
                addMappingWithCode(lastMapping, code);
                // No more remaining code, continue
                lastMapping = mapping;
                return;
            }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while(lastGeneratedLine < mapping.generatedLine){
            node.add(shiftNextLine());
            lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || '';
            node.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
            // Associate the remaining code in the current line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }
    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
            if (aRelativePath != null) {
                sourceFile = util.join(aRelativePath, sourceFile);
            }
            node.setSourceContent(sourceFile, content);
        }
    });
    return node;
    "TURBOPACK unreachable";
    function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
            node.add(code);
        } else {
            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
            node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
    }
};
/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */ SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
            this.add(chunk);
        }, this);
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
            this.children.push(aChunk);
        }
    } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
};
/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */ SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
        for(var i = aChunk.length - 1; i >= 0; i--){
            this.prepend(aChunk[i]);
        }
    } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
    } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
    }
    return this;
};
/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */ SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for(var i = 0, len = this.children.length; i < len; i++){
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
            chunk.walk(aFn);
        } else {
            if (chunk !== '') {
                aFn(chunk, {
                    source: this.source,
                    line: this.line,
                    column: this.column,
                    name: this.name
                });
            }
        }
    }
};
/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */ SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
        newChildren = [];
        for(i = 0; i < len - 1; i++){
            newChildren.push(this.children[i]);
            newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
    }
    return this;
};
/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */ SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
    } else if (typeof lastChild === 'string') {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    } else {
        this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
};
/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */ SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
};
/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */ SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
    for(var i = 0, len = this.children.length; i < len; i++){
        if (this.children[i][isSourceNode]) {
            this.children[i].walkSourceContents(aFn);
        }
    }
    var sources = Object.keys(this.sourceContents);
    for(var i = 0, len = sources.length; i < len; i++){
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
};
/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */ SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function(chunk) {
        str += chunk;
    });
    return str;
};
/**
 * Returns the string representation of this source node along with a source
 * map.
 */ SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
        code: "",
        line: 1,
        column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
                map.addMapping({
                    source: original.source,
                    original: {
                        line: original.line,
                        column: original.column
                    },
                    generated: {
                        line: generated.line,
                        column: generated.column
                    },
                    name: original.name
                });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
        } else if (sourceMappingActive) {
            map.addMapping({
                generated: {
                    line: generated.line,
                    column: generated.column
                }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
        }
        for(var idx = 0, length = chunk.length; idx < length; idx++){
            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                generated.line++;
                generated.column = 0;
                // Mappings end at eol
                if (idx + 1 === length) {
                    lastOriginalSource = null;
                    sourceMappingActive = false;
                } else if (sourceMappingActive) {
                    map.addMapping({
                        source: original.source,
                        original: {
                            line: original.line,
                            column: original.column
                        },
                        generated: {
                            line: generated.line,
                            column: generated.column
                        },
                        name: original.name
                    });
                }
            } else {
                generated.column++;
            }
        }
    });
    this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
    });
    return {
        code: generated.code,
        map: map
    };
};
exports.SourceNode = SourceNode;
}}),
"[project]/node_modules/source-map/source-map.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ exports.SourceMapGenerator = __turbopack_context__.r("[project]/node_modules/source-map/lib/source-map-generator.js [app-client] (ecmascript)").SourceMapGenerator;
exports.SourceMapConsumer = __turbopack_context__.r("[project]/node_modules/source-map/lib/source-map-consumer.js [app-client] (ecmascript)").SourceMapConsumer;
exports.SourceNode = __turbopack_context__.r("[project]/node_modules/source-map/lib/source-node.js [app-client] (ecmascript)").SourceNode;
}}),
}]);

//# sourceMappingURL=node_modules_59f34dee._.js.map