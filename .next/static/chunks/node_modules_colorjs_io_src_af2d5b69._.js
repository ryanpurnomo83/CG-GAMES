(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Various utility functions
 */ __turbopack_context__.s({
    "bisectLeft": (()=>bisectLeft),
    "clamp": (()=>clamp),
    "copySign": (()=>copySign),
    "interpolate": (()=>interpolate),
    "interpolateInv": (()=>interpolateInv),
    "isNone": (()=>isNone),
    "isString": (()=>isString),
    "last": (()=>last),
    "mapRange": (()=>mapRange),
    "parseCoordGrammar": (()=>parseCoordGrammar),
    "parseFunction": (()=>parseFunction),
    "serializeNumber": (()=>serializeNumber),
    "skipNone": (()=>skipNone),
    "spow": (()=>spow),
    "toPrecision": (()=>toPrecision),
    "type": (()=>type),
    "zdiv": (()=>zdiv)
});
;
function isString(str) {
    return type(str) === "string";
}
function type(o) {
    let str = Object.prototype.toString.call(o);
    return (str.match(/^\[object\s+(.*?)\]$/)[1] || "").toLowerCase();
}
function serializeNumber(n, { precision, unit }) {
    if (isNone(n)) {
        return "none";
    }
    return toPrecision(n, precision) + (unit ?? "");
}
function isNone(n) {
    return Number.isNaN(n) || n instanceof Number && n?.none;
}
function skipNone(n) {
    return isNone(n) ? 0 : n;
}
function toPrecision(n, precision) {
    if (n === 0) {
        return 0;
    }
    let integer = ~~n;
    let digits = 0;
    if (integer && precision) {
        digits = ~~Math.log10(Math.abs(integer)) + 1;
    }
    const multiplier = 10.0 ** (precision - digits);
    return Math.floor(n * multiplier + 0.5) / multiplier;
}
const angleFactor = {
    deg: 1,
    grad: 0.9,
    rad: 180 / Math.PI,
    turn: 360
};
function parseFunction(str) {
    if (!str) {
        return;
    }
    str = str.trim();
    const isFunctionRegex = /^([a-z]+)\((.+?)\)$/i;
    const isNumberRegex = /^-?[\d.]+$/;
    const unitValueRegex = /%|deg|g?rad|turn$/;
    const singleArgument = /\/?\s*(none|[-\w.]+(?:%|deg|g?rad|turn)?)/g;
    let parts = str.match(isFunctionRegex);
    if (parts) {
        // It is a function, parse args
        let args = [];
        parts[2].replace(singleArgument, ($0, rawArg)=>{
            let match = rawArg.match(unitValueRegex);
            let arg = rawArg;
            if (match) {
                let unit = match[0];
                // Drop unit from value
                let unitlessArg = arg.slice(0, -unit.length);
                if (unit === "%") {
                    // Convert percentages to 0-1 numbers
                    arg = new Number(unitlessArg / 100);
                    arg.type = "<percentage>";
                } else {
                    // Multiply angle by appropriate factor for its unit
                    arg = new Number(unitlessArg * angleFactor[unit]);
                    arg.type = "<angle>";
                    arg.unit = unit;
                }
            } else if (isNumberRegex.test(arg)) {
                // Convert numerical args to numbers
                arg = new Number(arg);
                arg.type = "<number>";
            } else if (arg === "none") {
                arg = new Number(NaN);
                arg.none = true;
            }
            if ($0.startsWith("/")) {
                // It's alpha
                arg = arg instanceof Number ? arg : new Number(arg);
                arg.alpha = true;
            }
            if (typeof arg === "object" && arg instanceof Number) {
                arg.raw = rawArg;
            }
            args.push(arg);
        });
        return {
            name: parts[1].toLowerCase(),
            rawName: parts[1],
            rawArgs: parts[2],
            // An argument could be (as of css-color-4):
            // a number, percentage, degrees (hue), ident (in color())
            args
        };
    }
}
function last(arr) {
    return arr[arr.length - 1];
}
function interpolate(start, end, p) {
    if (isNaN(start)) {
        return end;
    }
    if (isNaN(end)) {
        return start;
    }
    return start + (end - start) * p;
}
function interpolateInv(start, end, value) {
    return (value - start) / (end - start);
}
function mapRange(from, to, value) {
    return interpolate(to[0], to[1], interpolateInv(from[0], from[1], value));
}
function parseCoordGrammar(coordGrammars) {
    return coordGrammars.map((coordGrammar)=>{
        return coordGrammar.split("|").map((type)=>{
            type = type.trim();
            let range = type.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);
            if (range) {
                let ret = new String(range[1]);
                ret.range = [
                    +range[2],
                    +range[3]
                ];
                return ret;
            }
            return type;
        });
    });
}
function clamp(min, val, max) {
    return Math.max(Math.min(max, val), min);
}
function copySign(to, from) {
    return Math.sign(to) === Math.sign(from) ? to : -to;
}
function spow(base, exp) {
    return copySign(Math.abs(base) ** exp, base);
}
function zdiv(n, d) {
    return d === 0 ? 0 : n / d;
}
function bisectLeft(arr, value, lo = 0, hi = arr.length) {
    while(lo < hi){
        const mid = lo + hi >> 1;
        if (arr[mid] < value) {
            lo = mid + 1;
        } else {
            hi = mid;
        }
    }
    return lo;
}
}}),
"[project]/node_modules/colorjs.io/src/hooks.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * A class for adding deep extensibility to any piece of JS code
 */ __turbopack_context__.s({
    "Hooks": (()=>Hooks),
    "default": (()=>__TURBOPACK__default__export__)
});
class Hooks {
    add(name, callback, first) {
        if (typeof arguments[0] != "string") {
            // Multiple hooks
            for(var name in arguments[0]){
                this.add(name, arguments[0][name], arguments[1]);
            }
            return;
        }
        (Array.isArray(name) ? name : [
            name
        ]).forEach(function(name) {
            this[name] = this[name] || [];
            if (callback) {
                this[name][first ? "unshift" : "push"](callback);
            }
        }, this);
    }
    run(name, env) {
        this[name] = this[name] || [];
        this[name].forEach(function(callback) {
            callback.call(env && env.context ? env.context : env, env);
        });
    }
}
/**
 * The instance of {@link Hooks} used throughout Color.js
 */ const hooks = new Hooks();
const __TURBOPACK__default__export__ = hooks;
}}),
"[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// A is m x n. B is n x p. product is m x p.
__turbopack_context__.s({
    "default": (()=>multiplyMatrices)
});
function multiplyMatrices(A, B) {
    let m = A.length;
    if (!Array.isArray(A[0])) {
        // A is vector, convert to [[a, b, c, ...]]
        A = [
            A
        ];
    }
    if (!Array.isArray(B[0])) {
        // B is vector, convert to [[a], [b], [c], ...]]
        B = B.map((x)=>[
                x
            ]);
    }
    let p = B[0].length;
    let B_cols = B[0].map((_, i)=>B.map((x)=>x[i])); // transpose B
    let product = A.map((row)=>B_cols.map((col)=>{
            let ret = 0;
            if (!Array.isArray(row)) {
                for (let c of col){
                    ret += row * c;
                }
                return ret;
            }
            for(let i = 0; i < row.length; i++){
                ret += row[i] * (col[i] || 0);
            }
            return ret;
        }));
    if (m === 1) {
        product = product[0]; // Avoid [[a, b, c, ...]]
    }
    if (p === 1) {
        return product.map((x)=>x[0]); // Avoid [[a], [b], [c], ...]]
    }
    return product;
}
}}),
"[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "multiplyMatrices": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "WHITES": (()=>WHITES),
    "default": (()=>adapt),
    "getWhite": (()=>getWhite)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/hooks.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>");
;
;
const WHITES = {
    // for compatibility, the four-digit chromaticity-derived ones everyone else uses
    D50: [
        0.3457 / 0.3585,
        1.00000,
        (1.0 - 0.3457 - 0.3585) / 0.3585
    ],
    D65: [
        0.3127 / 0.3290,
        1.00000,
        (1.0 - 0.3127 - 0.3290) / 0.3290
    ]
};
function getWhite(name) {
    if (Array.isArray(name)) {
        return name;
    }
    return WHITES[name];
}
function adapt(W1, W2, XYZ, options = {}) {
    W1 = getWhite(W1);
    W2 = getWhite(W2);
    if (!W1 || !W2) {
        throw new TypeError(`Missing white point to convert ${!W1 ? "from" : ""}${!W1 && !W2 ? "/" : ""}${!W2 ? "to" : ""}`);
    }
    if (W1 === W2) {
        // Same whitepoints, no conversion needed
        return XYZ;
    }
    let env = {
        W1,
        W2,
        XYZ,
        options
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].run("chromatic-adaptation-start", env);
    if (!env.M) {
        if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {
            env.M = [
                [
                    1.0479297925449969,
                    0.022946870601609652,
                    -0.05019226628920524
                ],
                [
                    0.02962780877005599,
                    0.9904344267538799,
                    -0.017073799063418826
                ],
                [
                    -0.009243040646204504,
                    0.015055191490298152,
                    0.7518742814281371
                ]
            ];
        } else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {
            env.M = [
                [
                    0.955473421488075,
                    -0.02309845494876471,
                    0.06325924320057072
                ],
                [
                    -0.0283697093338637,
                    1.0099953980813041,
                    0.021041441191917323
                ],
                [
                    0.012314014864481998,
                    -0.020507649298898964,
                    1.330365926242124
                ]
            ];
        }
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].run("chromatic-adaptation-end", env);
    if (env.M) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(env.M, env.XYZ);
    } else {
        throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.");
    }
}
}}),
"[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Global defaults one may want to configure
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    gamut_mapping: "css",
    precision: 5,
    deltaE: "76",
    verbose: globalThis?.process?.env?.NODE_ENV?.toLowerCase() !== "test",
    warn: function warn(msg) {
        if (this.verbose) {
            globalThis?.console?.warn?.(msg);
        }
    }
};
}}),
"[project]/node_modules/colorjs.io/src/parse.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>parse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/hooks.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)");
;
;
;
;
const noneTypes = new Set([
    "<number>",
    "<percentage>",
    "<angle>"
]);
/**
 * Validates the coordinates of a color against a format's coord grammar and
 * maps the coordinates to the range or refRange of the coordinates.
 * @param {ColorSpace} space - Colorspace the coords are in
 * @param {object} format - the format object to validate against
 * @param {string} name - the name of the color function. e.g. "oklab" or "color"
 * @returns {object[]} - an array of type metadata for each coordinate
 */ function coerceCoords(space, format, name, coords) {
    let types = Object.entries(space.coords).map(([id, coordMeta], i)=>{
        let coordGrammar = format.coordGrammar[i];
        let arg = coords[i];
        let providedType = arg?.type;
        // Find grammar alternative that matches the provided type
        // Non-strict equals is intentional because we are comparing w/ string objects
        let type;
        if (arg.none) {
            type = coordGrammar.find((c)=>noneTypes.has(c));
        } else {
            type = coordGrammar.find((c)=>c == providedType);
        }
        // Check that each coord conforms to its grammar
        if (!type) {
            // Type does not exist in the grammar, throw
            let coordName = coordMeta.name || id;
            throw new TypeError(`${providedType ?? arg.raw} not allowed for ${coordName} in ${name}()`);
        }
        let fromRange = type.range;
        if (providedType === "<percentage>") {
            fromRange ||= [
                0,
                1
            ];
        }
        let toRange = coordMeta.range || coordMeta.refRange;
        if (fromRange && toRange) {
            coords[i] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mapRange"])(fromRange, toRange, coords[i]);
        }
        return type;
    });
    return types;
}
function parse(str, { meta } = {}) {
    let env = {
        "str": String(str)?.trim()
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].run("parse-start", env);
    if (env.color) {
        return env.color;
    }
    env.parsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["parseFunction"])(env.str);
    if (env.parsed) {
        // Is a functional syntax
        let name = env.parsed.name;
        if (name === "color") {
            // color() function
            let id = env.parsed.args.shift();
            // Check against both <dashed-ident> and <ident> versions
            let alternateId = id.startsWith("--") ? id.substring(2) : `--${id}`;
            let ids = [
                id,
                alternateId
            ];
            let alpha = env.parsed.rawArgs.indexOf("/") > 0 ? env.parsed.args.pop() : 1;
            for (let space of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].all){
                let colorSpec = space.getFormat("color");
                if (colorSpec) {
                    if (ids.includes(colorSpec.id) || colorSpec.ids?.filter((specId)=>ids.includes(specId)).length) {
                        // From https://drafts.csswg.org/css-color-4/#color-function
                        // If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.
                        // If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)
                        const coords = Object.keys(space.coords).map((_, i)=>env.parsed.args[i] || 0);
                        let types;
                        if (colorSpec.coordGrammar) {
                            types = coerceCoords(space, colorSpec, "color", coords);
                        }
                        if (meta) {
                            Object.assign(meta, {
                                formatId: "color",
                                types
                            });
                        }
                        if (colorSpec.id.startsWith("--") && !id.startsWith("--")) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].warn(`${space.name} is a non-standard space and not currently supported in the CSS spec. ` + `Use prefixed color(${colorSpec.id}) instead of color(${id}).`);
                        }
                        if (id.startsWith("--") && !colorSpec.id.startsWith("--")) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].warn(`${space.name} is a standard space and supported in the CSS spec. ` + `Use color(${colorSpec.id}) instead of prefixed color(${id}).`);
                        }
                        return {
                            spaceId: space.id,
                            coords,
                            alpha
                        };
                    }
                }
            }
            // Not found
            let didYouMean = "";
            let registryId = id in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].registry ? id : alternateId;
            if (registryId in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].registry) {
                // Used color space id instead of color() id, these are often different
                let cssId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].registry[registryId].formats?.color?.id;
                if (cssId) {
                    didYouMean = `Did you mean color(${cssId})?`;
                }
            }
            throw new TypeError(`Cannot parse color(${id}). ` + (didYouMean || "Missing a plugin?"));
        } else {
            for (let space of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].all){
                // color space specific function
                let format = space.getFormat(name);
                if (format && format.type === "function") {
                    let alpha = 1;
                    if (format.lastAlpha || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["last"])(env.parsed.args).alpha) {
                        alpha = env.parsed.args.pop();
                    }
                    let coords = env.parsed.args;
                    let types;
                    if (format.coordGrammar) {
                        types = coerceCoords(space, format, name, coords);
                    }
                    if (meta) {
                        Object.assign(meta, {
                            formatId: format.name,
                            types
                        });
                    }
                    return {
                        spaceId: space.id,
                        coords,
                        alpha
                    };
                }
            }
        }
    } else {
        // Custom, colorspace-specific format
        for (let space of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].all){
            for(let formatId in space.formats){
                let format = space.formats[formatId];
                if (format.type !== "custom") {
                    continue;
                }
                if (format.test && !format.test(env.str)) {
                    continue;
                }
                let color = format.parse(env.str);
                if (color) {
                    color.alpha ??= 1;
                    if (meta) {
                        meta.formatId = formatId;
                    }
                    return color;
                }
            }
        }
    }
    // If we're here, we couldn't parse
    throw new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);
}
}}),
"[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getColor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/parse.js [app-client] (ecmascript)");
;
;
;
function getColor(color) {
    if (Array.isArray(color)) {
        return color.map(getColor);
    }
    if (!color) {
        throw new TypeError("Empty color reference");
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isString"])(color)) {
        color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    }
    // Object fixup
    let space = color.space || color.spaceId;
    if (!(space instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])) {
        // Convert string id to color space object
        color.space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    }
    if (color.alpha === undefined) {
        color.alpha = 1;
    }
    return color;
}
}}),
"[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>ColorSpace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/hooks.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
;
;
const ε = .000075;
class ColorSpace {
    constructor(options){
        this.id = options.id;
        this.name = options.name;
        this.base = options.base ? ColorSpace.get(options.base) : null;
        this.aliases = options.aliases;
        if (this.base) {
            this.fromBase = options.fromBase;
            this.toBase = options.toBase;
        }
        // Coordinate metadata
        let coords = options.coords ?? this.base.coords;
        for(let name in coords){
            if (!("name" in coords[name])) {
                coords[name].name = name;
            }
        }
        this.coords = coords;
        // White point
        let white = options.white ?? this.base.white ?? "D65";
        this.white = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getWhite"])(white);
        // Sort out formats
        this.formats = options.formats ?? {};
        for(let name in this.formats){
            let format = this.formats[name];
            format.type ||= "function";
            format.name ||= name;
        }
        if (!this.formats.color?.id) {
            this.formats.color = {
                ...this.formats.color ?? {},
                id: options.cssId || this.id
            };
        }
        // Gamut space
        if (options.gamutSpace) {
            // Gamut space explicitly specified
            this.gamutSpace = options.gamutSpace === "self" ? this : ColorSpace.get(options.gamutSpace);
        } else {
            // No gamut space specified, calculate a sensible default
            if (this.isPolar) {
                // Do not check gamut through polar coordinates
                this.gamutSpace = this.base;
            } else {
                this.gamutSpace = this;
            }
        }
        // Optimize inGamut for unbounded spaces
        if (this.gamutSpace.isUnbounded) {
            this.inGamut = (coords, options)=>{
                return true;
            };
        }
        // Other stuff
        this.referred = options.referred;
        // Compute ancestors and store them, since they will never change
        Object.defineProperty(this, "path", {
            value: getPath(this).reverse(),
            writable: false,
            enumerable: true,
            configurable: true
        });
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$hooks$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].run("colorspace-init-end", this);
    }
    inGamut(coords, { epsilon = ε } = {}) {
        if (!this.equals(this.gamutSpace)) {
            coords = this.to(this.gamutSpace, coords);
            return this.gamutSpace.inGamut(coords, {
                epsilon
            });
        }
        let coordMeta = Object.values(this.coords);
        return coords.every((c, i)=>{
            let meta = coordMeta[i];
            if (meta.type !== "angle" && meta.range) {
                if (Number.isNaN(c)) {
                    // NaN is always in gamut
                    return true;
                }
                let [min, max] = meta.range;
                return (min === undefined || c >= min - epsilon) && (max === undefined || c <= max + epsilon);
            }
            return true;
        });
    }
    get isUnbounded() {
        return Object.values(this.coords).every((coord)=>!("range" in coord));
    }
    get cssId() {
        return this.formats?.color?.id || this.id;
    }
    get isPolar() {
        for(let id in this.coords){
            if (this.coords[id].type === "angle") {
                return true;
            }
        }
        return false;
    }
    getFormat(format) {
        if (typeof format === "object") {
            format = processFormat(format, this);
            return format;
        }
        let ret;
        if (format === "default") {
            // Get first format
            ret = Object.values(this.formats)[0];
        } else {
            ret = this.formats[format];
        }
        if (ret) {
            ret = processFormat(ret, this);
            return ret;
        }
        return null;
    }
    /**
	 * Check if this color space is the same as another color space reference.
	 * Allows proxying color space objects and comparing color spaces with ids.
	 * @param {string | ColorSpace} space ColorSpace object or id to compare to
	 * @returns {boolean}
	 */ equals(space) {
        if (!space) {
            return false;
        }
        return this === space || this.id === space || this.id === space.id;
    }
    to(space, coords) {
        if (arguments.length === 1) {
            const color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(space);
            [space, coords] = [
                color.space,
                color.coords
            ];
        }
        space = ColorSpace.get(space);
        if (this.equals(space)) {
            // Same space, no change needed
            return coords;
        }
        // Convert NaN to 0, which seems to be valid in every coordinate of every color space
        coords = coords.map((c)=>Number.isNaN(c) ? 0 : c);
        // Find connection space = lowest common ancestor in the base tree
        let myPath = this.path;
        let otherPath = space.path;
        let connectionSpace, connectionSpaceIndex;
        for(let i = 0; i < myPath.length; i++){
            if (myPath[i].equals(otherPath[i])) {
                connectionSpace = myPath[i];
                connectionSpaceIndex = i;
            } else {
                break;
            }
        }
        if (!connectionSpace) {
            // This should never happen
            throw new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);
        }
        // Go up from current space to connection space
        for(let i = myPath.length - 1; i > connectionSpaceIndex; i--){
            coords = myPath[i].toBase(coords);
        }
        // Go down from connection space to target space
        for(let i = connectionSpaceIndex + 1; i < otherPath.length; i++){
            coords = otherPath[i].fromBase(coords);
        }
        return coords;
    }
    from(space, coords) {
        if (arguments.length === 1) {
            const color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(space);
            [space, coords] = [
                color.space,
                color.coords
            ];
        }
        space = ColorSpace.get(space);
        return space.to(this, coords);
    }
    toString() {
        return `${this.name} (${this.id})`;
    }
    getMinCoords() {
        let ret = [];
        for(let id in this.coords){
            let meta = this.coords[id];
            let range = meta.range || meta.refRange;
            ret.push(range?.min ?? 0);
        }
        return ret;
    }
    static registry = {};
    // Returns array of unique color spaces
    static get all() {
        return [
            ...new Set(Object.values(ColorSpace.registry))
        ];
    }
    static register(id, space) {
        if (arguments.length === 1) {
            space = arguments[0];
            id = space.id;
        }
        space = this.get(space);
        if (this.registry[id] && this.registry[id] !== space) {
            throw new Error(`Duplicate color space registration: '${id}'`);
        }
        this.registry[id] = space;
        // Register aliases when called without an explicit ID.
        if (arguments.length === 1 && space.aliases) {
            for (let alias of space.aliases){
                this.register(alias, space);
            }
        }
        return space;
    }
    /**
	 * Lookup ColorSpace object by name
	 * @param {ColorSpace | string} name
	 */ static get(space, ...alternatives) {
        if (!space || space instanceof ColorSpace) {
            return space;
        }
        let argType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["type"])(space);
        if (argType === "string") {
            // It's a color space id
            let ret = ColorSpace.registry[space.toLowerCase()];
            if (!ret) {
                throw new TypeError(`No color space found with id = "${space}"`);
            }
            return ret;
        }
        if (alternatives.length) {
            return ColorSpace.get(...alternatives);
        }
        throw new TypeError(`${space} is not a valid color space`);
    }
    /**
	 * Get metadata about a coordinate of a color space
	 *
	 * @static
	 * @param {Array | string} ref
	 * @param {ColorSpace | string} [workingSpace]
	 * @return {Object}
	 */ static resolveCoord(ref, workingSpace) {
        let coordType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["type"])(ref);
        let space, coord;
        if (coordType === "string") {
            if (ref.includes(".")) {
                // Absolute coordinate
                [space, coord] = ref.split(".");
            } else {
                // Relative coordinate
                [space, coord] = [
                    ,
                    ref
                ];
            }
        } else if (Array.isArray(ref)) {
            [space, coord] = ref;
        } else {
            // Object
            space = ref.space;
            coord = ref.coordId;
        }
        space = ColorSpace.get(space);
        if (!space) {
            space = workingSpace;
        }
        if (!space) {
            throw new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);
        }
        coordType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["type"])(coord);
        if (coordType === "number" || coordType === "string" && coord >= 0) {
            // Resolve numerical coord
            let meta = Object.entries(space.coords)[coord];
            if (meta) {
                return {
                    space,
                    id: meta[0],
                    index: coord,
                    ...meta[1]
                };
            }
        }
        space = ColorSpace.get(space);
        let normalizedCoord = coord.toLowerCase();
        let i = 0;
        for(let id in space.coords){
            let meta = space.coords[id];
            if (id.toLowerCase() === normalizedCoord || meta.name?.toLowerCase() === normalizedCoord) {
                return {
                    space,
                    id,
                    index: i,
                    ...meta
                };
            }
            i++;
        }
        throw new TypeError(`No "${coord}" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(", ")}`);
    }
    static DEFAULT_FORMAT = {
        type: "functions",
        name: "color"
    };
}
function getPath(space) {
    let ret = [
        space
    ];
    for(let s = space; s = s.base;){
        ret.push(s);
    }
    return ret;
}
function processFormat(format, { coords } = {}) {
    if (format.coords && !format.coordGrammar) {
        format.type ||= "function";
        format.name ||= "color";
        // Format has not been processed
        format.coordGrammar = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["parseCoordGrammar"])(format.coords);
        let coordFormats = Object.entries(coords).map(([id, coordMeta], i)=>{
            // Preferred format for each coord is the first one
            let outputType = format.coordGrammar[i][0];
            let fromRange = coordMeta.range || coordMeta.refRange;
            let toRange = outputType.range, suffix = "";
            // Non-strict equals intentional since outputType could be a string object
            if (outputType == "<percentage>") {
                toRange = [
                    0,
                    100
                ];
                suffix = "%";
            } else if (outputType == "<angle>") {
                suffix = "deg";
            }
            return {
                fromRange,
                toRange,
                suffix
            };
        });
        format.serializeCoords = (coords, precision)=>{
            return coords.map((c, i)=>{
                let { fromRange, toRange, suffix } = coordFormats[i];
                if (fromRange && toRange) {
                    c = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["mapRange"])(fromRange, toRange, c);
                }
                c = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["serializeNumber"])(c, {
                    precision,
                    unit: suffix
                });
                return c;
            });
        };
    }
    return format;
}
}}),
"[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "xyz-d65",
    name: "XYZ D65",
    coords: {
        x: {
            name: "X"
        },
        y: {
            name: "Y"
        },
        z: {
            name: "Z"
        }
    },
    white: "D65",
    formats: {
        color: {
            ids: [
                "xyz-d65",
                "xyz"
            ]
        }
    },
    aliases: [
        "xyz"
    ]
});
}}),
"[project]/node_modules/colorjs.io/src/rgbspace.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>RGBColorSpace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)");
;
;
;
;
class RGBColorSpace extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] {
    /**
	 * Creates a new RGB ColorSpace.
	 * If coords are not specified, they will use the default RGB coords.
	 * Instead of `fromBase()` and `toBase()` functions,
	 * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.
	 * @param {*} options - Same options as {@link ColorSpace} plus:
	 * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ
	 * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ
	 */ constructor(options){
        if (!options.coords) {
            options.coords = {
                r: {
                    range: [
                        0,
                        1
                    ],
                    name: "Red"
                },
                g: {
                    range: [
                        0,
                        1
                    ],
                    name: "Green"
                },
                b: {
                    range: [
                        0,
                        1
                    ],
                    name: "Blue"
                }
            };
        }
        if (!options.base) {
            options.base = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
        }
        if (options.toXYZ_M && options.fromXYZ_M) {
            options.toBase ??= (rgb)=>{
                let xyz = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(options.toXYZ_M, rgb);
                if (this.white !== this.base.white) {
                    // Perform chromatic adaptation
                    xyz = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.white, this.base.white, xyz);
                }
                return xyz;
            };
            options.fromBase ??= (xyz)=>{
                xyz = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.base.white, this.white, xyz);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(options.fromXYZ_M, xyz);
            };
        }
        options.referred ??= "display";
        super(options);
    }
}
}}),
"[project]/node_modules/colorjs.io/src/spaces/srgb-linear.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "fromXYZ_M": (()=>fromXYZ_M)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/rgbspace.js [app-client] (ecmascript)");
;
// This is the linear-light version of sRGB
// as used for example in SVG filters
// or in Canvas
// This matrix was calculated directly from the RGB and white chromaticities
// when rounded to 8 decimal places, it agrees completely with the official matrix
// see https://github.com/w3c/csswg-drafts/issues/5922
const toXYZ_M = [
    [
        0.41239079926595934,
        0.357584339383878,
        0.1804807884018343
    ],
    [
        0.21263900587151027,
        0.715168678767756,
        0.07219231536073371
    ],
    [
        0.01933081871559182,
        0.11919477979462598,
        0.9505321522496607
    ]
];
const fromXYZ_M = [
    [
        3.2409699419045226,
        -1.537383177570094,
        -0.4986107602930034
    ],
    [
        -0.9692436362808796,
        1.8759675015077202,
        0.04155505740717559
    ],
    [
        0.05563007969699366,
        -0.20397695888897652,
        1.0569715142428786
    ]
];
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "srgb-linear",
    name: "Linear sRGB",
    white: "D65",
    toXYZ_M,
    fromXYZ_M
});
}}),
"[project]/node_modules/colorjs.io/src/keywords.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* List of CSS color keywords
 * Note that this does not include currentColor, transparent,
 * or system colors
 */ // To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors
// and run in the console:
// copy($$("tr", $(".named-color-table tbody")).map(tr => `"${tr.cells[2].textContent.trim()}": [${tr.cells[4].textContent.trim().split(/\s+/).map(c => c === "0"? "0" : c === "255"? "1" : c + " / 255").join(", ")}]`).join(",\n"))
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = {
    "aliceblue": [
        240 / 255,
        248 / 255,
        1
    ],
    "antiquewhite": [
        250 / 255,
        235 / 255,
        215 / 255
    ],
    "aqua": [
        0,
        1,
        1
    ],
    "aquamarine": [
        127 / 255,
        1,
        212 / 255
    ],
    "azure": [
        240 / 255,
        1,
        1
    ],
    "beige": [
        245 / 255,
        245 / 255,
        220 / 255
    ],
    "bisque": [
        1,
        228 / 255,
        196 / 255
    ],
    "black": [
        0,
        0,
        0
    ],
    "blanchedalmond": [
        1,
        235 / 255,
        205 / 255
    ],
    "blue": [
        0,
        0,
        1
    ],
    "blueviolet": [
        138 / 255,
        43 / 255,
        226 / 255
    ],
    "brown": [
        165 / 255,
        42 / 255,
        42 / 255
    ],
    "burlywood": [
        222 / 255,
        184 / 255,
        135 / 255
    ],
    "cadetblue": [
        95 / 255,
        158 / 255,
        160 / 255
    ],
    "chartreuse": [
        127 / 255,
        1,
        0
    ],
    "chocolate": [
        210 / 255,
        105 / 255,
        30 / 255
    ],
    "coral": [
        1,
        127 / 255,
        80 / 255
    ],
    "cornflowerblue": [
        100 / 255,
        149 / 255,
        237 / 255
    ],
    "cornsilk": [
        1,
        248 / 255,
        220 / 255
    ],
    "crimson": [
        220 / 255,
        20 / 255,
        60 / 255
    ],
    "cyan": [
        0,
        1,
        1
    ],
    "darkblue": [
        0,
        0,
        139 / 255
    ],
    "darkcyan": [
        0,
        139 / 255,
        139 / 255
    ],
    "darkgoldenrod": [
        184 / 255,
        134 / 255,
        11 / 255
    ],
    "darkgray": [
        169 / 255,
        169 / 255,
        169 / 255
    ],
    "darkgreen": [
        0,
        100 / 255,
        0
    ],
    "darkgrey": [
        169 / 255,
        169 / 255,
        169 / 255
    ],
    "darkkhaki": [
        189 / 255,
        183 / 255,
        107 / 255
    ],
    "darkmagenta": [
        139 / 255,
        0,
        139 / 255
    ],
    "darkolivegreen": [
        85 / 255,
        107 / 255,
        47 / 255
    ],
    "darkorange": [
        1,
        140 / 255,
        0
    ],
    "darkorchid": [
        153 / 255,
        50 / 255,
        204 / 255
    ],
    "darkred": [
        139 / 255,
        0,
        0
    ],
    "darksalmon": [
        233 / 255,
        150 / 255,
        122 / 255
    ],
    "darkseagreen": [
        143 / 255,
        188 / 255,
        143 / 255
    ],
    "darkslateblue": [
        72 / 255,
        61 / 255,
        139 / 255
    ],
    "darkslategray": [
        47 / 255,
        79 / 255,
        79 / 255
    ],
    "darkslategrey": [
        47 / 255,
        79 / 255,
        79 / 255
    ],
    "darkturquoise": [
        0,
        206 / 255,
        209 / 255
    ],
    "darkviolet": [
        148 / 255,
        0,
        211 / 255
    ],
    "deeppink": [
        1,
        20 / 255,
        147 / 255
    ],
    "deepskyblue": [
        0,
        191 / 255,
        1
    ],
    "dimgray": [
        105 / 255,
        105 / 255,
        105 / 255
    ],
    "dimgrey": [
        105 / 255,
        105 / 255,
        105 / 255
    ],
    "dodgerblue": [
        30 / 255,
        144 / 255,
        1
    ],
    "firebrick": [
        178 / 255,
        34 / 255,
        34 / 255
    ],
    "floralwhite": [
        1,
        250 / 255,
        240 / 255
    ],
    "forestgreen": [
        34 / 255,
        139 / 255,
        34 / 255
    ],
    "fuchsia": [
        1,
        0,
        1
    ],
    "gainsboro": [
        220 / 255,
        220 / 255,
        220 / 255
    ],
    "ghostwhite": [
        248 / 255,
        248 / 255,
        1
    ],
    "gold": [
        1,
        215 / 255,
        0
    ],
    "goldenrod": [
        218 / 255,
        165 / 255,
        32 / 255
    ],
    "gray": [
        128 / 255,
        128 / 255,
        128 / 255
    ],
    "green": [
        0,
        128 / 255,
        0
    ],
    "greenyellow": [
        173 / 255,
        1,
        47 / 255
    ],
    "grey": [
        128 / 255,
        128 / 255,
        128 / 255
    ],
    "honeydew": [
        240 / 255,
        1,
        240 / 255
    ],
    "hotpink": [
        1,
        105 / 255,
        180 / 255
    ],
    "indianred": [
        205 / 255,
        92 / 255,
        92 / 255
    ],
    "indigo": [
        75 / 255,
        0,
        130 / 255
    ],
    "ivory": [
        1,
        1,
        240 / 255
    ],
    "khaki": [
        240 / 255,
        230 / 255,
        140 / 255
    ],
    "lavender": [
        230 / 255,
        230 / 255,
        250 / 255
    ],
    "lavenderblush": [
        1,
        240 / 255,
        245 / 255
    ],
    "lawngreen": [
        124 / 255,
        252 / 255,
        0
    ],
    "lemonchiffon": [
        1,
        250 / 255,
        205 / 255
    ],
    "lightblue": [
        173 / 255,
        216 / 255,
        230 / 255
    ],
    "lightcoral": [
        240 / 255,
        128 / 255,
        128 / 255
    ],
    "lightcyan": [
        224 / 255,
        1,
        1
    ],
    "lightgoldenrodyellow": [
        250 / 255,
        250 / 255,
        210 / 255
    ],
    "lightgray": [
        211 / 255,
        211 / 255,
        211 / 255
    ],
    "lightgreen": [
        144 / 255,
        238 / 255,
        144 / 255
    ],
    "lightgrey": [
        211 / 255,
        211 / 255,
        211 / 255
    ],
    "lightpink": [
        1,
        182 / 255,
        193 / 255
    ],
    "lightsalmon": [
        1,
        160 / 255,
        122 / 255
    ],
    "lightseagreen": [
        32 / 255,
        178 / 255,
        170 / 255
    ],
    "lightskyblue": [
        135 / 255,
        206 / 255,
        250 / 255
    ],
    "lightslategray": [
        119 / 255,
        136 / 255,
        153 / 255
    ],
    "lightslategrey": [
        119 / 255,
        136 / 255,
        153 / 255
    ],
    "lightsteelblue": [
        176 / 255,
        196 / 255,
        222 / 255
    ],
    "lightyellow": [
        1,
        1,
        224 / 255
    ],
    "lime": [
        0,
        1,
        0
    ],
    "limegreen": [
        50 / 255,
        205 / 255,
        50 / 255
    ],
    "linen": [
        250 / 255,
        240 / 255,
        230 / 255
    ],
    "magenta": [
        1,
        0,
        1
    ],
    "maroon": [
        128 / 255,
        0,
        0
    ],
    "mediumaquamarine": [
        102 / 255,
        205 / 255,
        170 / 255
    ],
    "mediumblue": [
        0,
        0,
        205 / 255
    ],
    "mediumorchid": [
        186 / 255,
        85 / 255,
        211 / 255
    ],
    "mediumpurple": [
        147 / 255,
        112 / 255,
        219 / 255
    ],
    "mediumseagreen": [
        60 / 255,
        179 / 255,
        113 / 255
    ],
    "mediumslateblue": [
        123 / 255,
        104 / 255,
        238 / 255
    ],
    "mediumspringgreen": [
        0,
        250 / 255,
        154 / 255
    ],
    "mediumturquoise": [
        72 / 255,
        209 / 255,
        204 / 255
    ],
    "mediumvioletred": [
        199 / 255,
        21 / 255,
        133 / 255
    ],
    "midnightblue": [
        25 / 255,
        25 / 255,
        112 / 255
    ],
    "mintcream": [
        245 / 255,
        1,
        250 / 255
    ],
    "mistyrose": [
        1,
        228 / 255,
        225 / 255
    ],
    "moccasin": [
        1,
        228 / 255,
        181 / 255
    ],
    "navajowhite": [
        1,
        222 / 255,
        173 / 255
    ],
    "navy": [
        0,
        0,
        128 / 255
    ],
    "oldlace": [
        253 / 255,
        245 / 255,
        230 / 255
    ],
    "olive": [
        128 / 255,
        128 / 255,
        0
    ],
    "olivedrab": [
        107 / 255,
        142 / 255,
        35 / 255
    ],
    "orange": [
        1,
        165 / 255,
        0
    ],
    "orangered": [
        1,
        69 / 255,
        0
    ],
    "orchid": [
        218 / 255,
        112 / 255,
        214 / 255
    ],
    "palegoldenrod": [
        238 / 255,
        232 / 255,
        170 / 255
    ],
    "palegreen": [
        152 / 255,
        251 / 255,
        152 / 255
    ],
    "paleturquoise": [
        175 / 255,
        238 / 255,
        238 / 255
    ],
    "palevioletred": [
        219 / 255,
        112 / 255,
        147 / 255
    ],
    "papayawhip": [
        1,
        239 / 255,
        213 / 255
    ],
    "peachpuff": [
        1,
        218 / 255,
        185 / 255
    ],
    "peru": [
        205 / 255,
        133 / 255,
        63 / 255
    ],
    "pink": [
        1,
        192 / 255,
        203 / 255
    ],
    "plum": [
        221 / 255,
        160 / 255,
        221 / 255
    ],
    "powderblue": [
        176 / 255,
        224 / 255,
        230 / 255
    ],
    "purple": [
        128 / 255,
        0,
        128 / 255
    ],
    "rebeccapurple": [
        102 / 255,
        51 / 255,
        153 / 255
    ],
    "red": [
        1,
        0,
        0
    ],
    "rosybrown": [
        188 / 255,
        143 / 255,
        143 / 255
    ],
    "royalblue": [
        65 / 255,
        105 / 255,
        225 / 255
    ],
    "saddlebrown": [
        139 / 255,
        69 / 255,
        19 / 255
    ],
    "salmon": [
        250 / 255,
        128 / 255,
        114 / 255
    ],
    "sandybrown": [
        244 / 255,
        164 / 255,
        96 / 255
    ],
    "seagreen": [
        46 / 255,
        139 / 255,
        87 / 255
    ],
    "seashell": [
        1,
        245 / 255,
        238 / 255
    ],
    "sienna": [
        160 / 255,
        82 / 255,
        45 / 255
    ],
    "silver": [
        192 / 255,
        192 / 255,
        192 / 255
    ],
    "skyblue": [
        135 / 255,
        206 / 255,
        235 / 255
    ],
    "slateblue": [
        106 / 255,
        90 / 255,
        205 / 255
    ],
    "slategray": [
        112 / 255,
        128 / 255,
        144 / 255
    ],
    "slategrey": [
        112 / 255,
        128 / 255,
        144 / 255
    ],
    "snow": [
        1,
        250 / 255,
        250 / 255
    ],
    "springgreen": [
        0,
        1,
        127 / 255
    ],
    "steelblue": [
        70 / 255,
        130 / 255,
        180 / 255
    ],
    "tan": [
        210 / 255,
        180 / 255,
        140 / 255
    ],
    "teal": [
        0,
        128 / 255,
        128 / 255
    ],
    "thistle": [
        216 / 255,
        191 / 255,
        216 / 255
    ],
    "tomato": [
        1,
        99 / 255,
        71 / 255
    ],
    "turquoise": [
        64 / 255,
        224 / 255,
        208 / 255
    ],
    "violet": [
        238 / 255,
        130 / 255,
        238 / 255
    ],
    "wheat": [
        245 / 255,
        222 / 255,
        179 / 255
    ],
    "white": [
        1,
        1,
        1
    ],
    "whitesmoke": [
        245 / 255,
        245 / 255,
        245 / 255
    ],
    "yellow": [
        1,
        1,
        0
    ],
    "yellowgreen": [
        154 / 255,
        205 / 255,
        50 / 255
    ]
};
}}),
"[project]/node_modules/colorjs.io/src/spaces/srgb.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/rgbspace.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2d$linear$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/srgb-linear.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/keywords.js [app-client] (ecmascript)");
;
;
;
let coordGrammar = Array(3).fill("<percentage> | <number>[0, 255]");
let coordGrammarNumber = Array(3).fill("<number>[0, 255]");
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "srgb",
    name: "sRGB",
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2d$linear$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase: (rgb)=>{
        // convert an array of linear-light sRGB values in the range 0.0-1.0
        // to gamma corrected form
        // https://en.wikipedia.org/wiki/SRGB
        return rgb.map((val)=>{
            let sign = val < 0 ? -1 : 1;
            let abs = val * sign;
            if (abs > 0.0031308) {
                return sign * (1.055 * abs ** (1 / 2.4) - 0.055);
            }
            return 12.92 * val;
        });
    },
    toBase: (rgb)=>{
        // convert an array of sRGB values in the range 0.0 - 1.0
        // to linear light (un-companded) form.
        // https://en.wikipedia.org/wiki/SRGB
        return rgb.map((val)=>{
            let sign = val < 0 ? -1 : 1;
            let abs = val * sign;
            if (abs <= 0.04045) {
                return val / 12.92;
            }
            return sign * ((abs + 0.055) / 1.055) ** 2.4;
        });
    },
    formats: {
        "rgb": {
            coords: coordGrammar
        },
        "rgb_number": {
            name: "rgb",
            commas: true,
            coords: coordGrammarNumber,
            noAlpha: true
        },
        "color": {},
        "rgba": {
            coords: coordGrammar,
            commas: true,
            lastAlpha: true
        },
        "rgba_number": {
            name: "rgba",
            commas: true,
            coords: coordGrammarNumber
        },
        "hex": {
            type: "custom",
            toGamut: true,
            test: (str)=>/^#([a-f0-9]{3,4}){1,2}$/i.test(str),
            parse (str) {
                if (str.length <= 5) {
                    // #rgb or #rgba, duplicate digits
                    str = str.replace(/[a-f0-9]/gi, "$&$&");
                }
                let rgba = [];
                str.replace(/[a-f0-9]{2}/gi, (component)=>{
                    rgba.push(parseInt(component, 16) / 255);
                });
                return {
                    spaceId: "srgb",
                    coords: rgba.slice(0, 3),
                    alpha: rgba.slice(3)[0]
                };
            },
            serialize: (coords, alpha, { collapse = true } = {})=>{
                if (alpha < 1) {
                    coords.push(alpha);
                }
                coords = coords.map((c)=>Math.round(c * 255));
                let collapsible = collapse && coords.every((c)=>c % 17 === 0);
                let hex = coords.map((c)=>{
                    if (collapsible) {
                        return (c / 17).toString(16);
                    }
                    return c.toString(16).padStart(2, "0");
                }).join("");
                return "#" + hex;
            }
        },
        "keyword": {
            type: "custom",
            test: (str)=>/^[a-z]+$/i.test(str),
            parse (str) {
                str = str.toLowerCase();
                let ret = {
                    spaceId: "srgb",
                    coords: null,
                    alpha: 1
                };
                if (str === "transparent") {
                    ret.coords = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].black;
                    ret.alpha = 0;
                } else {
                    ret.coords = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$keywords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"][str];
                }
                if (ret.coords) {
                    return ret;
                }
            }
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/srgb.js [app-client] (ecmascript) <export default as sRGB>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sRGB": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/srgb.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/spaces/p3-linear.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/rgbspace.js [app-client] (ecmascript)");
;
const toXYZ_M = [
    [
        0.4865709486482162,
        0.26566769316909306,
        0.1982172852343625
    ],
    [
        0.2289745640697488,
        0.6917385218365064,
        0.079286914093745
    ],
    [
        0.0000000000000000,
        0.04511338185890264,
        1.043944368900976
    ]
];
const fromXYZ_M = [
    [
        2.493496911941425,
        -0.9313836179191239,
        -0.40271078445071684
    ],
    [
        -0.8294889695615747,
        1.7626640603183463,
        0.023624685841943577
    ],
    [
        0.03584583024378447,
        -0.07617238926804182,
        0.9568845240076872
    ]
];
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "p3-linear",
    cssId: "--display-p3-linear",
    name: "Linear P3",
    white: "D65",
    toXYZ_M,
    fromXYZ_M
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/p3.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/rgbspace.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$p3$2d$linear$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/p3-linear.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/srgb.js [app-client] (ecmascript)");
;
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$rgbspace$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "p3",
    cssId: "display-p3",
    name: "P3",
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$p3$2d$linear$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    // Gamma encoding/decoding is the same as sRGB
    fromBase: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromBase,
    toBase: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].toBase
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/p3.js [app-client] (ecmascript) <export default as P3>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "P3": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$p3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$p3$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/p3.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/spaces/hsl.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/srgb.js [app-client] (ecmascript)");
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "hsl",
    name: "HSL",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        s: {
            range: [
                0,
                100
            ],
            name: "Saturation"
        },
        l: {
            range: [
                0,
                100
            ],
            name: "Lightness"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$srgb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    // Adapted from https://drafts.csswg.org/css-color-4/better-rgbToHsl.js
    fromBase: (rgb)=>{
        let max = Math.max(...rgb);
        let min = Math.min(...rgb);
        let [r, g, b] = rgb;
        let [h, s, l] = [
            NaN,
            0,
            (min + max) / 2
        ];
        let d = max - min;
        if (d !== 0) {
            s = l === 0 || l === 1 ? 0 : (max - l) / Math.min(l, 1 - l);
            switch(max){
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
            }
            h = h * 60;
        }
        // Very out of gamut colors can produce negative saturation
        // If so, just rotate the hue by 180 and use a positive saturation
        // see https://github.com/w3c/csswg-drafts/issues/9222
        if (s < 0) {
            h += 180;
            s = Math.abs(s);
        }
        if (h >= 360) {
            h -= 360;
        }
        return [
            h,
            s * 100,
            l * 100
        ];
    },
    // Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative
    toBase: (hsl)=>{
        let [h, s, l] = hsl;
        h = h % 360;
        if (h < 0) {
            h += 360;
        }
        s /= 100;
        l /= 100;
        function f(n) {
            let k = (n + h / 30) % 12;
            let a = s * Math.min(l, 1 - l);
            return l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));
        }
        return [
            f(0),
            f(8),
            f(4)
        ];
    },
    formats: {
        "hsl": {
            coords: [
                "<number> | <angle>",
                "<percentage>",
                "<percentage>"
            ]
        },
        "hsla": {
            coords: [
                "<number> | <angle>",
                "<percentage>",
                "<percentage>"
            ],
            commas: true,
            lastAlpha: true
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/hsl.js [app-client] (ecmascript) <export default as HSL>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HSL": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/hsl.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/spaces/hsv.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/hsl.js [app-client] (ecmascript)");
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "hsv",
    name: "HSV",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        s: {
            range: [
                0,
                100
            ],
            name: "Saturation"
        },
        v: {
            range: [
                0,
                100
            ],
            name: "Value"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hsl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    // https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion
    fromBase (hsl) {
        let [h, s, l] = hsl;
        s /= 100;
        l /= 100;
        let v = l + s * Math.min(l, 1 - l);
        return [
            h,
            v === 0 ? 0 : 200 * (1 - l / v),
            100 * v
        ];
    },
    // https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion
    toBase (hsv) {
        let [h, s, v] = hsv;
        s /= 100;
        v /= 100;
        let l = v * (1 - s / 2);
        return [
            h,
            l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l) * 100,
            l * 100
        ];
    },
    formats: {
        color: {
            id: "--hsv",
            coords: [
                "<number> | <angle>",
                "<percentage> | <number>",
                "<percentage> | <number>"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/hwb.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hsv$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/hsv.js [app-client] (ecmascript)");
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "hwb",
    name: "HWB",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        w: {
            range: [
                0,
                100
            ],
            name: "Whiteness"
        },
        b: {
            range: [
                0,
                100
            ],
            name: "Blackness"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hsv$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (hsv) {
        let [h, s, v] = hsv;
        return [
            h,
            v * (100 - s) / 100,
            100 - v
        ];
    },
    toBase (hwb) {
        let [h, w, b] = hwb;
        // Now convert percentages to [0..1]
        w /= 100;
        b /= 100;
        // Achromatic check (white plus black >= 1)
        let sum = w + b;
        if (sum >= 1) {
            let gray = w / sum;
            return [
                h,
                0,
                gray * 100
            ];
        }
        let v = 1 - b;
        let s = v === 0 ? 0 : 1 - w / v;
        return [
            h,
            s * 100,
            v * 100
        ];
    },
    formats: {
        "hwb": {
            coords: [
                "<number> | <angle>",
                "<percentage> | <number>",
                "<percentage> | <number>"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/hwb.js [app-client] (ecmascript) <export default as HWB>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HWB": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hwb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hwb$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/hwb.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/spaces/xyz-d50.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)");
;
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "xyz-d50",
    name: "XYZ D50",
    white: "D50",
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase: (coords)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].white, "D50", coords),
    toBase: (coords)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])("D50", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].white, coords)
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/lab.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d50$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d50.js [app-client] (ecmascript)");
;
;
;
// κ * ε  = 2^3 = 8
const ε = 216 / 24389; // 6^3/29^3 == (24/116)^3
const ε3 = 24 / 116;
const κ = 24389 / 27; // 29^3/3^3
let white = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WHITES"].D50;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "lab",
    name: "Lab",
    coords: {
        l: {
            refRange: [
                0,
                100
            ],
            name: "Lightness"
        },
        a: {
            refRange: [
                -125,
                125
            ]
        },
        b: {
            refRange: [
                -125,
                125
            ]
        }
    },
    // Assuming XYZ is relative to D50, convert to CIE Lab
    // from CIE standard, which now defines these as a rational fraction
    white,
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d50$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    // Convert D50-adapted XYX to Lab
    //  CIE 15.3:2004 section 8.2.1.1
    fromBase (XYZ) {
        // compute xyz, which is XYZ scaled relative to reference white
        let xyz = XYZ.map((value, i)=>value / white[i]);
        // now compute f
        let f = xyz.map((value)=>value > ε ? Math.cbrt(value) : (κ * value + 16) / 116);
        return [
            116 * f[1] - 16,
            500 * (f[0] - f[1]),
            200 * (f[1] - f[2])
        ];
    },
    // Convert Lab to D50-adapted XYZ
    // Same result as CIE 15.3:2004 Appendix D although the derivation is different
    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
    toBase (Lab) {
        // compute f, starting with the luminance-related term
        let f = [];
        f[1] = (Lab[0] + 16) / 116;
        f[0] = Lab[1] / 500 + f[1];
        f[2] = f[1] - Lab[2] / 200;
        // compute xyz
        let xyz = [
            f[0] > ε3 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / κ,
            Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ,
            f[2] > ε3 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / κ
        ];
        // Compute XYZ by scaling xyz by reference white
        return xyz.map((value, i)=>value * white[i]);
    },
    formats: {
        "lab": {
            coords: [
                "<number> | <percentage>",
                "<number> | <percentage>[-1,1]",
                "<number> | <percentage>[-1,1]"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/lab.js [app-client] (ecmascript) <export default as Lab>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Lab": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lab.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "adjust": (()=>adjust),
    "constrain": (()=>constrain)
});
function constrain(angle) {
    return (angle % 360 + 360) % 360;
}
function adjust(arc, angles) {
    if (arc === "raw") {
        return angles;
    }
    let [a1, a2] = angles.map(constrain);
    let angleDiff = a2 - a1;
    if (arc === "increasing") {
        if (angleDiff < 0) {
            a2 += 360;
        }
    } else if (arc === "decreasing") {
        if (angleDiff > 0) {
            a1 += 360;
        }
    } else if (arc === "longer") {
        if (-180 < angleDiff && angleDiff < 180) {
            if (angleDiff > 0) {
                a1 += 360;
            } else {
                a2 += 360;
            }
        }
    } else if (arc === "shorter") {
        if (angleDiff > 180) {
            a1 += 360;
        } else if (angleDiff < -180) {
            a2 += 360;
        }
    }
    return [
        a1,
        a2
    ];
}
}}),
"[project]/node_modules/colorjs.io/src/spaces/lch.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lab.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)");
;
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "lch",
    name: "LCH",
    coords: {
        l: {
            refRange: [
                0,
                100
            ],
            name: "Lightness"
        },
        c: {
            refRange: [
                0,
                150
            ],
            name: "Chroma"
        },
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (Lab) {
        // Convert to polar form
        let [L, a, b] = Lab;
        let hue;
        const ε = 0.02;
        if (Math.abs(a) < ε && Math.abs(b) < ε) {
            hue = NaN;
        } else {
            hue = Math.atan2(b, a) * 180 / Math.PI;
        }
        return [
            L,
            Math.sqrt(a ** 2 + b ** 2),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(hue)
        ];
    },
    toBase (LCH) {
        // Convert from polar form
        let [Lightness, Chroma, Hue] = LCH;
        // Clamp any negative Chroma
        if (Chroma < 0) {
            Chroma = 0;
        }
        // Deal with NaN Hue
        if (isNaN(Hue)) {
            Hue = 0;
        }
        return [
            Lightness,
            Chroma * Math.cos(Hue * Math.PI / 180),
            Chroma * Math.sin(Hue * Math.PI / 180)
        ];
    },
    formats: {
        "lch": {
            coords: [
                "<number> | <percentage>",
                "<number> | <percentage>",
                "<number> | <angle>"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/lch.js [app-client] (ecmascript) <export default as LCH>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LCH": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lch.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/spaces/oklab.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)");
;
;
;
// Recalculated for consistent reference white
// see https://github.com/w3c/csswg-drafts/issues/6642#issuecomment-943521484
const XYZtoLMS_M = [
    [
        0.8190224379967030,
        0.3619062600528904,
        -0.1288737815209879
    ],
    [
        0.0329836539323885,
        0.9292868615863434,
        0.0361446663506424
    ],
    [
        0.0481771893596242,
        0.2642395317527308,
        0.6335478284694309
    ]
];
// inverse of XYZtoLMS_M
const LMStoXYZ_M = [
    [
        1.2268798758459243,
        -0.5578149944602171,
        0.2813910456659647
    ],
    [
        -0.0405757452148008,
        1.1122868032803170,
        -0.0717110580655164
    ],
    [
        -0.0763729366746601,
        -0.4214933324022432,
        1.5869240198367816
    ]
];
const LMStoLab_M = [
    [
        0.2104542683093140,
        0.7936177747023054,
        -0.0040720430116193
    ],
    [
        1.9779985324311684,
        -2.4285922420485799,
        0.4505937096174110
    ],
    [
        0.0259040424655478,
        0.7827717124575296,
        -0.8086757549230774
    ]
];
// LMStoIab_M inverted
const LabtoLMS_M = [
    [
        1.0000000000000000,
        0.3963377773761749,
        0.2158037573099136
    ],
    [
        1.0000000000000000,
        -0.1055613458156586,
        -0.0638541728258133
    ],
    [
        1.0000000000000000,
        -0.0894841775298119,
        -1.2914855480194092
    ]
];
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "oklab",
    name: "Oklab",
    coords: {
        l: {
            refRange: [
                0,
                1
            ],
            name: "Lightness"
        },
        a: {
            refRange: [
                -0.4,
                0.4
            ]
        },
        b: {
            refRange: [
                -0.4,
                0.4
            ]
        }
    },
    // Note that XYZ is relative to D65
    white: "D65",
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (XYZ) {
        // move to LMS cone domain
        let LMS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(XYZtoLMS_M, XYZ);
        // non-linearity
        let LMSg = LMS.map((val)=>Math.cbrt(val));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(LMStoLab_M, LMSg);
    },
    toBase (OKLab) {
        // move to LMS cone domain
        let LMSg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(LabtoLMS_M, OKLab);
        // restore linearity
        let LMS = LMSg.map((val)=>val ** 3);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(LMStoXYZ_M, LMS);
    },
    formats: {
        "oklab": {
            coords: [
                "<percentage> | <number>",
                "<number> | <percentage>[-1,1]",
                "<number> | <percentage>[-1,1]"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/oklab.js [app-client] (ecmascript) <export default as OKLab>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OKLab": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/oklab.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/spaces/oklch.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/oklab.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)");
;
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "oklch",
    name: "Oklch",
    coords: {
        l: {
            refRange: [
                0,
                1
            ],
            name: "Lightness"
        },
        c: {
            refRange: [
                0,
                0.4
            ],
            name: "Chroma"
        },
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    white: "D65",
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (oklab) {
        // Convert to polar form
        let [L, a, b] = oklab;
        let h;
        const ε = 0.0002; // chromatic components much smaller than a,b
        if (Math.abs(a) < ε && Math.abs(b) < ε) {
            h = NaN;
        } else {
            h = Math.atan2(b, a) * 180 / Math.PI;
        }
        return [
            L,
            Math.sqrt(a ** 2 + b ** 2),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(h)
        ];
    },
    // Convert from polar form
    toBase (oklch) {
        let [L, C, h] = oklch;
        let a, b;
        // check for NaN hue
        if (isNaN(h)) {
            a = 0;
            b = 0;
        } else {
            a = C * Math.cos(h * Math.PI / 180);
            b = C * Math.sin(h * Math.PI / 180);
        }
        return [
            L,
            a,
            b
        ];
    },
    formats: {
        "oklch": {
            coords: [
                "<percentage> | <number>",
                "<number> | <percentage>[0,1]",
                "<number> | <angle>"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/oklch.js [app-client] (ecmascript) <export default as OKLCH>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OKLCH": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/oklch.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript) <export default as ColorSpace>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ColorSpace": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaE2000.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lab.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
;
;
// deltaE2000 is a statistically significant improvement
// and is recommended by the CIE and Idealliance
// especially for color differences less than 10 deltaE76
// but is wicked complicated
// and many implementations have small errors!
// DeltaE2000 is also discontinuous; in case this
// matters to you, use deltaECMC instead.
const Gfactor = 25 ** 7;
const π = Math.PI;
const r2d = 180 / π;
const d2r = π / 180;
function pow7(x) {
    // Faster than x ** 7 or Math.pow(x, 7)
    const x2 = x * x;
    const x7 = x2 * x2 * x2 * x;
    return x7;
}
function __TURBOPACK__default__export__(color, sample, { kL = 1, kC = 1, kH = 1 } = {}) {
    [color, sample] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])([
        color,
        sample
    ]);
    // Given this color as the reference
    // and the function parameter as the sample,
    // calculate deltaE 2000.
    // This implementation assumes the parametric
    // weighting factors kL, kC and kH
    // for the influence of viewing conditions
    // are all 1, as sadly seems typical.
    // kL should be increased for lightness texture or noise
    // and kC increased for chroma noise
    let [L1, a1, b1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(color);
    let C1 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"], [
        L1,
        a1,
        b1
    ])[1];
    let [L2, a2, b2] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(sample);
    let C2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"], [
        L2,
        a2,
        b2
    ])[1];
    // Check for negative Chroma,
    // which might happen through
    // direct user input of LCH values
    if (C1 < 0) {
        C1 = 0;
    }
    if (C2 < 0) {
        C2 = 0;
    }
    let Cbar = (C1 + C2) / 2; // mean Chroma
    // calculate a-axis asymmetry factor from mean Chroma
    // this turns JND ellipses for near-neutral colors back into circles
    let C7 = pow7(Cbar);
    let G = 0.5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));
    // scale a axes by asymmetry factor
    // this by the way is why there is no Lab2000 colorspace
    let adash1 = (1 + G) * a1;
    let adash2 = (1 + G) * a2;
    // calculate new Chroma from scaled a and original b axes
    let Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);
    let Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);
    // calculate new hues, with zero hue for true neutrals
    // and in degrees, not radians
    let h1 = adash1 === 0 && b1 === 0 ? 0 : Math.atan2(b1, adash1);
    let h2 = adash2 === 0 && b2 === 0 ? 0 : Math.atan2(b2, adash2);
    if (h1 < 0) {
        h1 += 2 * π;
    }
    if (h2 < 0) {
        h2 += 2 * π;
    }
    h1 *= r2d;
    h2 *= r2d;
    // Lightness and Chroma differences; sign matters
    let ΔL = L2 - L1;
    let ΔC = Cdash2 - Cdash1;
    // Hue difference, getting the sign correct
    let hdiff = h2 - h1;
    let hsum = h1 + h2;
    let habs = Math.abs(hdiff);
    let Δh;
    if (Cdash1 * Cdash2 === 0) {
        Δh = 0;
    } else if (habs <= 180) {
        Δh = hdiff;
    } else if (hdiff > 180) {
        Δh = hdiff - 360;
    } else if (hdiff < -180) {
        Δh = hdiff + 360;
    } else {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].warn("the unthinkable has happened");
    }
    // weighted Hue difference, more for larger Chroma
    let ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r / 2);
    // calculate mean Lightness and Chroma
    let Ldash = (L1 + L2) / 2;
    let Cdash = (Cdash1 + Cdash2) / 2;
    let Cdash7 = pow7(Cdash);
    // Compensate for non-linearity in the blue region of Lab.
    // Four possibilities for hue weighting factor,
    // depending on the angles, to get the correct sign
    let hdash;
    if (Cdash1 * Cdash2 === 0) {
        hdash = hsum; // which should be zero
    } else if (habs <= 180) {
        hdash = hsum / 2;
    } else if (hsum < 360) {
        hdash = (hsum + 360) / 2;
    } else {
        hdash = (hsum - 360) / 2;
    }
    // positional corrections to the lack of uniformity of CIELAB
    // These are all trying to make JND ellipsoids more like spheres
    // SL Lightness crispening factor
    // a background with L=50 is assumed
    let lsq = (Ldash - 50) ** 2;
    let SL = 1 + 0.015 * lsq / Math.sqrt(20 + lsq);
    // SC Chroma factor, similar to those in CMC and deltaE 94 formulae
    let SC = 1 + 0.045 * Cdash;
    // Cross term T for blue non-linearity
    let T = 1;
    T -= 0.17 * Math.cos((hdash - 30) * d2r);
    T += 0.24 * Math.cos(2 * hdash * d2r);
    T += 0.32 * Math.cos((3 * hdash + 6) * d2r);
    T -= 0.20 * Math.cos((4 * hdash - 63) * d2r);
    // SH Hue factor depends on Chroma,
    // as well as adjusted hue angle like deltaE94.
    let SH = 1 + 0.015 * Cdash * T;
    // RT Hue rotation term compensates for rotation of JND ellipses
    // and Munsell constant hue lines
    // in the medium-high Chroma blue region
    // (Hue 225 to 315)
    let Δθ = 30 * Math.exp(-1 * ((hdash - 275) / 25) ** 2);
    let RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));
    let RT = -1 * Math.sin(2 * Δθ * d2r) * RC;
    // Finally calculate the deltaE, term by term as root sume of squares
    let dE = (ΔL / (kL * SL)) ** 2;
    dE += (ΔC / (kC * SC)) ** 2;
    dE += (ΔH / (kH * SH)) ** 2;
    dE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));
    return Math.sqrt(dE);
// Yay!!!
}
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaEOK.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// More accurate color-difference formulae
// than the simple 1976 Euclidean distance in CIE Lab
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/oklab.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
function __TURBOPACK__default__export__(color, sample) {
    [color, sample] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])([
        color,
        sample
    ]);
    // Given this color as the reference
    // and a sample,
    // calculate deltaEOK, term by term as root sum of squares
    let [L1, a1, b1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(color);
    let [L2, a2, b2] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(sample);
    let ΔL = L1 - L2;
    let Δa = a1 - a2;
    let Δb = b1 - b2;
    return Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);
}
}}),
"[project]/node_modules/colorjs.io/src/inGamut.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>inGamut)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
const ε = .000075;
function inGamut(color, space, { epsilon = ε } = {}) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    if (!space) {
        space = color.space;
    }
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    let coords = color.coords;
    if (space !== color.space) {
        coords = space.from(color);
    }
    return space.inGamut(coords, {
        epsilon
    });
}
}}),
"[project]/node_modules/colorjs.io/src/getAll.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>getAll)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
function getAll(color, space) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    if (!space || color.space.equals(space)) {
        // No conversion needed
        return color.coords.slice();
    }
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    return space.from(color);
}
}}),
"[project]/node_modules/colorjs.io/src/get.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>get)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getAll.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
;
function get(color, prop) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    let { space, index } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].resolveCoord(prop, color.space);
    let coords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space);
    return coords[index];
}
}}),
"[project]/node_modules/colorjs.io/src/setAll.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>setAll)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
function setAll(color, space, coords) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    color.coords = space.to(color.space, coords);
    return color;
}
setAll.returns = "color";
}}),
"[project]/node_modules/colorjs.io/src/set.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>set)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/get.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getAll.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$setAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/setAll.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
;
;
;
;
;
;
function set(color, prop, value) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    if (arguments.length === 2 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["type"])(arguments[1]) === "object") {
        // Argument is an object literal
        let object = arguments[1];
        for(let p in object){
            set(color, p, object[p]);
        }
    } else {
        if (typeof value === "function") {
            value = value((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, prop));
        }
        let { space, index } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].resolveCoord(prop, color.space);
        let coords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space);
        coords[index] = value;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$setAll$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space, coords);
    }
    return color;
}
set.returns = "color";
}}),
"[project]/node_modules/colorjs.io/src/clone.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>clone)
});
function clone(color) {
    return {
        space: color.space,
        coords: color.coords.slice(),
        alpha: color.alpha
    };
}
}}),
"[project]/node_modules/colorjs.io/src/distance.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>distance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
;
function distance(color1, color2, space = "lab") {
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    // Assume getColor() is called on color in space.from()
    let coords1 = space.from(color1);
    let coords2 = space.from(color2);
    return Math.sqrt(coords1.reduce((acc, c1, i)=>{
        let c2 = coords2[i];
        if (isNaN(c1) || isNaN(c2)) {
            return acc;
        }
        return acc + (c2 - c1) ** 2;
    }, 0));
}
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaE76.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>deltaE76)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$distance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/distance.js [app-client] (ecmascript)");
;
;
function deltaE76(color, sample) {
    // Assume getColor() is called in the distance function
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$distance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, sample, "lab");
}
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaECMC.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lab.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/lch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
;
// More accurate color-difference formulae
// than the simple 1976 Euclidean distance in Lab
// CMC by the Color Measurement Committee of the
// Bradford Society of Dyeists and Colorsts, 1994.
// Uses LCH rather than Lab,
// with different weights for L, C and H differences
// A nice increase in accuracy for modest increase in complexity
const π = Math.PI;
const d2r = π / 180;
function __TURBOPACK__default__export__(color, sample, { l = 2, c = 1 } = {}) {
    [color, sample] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])([
        color,
        sample
    ]);
    // Given this color as the reference
    // and a sample,
    // calculate deltaE CMC.
    // This implementation assumes the parametric
    // weighting factors l:c are 2:1
    // which is typical for non-textile uses.
    let [L1, a1, b1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(color);
    let [, C1, H1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"], [
        L1,
        a1,
        b1
    ]);
    let [L2, a2, b2] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(sample);
    let C2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$lab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"], [
        L2,
        a2,
        b2
    ])[1];
    // let [L1, a1, b1] = color.getAll(lab);
    // let C1 = color.get("lch.c");
    // let H1 = color.get("lch.h");
    // let [L2, a2, b2] = sample.getAll(lab);
    // let C2 = sample.get("lch.c");
    // Check for negative Chroma,
    // which might happen through
    // direct user input of LCH values
    if (C1 < 0) {
        C1 = 0;
    }
    if (C2 < 0) {
        C2 = 0;
    }
    // we don't need H2 as ΔH is calculated from Δa, Δb and ΔC
    // Lightness and Chroma differences
    // These are (color - sample), unlike deltaE2000
    let ΔL = L1 - L2;
    let ΔC = C1 - C2;
    let Δa = a1 - a2;
    let Δb = b1 - b2;
    // weighted Hue difference, less for larger Chroma difference
    let H2 = Δa ** 2 + Δb ** 2 - ΔC ** 2;
    // due to roundoff error it is possible that, for zero a and b,
    // ΔC > Δa + Δb is 0, resulting in attempting
    // to take the square root of a negative number
    // trying instead the equation from Industrial Color Physics
    // By Georg A. Klein
    // let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));
    // console.log({ΔH});
    // This gives the same result to 12 decimal places
    // except it sometimes NaNs when trying to root a negative number
    // let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!
    // positional corrections to the lack of uniformity of CIELAB
    // These are all trying to make JND ellipsoids more like spheres
    // SL Lightness crispening factor, depends entirely on L1 not L2
    let SL = 0.511; // linear portion of the Y to L transfer function
    if (L1 >= 16) {
        SL = 0.040975 * L1 / (1 + 0.01765 * L1);
    }
    // SC Chroma factor
    let SC = 0.0638 * C1 / (1 + 0.0131 * C1) + 0.638;
    // Cross term T for blue non-linearity
    let T;
    if (Number.isNaN(H1)) {
        H1 = 0;
    }
    if (H1 >= 164 && H1 <= 345) {
        T = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));
    } else {
        T = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));
    }
    // console.log({T});
    // SH Hue factor also depends on C1,
    let C4 = Math.pow(C1, 4);
    let F = Math.sqrt(C4 / (C4 + 1900));
    let SH = SC * (F * T + 1 - F);
    // Finally calculate the deltaE, term by term as root sume of squares
    let dE = (ΔL / (l * SL)) ** 2;
    dE += (ΔC / (c * SC)) ** 2;
    dE += H2 / SH ** 2;
    // dE += (ΔH / SH)  ** 2;
    return Math.sqrt(dE);
// Yay!!!
}
}}),
"[project]/node_modules/colorjs.io/src/spaces/xyz-abs-d65.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)");
;
;
const Yw = 203; // absolute luminance of media white
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    // Absolute CIE XYZ, with a D65 whitepoint,
    // as used in most HDR colorspaces as a starting point.
    // SDR spaces are converted per BT.2048
    // so that diffuse, media white is 203 cd/m²
    id: "xyz-abs-d65",
    cssId: "--xyz-abs-d65",
    name: "Absolute XYZ D65",
    coords: {
        x: {
            refRange: [
                0,
                9504.7
            ],
            name: "Xa"
        },
        y: {
            refRange: [
                0,
                10000
            ],
            name: "Ya"
        },
        z: {
            refRange: [
                0,
                10888.3
            ],
            name: "Za"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (XYZ) {
        // Make XYZ absolute, not relative to media white
        // Maximum luminance in PQ is 10,000 cd/m²
        // Relative XYZ has Y=1 for media white
        return XYZ.map((v)=>Math.max(v * Yw, 0));
    },
    toBase (AbsXYZ) {
        // Convert to media-white relative XYZ
        return AbsXYZ.map((v)=>Math.max(v / Yw, 0));
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/jzazbz.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$abs$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-abs-d65.js [app-client] (ecmascript)");
;
;
;
const b = 1.15;
const g = 0.66;
const n = 2610 / 2 ** 14;
const ninv = 2 ** 14 / 2610;
const c1 = 3424 / 2 ** 12;
const c2 = 2413 / 2 ** 7;
const c3 = 2392 / 2 ** 7;
const p = 1.7 * 2523 / 2 ** 5;
const pinv = 2 ** 5 / (1.7 * 2523);
const d = -0.56;
const d0 = 1.6295499532821566E-11;
const XYZtoCone_M = [
    [
        0.41478972,
        0.579999,
        0.0146480
    ],
    [
        -0.2015100,
        1.120649,
        0.0531008
    ],
    [
        -0.0166008,
        0.264800,
        0.6684799
    ]
];
// XYZtoCone_M inverted
const ConetoXYZ_M = [
    [
        1.9242264357876067,
        -1.0047923125953657,
        0.037651404030618
    ],
    [
        0.35031676209499907,
        0.7264811939316552,
        -0.06538442294808501
    ],
    [
        -0.09098281098284752,
        -0.3127282905230739,
        1.5227665613052603
    ]
];
const ConetoIab_M = [
    [
        0.5,
        0.5,
        0
    ],
    [
        3.524000,
        -4.066708,
        0.542708
    ],
    [
        0.199076,
        1.096799,
        -1.295875
    ]
];
// ConetoIab_M inverted
const IabtoCone_M = [
    [
        1,
        0.1386050432715393,
        0.05804731615611886
    ],
    [
        0.9999999999999999,
        -0.1386050432715393,
        -0.05804731615611886
    ],
    [
        0.9999999999999998,
        -0.09601924202631895,
        -0.8118918960560388
    ]
];
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "jzazbz",
    name: "Jzazbz",
    coords: {
        jz: {
            refRange: [
                0,
                1
            ],
            name: "Jz"
        },
        az: {
            refRange: [
                -0.5,
                0.5
            ]
        },
        bz: {
            refRange: [
                -0.5,
                0.5
            ]
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$abs$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (XYZ) {
        // First make XYZ absolute, not relative to media white
        // Maximum luminance in PQ is 10,000 cd/m²
        // Relative XYZ has Y=1 for media white
        // BT.2048 says media white Y=203 at PQ 58
        let [Xa, Ya, Za] = XYZ;
        // modify X and Y
        let Xm = b * Xa - (b - 1) * Za;
        let Ym = g * Ya - (g - 1) * Xa;
        // move to LMS cone domain
        let LMS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(XYZtoCone_M, [
            Xm,
            Ym,
            Za
        ]);
        // PQ-encode LMS
        let PQLMS = LMS.map(function(val) {
            let num = c1 + c2 * (val / 10000) ** n;
            let denom = 1 + c3 * (val / 10000) ** n;
            return (num / denom) ** p;
        });
        // almost there, calculate Iz az bz
        let [Iz, az, bz] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(ConetoIab_M, PQLMS);
        // console.log({Iz, az, bz});
        let Jz = (1 + d) * Iz / (1 + d * Iz) - d0;
        return [
            Jz,
            az,
            bz
        ];
    },
    toBase (Jzazbz) {
        let [Jz, az, bz] = Jzazbz;
        let Iz = (Jz + d0) / (1 + d - d * (Jz + d0));
        // bring into LMS cone domain
        let PQLMS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(IabtoCone_M, [
            Iz,
            az,
            bz
        ]);
        // convert from PQ-coded to linear-light
        let LMS = PQLMS.map(function(val) {
            let num = c1 - val ** pinv;
            let denom = c3 * val ** pinv - c2;
            let x = 10000 * (num / denom) ** ninv;
            return x; // luminance relative to diffuse white, [0, 70 or so].
        });
        // modified abs XYZ
        let [Xm, Ym, Za] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(ConetoXYZ_M, LMS);
        // restore standard D50 relative XYZ, relative to media white
        let Xa = (Xm + (b - 1) * Za) / b;
        let Ya = (Ym + (g - 1) * Xa) / g;
        return [
            Xa,
            Ya,
            Za
        ];
    },
    formats: {
        // https://drafts.csswg.org/css-color-hdr/#Jzazbz
        "color": {
            coords: [
                "<number> | <percentage>",
                "<number> | <percentage>[-1,1]",
                "<number> | <percentage>[-1,1]"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/jzczhz.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$jzazbz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/jzazbz.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)");
;
;
;
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "jzczhz",
    name: "JzCzHz",
    coords: {
        jz: {
            refRange: [
                0,
                1
            ],
            name: "Jz"
        },
        cz: {
            refRange: [
                0,
                1
            ],
            name: "Chroma"
        },
        hz: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$jzazbz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (jzazbz) {
        // Convert to polar form
        let [Jz, az, bz] = jzazbz;
        let hue;
        const ε = 0.0002; // chromatic components much smaller than a,b
        if (Math.abs(az) < ε && Math.abs(bz) < ε) {
            hue = NaN;
        } else {
            hue = Math.atan2(bz, az) * 180 / Math.PI;
        }
        return [
            Jz,
            Math.sqrt(az ** 2 + bz ** 2),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(hue)
        ];
    },
    toBase (jzczhz) {
        // Convert from polar form
        // debugger;
        return [
            jzczhz[0],
            jzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180),
            jzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180)
        ];
    }
});
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaEJz.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$jzczhz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/jzczhz.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
function __TURBOPACK__default__export__(color, sample) {
    [color, sample] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])([
        color,
        sample
    ]);
    // Given this color as the reference
    // and a sample,
    // calculate deltaE in JzCzHz.
    let [Jz1, Cz1, Hz1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$jzczhz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(color);
    let [Jz2, Cz2, Hz2] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$jzczhz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(sample);
    // Lightness and Chroma differences
    // sign does not matter as they are squared.
    let ΔJ = Jz1 - Jz2;
    let ΔC = Cz1 - Cz2;
    // length of chord for ΔH
    if (Number.isNaN(Hz1) && Number.isNaN(Hz2)) {
        // both undefined hues
        Hz1 = 0;
        Hz2 = 0;
    } else if (Number.isNaN(Hz1)) {
        // one undefined, set to the defined hue
        Hz1 = Hz2;
    } else if (Number.isNaN(Hz2)) {
        Hz2 = Hz1;
    }
    let Δh = Hz1 - Hz2;
    let ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(Δh / 2 * (Math.PI / 180));
    return Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);
}
}}),
"[project]/node_modules/colorjs.io/src/spaces/ictcp.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$abs$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-abs-d65.js [app-client] (ecmascript)");
;
;
;
const c1 = 3424 / 4096;
const c2 = 2413 / 128;
const c3 = 2392 / 128;
const m1 = 2610 / 16384;
const m2 = 2523 / 32;
const im1 = 16384 / 2610;
const im2 = 32 / 2523;
// The matrix below includes the 4% crosstalk components
// and is from the Dolby "What is ICtCp" paper"
const XYZtoLMS_M = [
    [
        0.3592832590121217,
        0.6976051147779502,
        -0.0358915932320290
    ],
    [
        -0.1920808463704993,
        1.1004767970374321,
        0.0753748658519118
    ],
    [
        0.0070797844607479,
        0.0748396662186362,
        0.8433265453898765
    ]
];
// linear-light Rec.2020 to LMS, again with crosstalk
// rational terms from Jan Fröhlich,
// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97
// and ITU-R BT.2124-0 p.2
/*
const Rec2020toLMS_M = [
	[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],
	[  683 / 4096,  2951 / 4096,   462 / 4096 ],
	[   99 / 4096,   309 / 4096,  3688 / 4096 ]
];
*/ // this includes the Ebner LMS coefficients,
// the rotation, and the scaling to [-0.5,0.5] range
// rational terms from Fröhlich p.97
// and ITU-R BT.2124-0 pp.2-3
const LMStoIPT_M = [
    [
        2048 / 4096,
        2048 / 4096,
        0
    ],
    [
        6610 / 4096,
        -13613 / 4096,
        7003 / 4096
    ],
    [
        17933 / 4096,
        -17390 / 4096,
        -543 / 4096
    ]
];
// inverted matrices, calculated from the above
const IPTtoLMS_M = [
    [
        0.9999999999999998,
        0.0086090370379328,
        0.1110296250030260
    ],
    [
        0.9999999999999998,
        -0.0086090370379328,
        -0.1110296250030259
    ],
    [
        0.9999999999999998,
        0.5600313357106791,
        -0.3206271749873188
    ]
];
/*
const LMStoRec2020_M = [
	[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],
	[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],
	[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]
];
*/ const LMStoXYZ_M = [
    [
        2.0701522183894223,
        -1.3263473389671563,
        0.2066510476294053
    ],
    [
        0.3647385209748072,
        0.6805660249472273,
        -0.0453045459220347
    ],
    [
        -0.0497472075358123,
        -0.0492609666966131,
        1.1880659249923042
    ]
];
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "ictcp",
    name: "ICTCP",
    // From BT.2100-2 page 7:
    // During production, signal values are expected to exceed the
    // range E′ = [0.0 : 1.0]. This provides processing headroom and avoids
    // signal degradation during cascaded processing. Such values of E′,
    // below 0.0 or exceeding 1.0, should not be clipped during production
    // and exchange.
    // Values below 0.0 should not be clipped in reference displays (even
    // though they represent “negative” light) to allow the black level of
    // the signal (LB) to be properly set using test signals known as “PLUGE”
    coords: {
        i: {
            refRange: [
                0,
                1
            ],
            name: "I"
        },
        ct: {
            refRange: [
                -0.5,
                0.5
            ],
            name: "CT"
        },
        cp: {
            refRange: [
                -0.5,
                0.5
            ],
            name: "CP"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$abs$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (XYZ) {
        // move to LMS cone domain
        let LMS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(XYZtoLMS_M, XYZ);
        return LMStoICtCp(LMS);
    },
    toBase (ICtCp) {
        let LMS = ICtCptoLMS(ICtCp);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(LMStoXYZ_M, LMS);
    }
});
function LMStoICtCp(LMS) {
    // apply the PQ EOTF
    // we can't ever be dividing by zero because of the "1 +" in the denominator
    let PQLMS = LMS.map(function(val) {
        let num = c1 + c2 * (val / 10000) ** m1;
        let denom = 1 + c3 * (val / 10000) ** m1;
        return (num / denom) ** m2;
    });
    // LMS to IPT, with rotation for Y'C'bC'r compatibility
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(LMStoIPT_M, PQLMS);
}
function ICtCptoLMS(ICtCp) {
    let PQLMS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(IPTtoLMS_M, ICtCp);
    // From BT.2124-0 Annex 2 Conversion 3
    let LMS = PQLMS.map(function(val) {
        let num = Math.max(val ** im2 - c1, 0);
        let denom = c2 - c3 * val ** im2;
        return 10000 * (num / denom) ** im1;
    });
    return LMS;
}
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaEITP.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$ictcp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/ictcp.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
function __TURBOPACK__default__export__(color, sample) {
    [color, sample] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])([
        color,
        sample
    ]);
    // Given this color as the reference
    // and a sample,
    // calculate deltaE in ICtCp
    // which is simply the Euclidean distance
    let [I1, T1, P1] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$ictcp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(color);
    let [I2, T2, P2] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$ictcp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(sample);
    // the 0.25 factor is to undo the encoding scaling in Ct
    // the 720 is so that 1 deltaE = 1 JND
    // per  ITU-R BT.2124-0 p.3
    return 720 * Math.sqrt((I1 - I2) ** 2 + 0.25 * (T1 - T2) ** 2 + (P1 - P2) ** 2);
}
}}),
"[project]/node_modules/colorjs.io/src/spaces/cam16.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "adapt": (()=>adapt),
    "default": (()=>__TURBOPACK__default__export__),
    "environment": (()=>environment),
    "fromCam16": (()=>fromCam16),
    "hueQuadrature": (()=>hueQuadrature),
    "invHueQuadrature": (()=>invHueQuadrature),
    "toCam16": (()=>toCam16),
    "unadapt": (()=>unadapt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/multiply-matrices.js [app-client] (ecmascript) <export default as multiplyMatrices>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
;
;
;
;
;
const white = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WHITES"].D65;
const adaptedCoef = 0.42;
const adaptedCoefInv = 1 / adaptedCoef;
const tau = 2 * Math.PI;
const cat16 = [
    [
        0.401288,
        0.650173,
        -0.051461
    ],
    [
        -0.250268,
        1.204414,
        0.045854
    ],
    [
        -0.002079,
        0.048952,
        0.953127
    ]
];
const cat16Inv = [
    [
        1.8620678550872327,
        -1.0112546305316843,
        0.14918677544445175
    ],
    [
        0.38752654323613717,
        0.6214474419314753,
        -0.008973985167612518
    ],
    [
        -0.015841498849333856,
        -0.03412293802851557,
        1.0499644368778496
    ]
];
const m1 = [
    [
        460.0,
        451.0,
        288.0
    ],
    [
        460.0,
        -891.0,
        -261.0
    ],
    [
        460.0,
        -220.0,
        -6300.0
    ]
];
const surroundMap = {
    dark: [
        0.8,
        0.525,
        0.8
    ],
    dim: [
        0.9,
        0.59,
        0.9
    ],
    average: [
        1,
        0.69,
        1
    ]
};
const hueQuadMap = {
    // Red, Yellow, Green, Blue, Red
    h: [
        20.14,
        90.00,
        164.25,
        237.53,
        380.14
    ],
    e: [
        0.8,
        0.7,
        1.0,
        1.2,
        0.8
    ],
    H: [
        0.0,
        100.0,
        200.0,
        300.0,
        400.0
    ]
};
const rad2deg = 180 / Math.PI;
const deg2rad = Math.PI / 180;
function adapt(coords, fl) {
    const temp = coords.map((c)=>{
        const x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(fl * Math.abs(c) * 0.01, adaptedCoef);
        return 400 * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["copySign"])(x, c) / (x + 27.13);
    });
    return temp;
}
function unadapt(adapted, fl) {
    const constant = 100 / fl * 27.13 ** adaptedCoefInv;
    return adapted.map((c)=>{
        const cabs = Math.abs(c);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["copySign"])(constant * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(cabs / (400 - cabs), adaptedCoefInv), c);
    });
}
function hueQuadrature(h) {
    let hp = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(h);
    if (hp <= hueQuadMap.h[0]) {
        hp += 360;
    }
    const i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bisectLeft"])(hueQuadMap.h, hp) - 1;
    const [hi, hii] = hueQuadMap.h.slice(i, i + 2);
    const [ei, eii] = hueQuadMap.e.slice(i, i + 2);
    const Hi = hueQuadMap.H[i];
    const t = (hp - hi) / ei;
    return Hi + 100 * t / (t + (hii - hp) / eii);
}
function invHueQuadrature(H) {
    let Hp = (H % 400 + 400) % 400;
    const i = Math.floor(0.01 * Hp);
    Hp = Hp % 100;
    const [hi, hii] = hueQuadMap.h.slice(i, i + 2);
    const [ei, eii] = hueQuadMap.e.slice(i, i + 2);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])((Hp * (eii * hi - ei * hii) - 100 * hi * eii) / (Hp * (eii - ei) - 100 * eii));
}
function environment(refWhite, adaptingLuminance, backgroundLuminance, surround, discounting) {
    const env = {};
    env.discounting = discounting;
    env.refWhite = refWhite;
    env.surround = surround;
    const xyzW = refWhite.map((c)=>{
        return c * 100;
    });
    // The average luminance of the environment in `cd/m^2cd/m` (a.k.a. nits)
    env.la = adaptingLuminance;
    // The relative luminance of the nearby background
    env.yb = backgroundLuminance;
    // Absolute luminance of the reference white.
    const yw = xyzW[1];
    // Cone response for reference white
    const rgbW = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(cat16, xyzW);
    // Surround: dark, dim, and average
    surround = surroundMap[env.surround];
    const f = surround[0];
    env.c = surround[1];
    env.nc = surround[2];
    const k = 1 / (5 * env.la + 1);
    const k4 = k ** 4;
    // Factor of luminance level adaptation
    env.fl = k4 * env.la + 0.1 * (1 - k4) * (1 - k4) * Math.cbrt(5 * env.la);
    env.flRoot = env.fl ** 0.25;
    env.n = env.yb / yw;
    env.z = 1.48 + Math.sqrt(env.n);
    env.nbb = 0.725 * env.n ** -0.2;
    env.ncb = env.nbb;
    // Degree of adaptation calculating if not discounting
    // illuminant (assumed eye is fully adapted)
    const d = discounting ? 1 : Math.max(Math.min(f * (1 - 1 / 3.6 * Math.exp((-env.la - 42) / 92)), 1), 0);
    env.dRgb = rgbW.map((c)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["interpolate"])(1, yw / c, d);
    });
    env.dRgbInv = env.dRgb.map((c)=>{
        return 1 / c;
    });
    // Achromatic response
    const rgbCW = rgbW.map((c, i)=>{
        return c * env.dRgb[i];
    });
    const rgbAW = adapt(rgbCW, env.fl);
    env.aW = env.nbb * (2 * rgbAW[0] + rgbAW[1] + 0.05 * rgbAW[2]);
    // console.log(env);
    return env;
}
// Pre-calculate everything we can with the viewing conditions
const viewingConditions = environment(white, 64 / Math.PI * 0.2, 20, "average", false);
function fromCam16(cam16, env) {
    // These check ensure one, and only one attribute for a
    // given category is provided.
    if (!(cam16.J !== undefined ^ cam16.Q !== undefined)) {
        throw new Error("Conversion requires one and only one: 'J' or 'Q'");
    }
    if (!(cam16.C !== undefined ^ cam16.M !== undefined ^ cam16.s !== undefined)) {
        throw new Error("Conversion requires one and only one: 'C', 'M' or 's'");
    }
    // Hue is absolutely required
    if (!(cam16.h !== undefined ^ cam16.H !== undefined)) {
        throw new Error("Conversion requires one and only one: 'h' or 'H'");
    }
    // Black
    if (cam16.J === 0.0 || cam16.Q === 0.0) {
        return [
            0.0,
            0.0,
            0.0
        ];
    }
    // Break hue into Cartesian components
    let hRad = 0.0;
    if (cam16.h !== undefined) {
        hRad = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(cam16.h) * deg2rad;
    } else {
        hRad = invHueQuadrature(cam16.H) * deg2rad;
    }
    const cosh = Math.cos(hRad);
    const sinh = Math.sin(hRad);
    // Calculate `Jroot` from one of the lightness derived coordinates.
    let Jroot = 0.0;
    if (cam16.J !== undefined) {
        Jroot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(cam16.J, 1 / 2) * 0.1;
    } else if (cam16.Q !== undefined) {
        Jroot = 0.25 * env.c * cam16.Q / ((env.aW + 4) * env.flRoot);
    }
    // Calculate the `t` value from one of the chroma derived coordinates
    let alpha = 0.0;
    if (cam16.C !== undefined) {
        alpha = cam16.C / Jroot;
    } else if (cam16.M !== undefined) {
        alpha = cam16.M / env.flRoot / Jroot;
    } else if (cam16.s !== undefined) {
        alpha = 0.0004 * cam16.s ** 2 * (env.aW + 4) / env.c;
    }
    const t = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(alpha * Math.pow(1.64 - Math.pow(0.29, env.n), -0.73), 10 / 9);
    // Eccentricity
    const et = 0.25 * (Math.cos(hRad + 2) + 3.8);
    // Achromatic response
    const A = env.aW * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(Jroot, 2 / env.c / env.z);
    // Calculate red-green and yellow-blue components
    const p1 = 5e4 / 13 * env.nc * env.ncb * et;
    const p2 = A / env.nbb;
    const r = 23 * (p2 + 0.305) * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["zdiv"])(t, 23 * p1 + t * (11 * cosh + 108 * sinh));
    const a = r * cosh;
    const b = r * sinh;
    // Calculate back from cone response to XYZ
    const rgb_c = unadapt((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(m1, [
        p2,
        a,
        b
    ]).map((c)=>{
        return c * 1 / 1403;
    }), env.fl);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(cat16Inv, rgb_c.map((c, i)=>{
        return c * env.dRgbInv[i];
    })).map((c)=>{
        return c / 100;
    });
}
function toCam16(xyzd65, env) {
    // Cone response
    const xyz100 = xyzd65.map((c)=>{
        return c * 100;
    });
    const rgbA = adapt((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$multiply$2d$matrices$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__multiplyMatrices$3e$__["multiplyMatrices"])(cat16, xyz100).map((c, i)=>{
        return c * env.dRgb[i];
    }), env.fl);
    // Calculate hue from red-green and yellow-blue components
    const a = rgbA[0] + (-12 * rgbA[1] + rgbA[2]) / 11;
    const b = (rgbA[0] + rgbA[1] - 2 * rgbA[2]) / 9;
    const hRad = (Math.atan2(b, a) % tau + tau) % tau;
    // Eccentricity
    const et = 0.25 * (Math.cos(hRad + 2) + 3.8);
    const t = 5e4 / 13 * env.nc * env.ncb * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["zdiv"])(et * Math.sqrt(a ** 2 + b ** 2), rgbA[0] + rgbA[1] + 1.05 * rgbA[2] + 0.305);
    const alpha = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, env.n), 0.73);
    // Achromatic response
    const A = env.nbb * (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]);
    const Jroot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(A / env.aW, 0.5 * env.c * env.z);
    // Lightness
    const J = 100 * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(Jroot, 2);
    // Brightness
    const Q = 4 / env.c * Jroot * (env.aW + 4) * env.flRoot;
    // Chroma
    const C = alpha * Jroot;
    // Colorfulness
    const M = C * env.flRoot;
    // Hue
    const h = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(hRad * rad2deg);
    // Hue quadrature
    const H = hueQuadrature(h);
    // Saturation
    const s = 50 * (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["spow"])(env.c * alpha / (env.aW + 4), 1 / 2);
    // console.log({J: J, C: C, h: h, s: s, Q: Q, M: M, H: H});
    return {
        J: J,
        C: C,
        h: h,
        s: s,
        Q: Q,
        M: M,
        H: H
    };
}
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "cam16-jmh",
    cssId: "--cam16-jmh",
    name: "CAM16-JMh",
    coords: {
        j: {
            refRange: [
                0,
                100
            ],
            name: "J"
        },
        m: {
            refRange: [
                0,
                105.0
            ],
            name: "Colorfulness"
        },
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (xyz) {
        const cam16 = toCam16(xyz, viewingConditions);
        return [
            cam16.J,
            cam16.M,
            cam16.h
        ];
    },
    toBase (cam16) {
        return fromCam16({
            J: cam16[0],
            M: cam16[1],
            h: cam16[2]
        }, viewingConditions);
    }
});
}}),
"[project]/node_modules/colorjs.io/src/spaces/hct.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "viewingConditions": (()=>viewingConditions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/xyz-d65.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$cam16$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/cam16.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
;
;
;
;
;
const white = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WHITES"].D65;
const ε = 216 / 24389; // 6^3/29^3 == (24/116)^3
const κ = 24389 / 27; // 29^3/3^3
function toLstar(y) {
    // Convert XYZ Y to L*
    const fy = y > ε ? Math.cbrt(y) : (κ * y + 16) / 116;
    return 116.0 * fy - 16.0;
}
function fromLstar(lstar) {
    // Convert L* back to XYZ Y
    return lstar > 8 ? Math.pow((lstar + 16) / 116, 3) : lstar / κ;
}
function fromHct(coords, env) {
    // Use Newton's method to try and converge as quick as possible or
    // converge as close as we can. While the requested precision is achieved
    // most of the time, it may not always be achievable. Especially past the
    // visible spectrum, the algorithm will likely struggle to get the same
    // precision. If, for whatever reason, we cannot achieve the accuracy we
    // seek in the allotted iterations, just return the closest we were able to
    // get.
    let [h, c, t] = coords;
    let xyz = [];
    let j = 0;
    // Shortcut out for black
    if (t === 0) {
        return [
            0.0,
            0.0,
            0.0
        ];
    }
    // Calculate the Y we need to target
    let y = fromLstar(t);
    // A better initial guess yields better results. Polynomials come from
    // curve fitting the T vs J response.
    if (t > 0) {
        j = 0.00379058511492914 * t ** 2 + 0.608983189401032 * t + 0.9155088574762233;
    } else {
        j = 9.514440756550361e-06 * t ** 2 + 0.08693057439788597 * t - 21.928975842194614;
    }
    // Threshold of how close is close enough, and max number of attempts.
    // More precision and more attempts means more time spent iterating. Higher
    // required precision gives more accuracy but also increases the chance of
    // not hitting the goal. 2e-12 allows us to convert round trip with
    // reasonable accuracy of six decimal places or more.
    const threshold = 2e-12;
    const max_attempts = 15;
    let attempt = 0;
    let last = Infinity;
    let best = j;
    // Try to find a J such that the returned y matches the returned y of the L*
    while(attempt <= max_attempts){
        xyz = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$cam16$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromCam16"])({
            J: j,
            C: c,
            h: h
        }, env);
        // If we are within range, return XYZ
        // If we are closer than last time, save the values
        const delta = Math.abs(xyz[1] - y);
        if (delta < last) {
            if (delta <= threshold) {
                return xyz;
            }
            best = j;
            last = delta;
        }
        // f(j_root) = (j ** (1 / 2)) * 0.1
        // f(j) = ((f(j_root) * 100) ** 2) / j - 1 = 0
        // f(j_root) = Y = y / 100
        // f(j) = (y ** 2) / j - 1
        // f'(j) = (2 * y) / j
        j = j - (xyz[1] - y) * j / (2 * xyz[1]);
        attempt += 1;
    }
    // We could not acquire the precision we desired,
    // return our closest attempt.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$cam16$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromCam16"])({
        J: j,
        C: c,
        h: h
    }, env);
}
function toHct(xyz, env) {
    // Calculate HCT by taking the L* of CIE LCh D65 and CAM16 chroma and hue.
    const t = toLstar(xyz[1]);
    if (t === 0.0) {
        return [
            0.0,
            0.0,
            0.0
        ];
    }
    const cam16 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$cam16$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toCam16"])(xyz, viewingConditions);
    return [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["constrain"])(cam16.h),
        cam16.C,
        t
    ];
}
const viewingConditions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$cam16$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["environment"])(white, 200 / Math.PI * fromLstar(50.0), fromLstar(50.0) * 100, "average", false);
const __TURBOPACK__default__export__ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]({
    id: "hct",
    name: "HCT",
    coords: {
        h: {
            refRange: [
                0,
                360
            ],
            type: "angle",
            name: "Hue"
        },
        c: {
            refRange: [
                0,
                145
            ],
            name: "Colorfulness"
        },
        t: {
            refRange: [
                0,
                100
            ],
            name: "Tone"
        }
    },
    base: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$xyz$2d$d65$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    fromBase (xyz) {
        return toHct(xyz, viewingConditions);
    },
    toBase (hct) {
        return fromHct(hct, viewingConditions);
    },
    formats: {
        color: {
            id: "--hct",
            coords: [
                "<number> | <angle>",
                "<percentage> | <number>",
                "<percentage> | <number>"
            ]
        }
    }
});
}}),
"[project]/node_modules/colorjs.io/src/deltaE/deltaEHCT.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/hct.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
;
;
;
const rad2deg = 180 / Math.PI;
const deg2rad = Math.PI / 180;
const ucsCoeff = [
    1.00,
    0.007,
    0.0228
];
/**
* Convert HCT chroma and hue (CAM16 JMh colorfulness and hue) using UCS logic for a and b.
* @param {number[]} coords - HCT coordinates.
* @return {number[]}
*/ function convertUcsAb(coords) {
    // We want the distance between the actual color.
    // If chroma is negative, it will throw off our calculations.
    // Normally, converting back to the base and forward will correct it.
    // If we have a negative chroma after this, then we have a color that
    // cannot resolve to positive chroma.
    if (coords[1] < 0) {
        coords = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromBase(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].toBase(coords));
    }
    // Only in extreme cases (usually outside the visible spectrum)
    // can the input value for log become negative.
    // Avoid domain error by forcing a zero result via "max" if necessary.
    const M = Math.log(Math.max(1 + ucsCoeff[2] * coords[1] * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["viewingConditions"].flRoot, 1.0)) / ucsCoeff[2];
    const hrad = coords[0] * deg2rad;
    const a = M * Math.cos(hrad);
    const b = M * Math.sin(hrad);
    return [
        coords[2],
        a,
        b
    ];
}
function __TURBOPACK__default__export__(color, sample) {
    [color, sample] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])([
        color,
        sample
    ]);
    let [t1, a1, b1] = convertUcsAb(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(color));
    let [t2, a2, b2] = convertUcsAb(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$hct$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].from(sample));
    // Use simple euclidean distance with a and b using UCS conversion
    // and LCh lightness (HCT tone).
    return Math.sqrt((t1 - t2) ** 2 + (a1 - a2) ** 2 + (b1 - b2) ** 2);
}
}}),
"[project]/node_modules/colorjs.io/src/deltaE/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaE76$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaE76.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaECMC$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaECMC.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaE2000$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaE2000.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEJz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaEJz.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEITP$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaEITP.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEOK$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaEOK.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEHCT$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaEHCT.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const __TURBOPACK__default__export__ = {
    deltaE76: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaE76$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    deltaECMC: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaECMC$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    deltaE2000: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaE2000$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    deltaEJz: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEJz$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    deltaEITP: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEITP$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    deltaEOK: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEOK$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
    deltaEHCT: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEHCT$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
};
}}),
"[project]/node_modules/colorjs.io/src/toGamut.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>toGamut),
    "toGamutCSS": (()=>toGamutCSS)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaE2000$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaE2000.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEOK$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/deltaEOK.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/inGamut.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/to.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/get.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/spaces/oklab.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/clone.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/adapt.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * Calculate the epsilon to 2 degrees smaller than the specified JND.
 * @param {Number} jnd - The target "just noticeable difference".
 * @returns {Number}
 */ function calcEpsilon(jnd) {
    // Calculate the epsilon to 2 degrees smaller than the specified JND.
    const order = !jnd ? 0 : Math.floor(Math.log10(Math.abs(jnd)));
    // Limit to an arbitrary value to ensure value is never too small and causes infinite loops.
    return Math.max(parseFloat(`1e${order - 2}`), 1e-6);
}
const GMAPPRESET = {
    "hct": {
        method: "hct.c",
        jnd: 2,
        deltaEMethod: "hct",
        blackWhiteClamp: {}
    },
    "hct-tonal": {
        method: "hct.c",
        jnd: 0,
        deltaEMethod: "hct",
        blackWhiteClamp: {
            channel: "hct.t",
            min: 0,
            max: 100
        }
    }
};
function toGamut(color, { method = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].gamut_mapping, space = undefined, deltaEMethod = "", jnd = 2, blackWhiteClamp = {} } = {}) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isString"])(arguments[1])) {
        space = arguments[1];
    } else if (!space) {
        space = color.space;
    }
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    // 3 spaces:
    // color.space: current color space
    // space: space whose gamut we are mapping to
    // mapSpace: space with the coord we're reducing
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space, {
        epsilon: 0
    })) {
        return color;
    }
    let spaceColor;
    if (method === "css") {
        spaceColor = toGamutCSS(color, {
            space
        });
    } else {
        if (method !== "clip" && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space)) {
            if (Object.prototype.hasOwnProperty.call(GMAPPRESET, method)) {
                ({ method, jnd, deltaEMethod, blackWhiteClamp } = GMAPPRESET[method]);
            }
            // Get the correct delta E method
            let de = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaE2000$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
            if (deltaEMethod !== "") {
                for(let m in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"]){
                    if ("deltae" + deltaEMethod.toLowerCase() === m.toLowerCase()) {
                        de = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"][m];
                        break;
                    }
                }
            }
            let clipped = toGamut((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space), {
                method: "clip",
                space
            });
            if (de(color, clipped) > jnd) {
                // Clamp to SDR white and black if required
                if (Object.keys(blackWhiteClamp).length === 3) {
                    let channelMeta = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].resolveCoord(blackWhiteClamp.channel);
                    let channel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, channelMeta.space), channelMeta.id);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNone"])(channel)) {
                        channel = 0;
                    }
                    if (channel >= blackWhiteClamp.max) {
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                            space: "xyz-d65",
                            coords: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$adapt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WHITES"]["D65"]
                        }, color.space);
                    } else if (channel <= blackWhiteClamp.min) {
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])({
                            space: "xyz-d65",
                            coords: [
                                0,
                                0,
                                0
                            ]
                        }, color.space);
                    }
                }
                // Reduce a coordinate of a certain color space until the color is in gamut
                let coordMeta = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].resolveCoord(method);
                let mapSpace = coordMeta.space;
                let coordId = coordMeta.id;
                let mappedColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, mapSpace);
                // If we were already in the mapped color space, we need to resolve undefined channels
                mappedColor.coords.forEach((c, i)=>{
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isNone"])(c)) {
                        mappedColor.coords[i] = 0;
                    }
                });
                let bounds = coordMeta.range || coordMeta.refRange;
                let min = bounds[0];
                let ε = calcEpsilon(jnd);
                let low = min;
                let high = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(mappedColor, coordId);
                while(high - low > ε){
                    let clipped = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(mappedColor);
                    clipped = toGamut(clipped, {
                        space,
                        method: "clip"
                    });
                    let deltaE = de(mappedColor, clipped);
                    if (deltaE - jnd < ε) {
                        low = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(mappedColor, coordId);
                    } else {
                        high = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(mappedColor, coordId);
                    }
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(mappedColor, coordId, (low + high) / 2);
                }
                spaceColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(mappedColor, space);
            } else {
                spaceColor = clipped;
            }
        } else {
            spaceColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, space);
        }
        if (method === "clip" // Dumb coord clipping
         || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(spaceColor, space, {
            epsilon: 0
        })) {
            let bounds = Object.values(space.coords).map((c)=>c.range || []);
            spaceColor.coords = spaceColor.coords.map((c, i)=>{
                let [min, max] = bounds[i];
                if (min !== undefined) {
                    c = Math.max(min, c);
                }
                if (max !== undefined) {
                    c = Math.min(c, max);
                }
                return c;
            });
        }
    }
    if (space !== color.space) {
        spaceColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(spaceColor, color.space);
    }
    color.coords = spaceColor.coords;
    return color;
}
toGamut.returns = "color";
// The reference colors to be used if lightness is out of the range 0-1 in the
// `Oklch` space. These are created in the `Oklab` space, as it is used by the
// DeltaEOK calculation, so it is guaranteed to be imported.
const COLORS = {
    WHITE: {
        space: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
        coords: [
            1,
            0,
            0
        ]
    },
    BLACK: {
        space: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$spaces$2f$oklab$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"],
        coords: [
            0,
            0,
            0
        ]
    }
};
function toGamutCSS(origin, { space } = {}) {
    const JND = 0.02;
    const ε = 0.0001;
    origin = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(origin);
    if (!space) {
        space = origin.space;
    }
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    const oklchSpace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get("oklch");
    if (space.isUnbounded) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(origin, space);
    }
    const origin_OKLCH = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(origin, oklchSpace);
    let L = origin_OKLCH.coords[0];
    // return media white or black, if lightness is out of range
    if (L >= 1) {
        const white = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(COLORS.WHITE, space);
        white.alpha = origin.alpha;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(white, space);
    }
    if (L <= 0) {
        const black = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(COLORS.BLACK, space);
        black.alpha = origin.alpha;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(black, space);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(origin_OKLCH, space, {
        epsilon: 0
    })) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(origin_OKLCH, space);
    }
    function clip(_color) {
        const destColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(_color, space);
        const spaceCoords = Object.values(space.coords);
        destColor.coords = destColor.coords.map((coord, index)=>{
            if ("range" in spaceCoords[index]) {
                const [min, max] = spaceCoords[index].range;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["clamp"])(min, coord, max);
            }
            return coord;
        });
        return destColor;
    }
    let min = 0;
    let max = origin_OKLCH.coords[1];
    let min_inGamut = true;
    let current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(origin_OKLCH);
    let clipped = clip(current);
    let E = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEOK$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(clipped, current);
    if (E < JND) {
        return clipped;
    }
    while(max - min > ε){
        const chroma = (min + max) / 2;
        current.coords[1] = chroma;
        if (min_inGamut && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(current, space, {
            epsilon: 0
        })) {
            min = chroma;
        } else {
            clipped = clip(current);
            E = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$deltaEOK$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(clipped, current);
            if (E < JND) {
                if (JND - E < ε) {
                    break;
                } else {
                    min_inGamut = false;
                    min = chroma;
                }
            } else {
                max = chroma;
            }
        }
    }
    return clipped;
}
}}),
"[project]/node_modules/colorjs.io/src/to.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>to)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/toGamut.js [app-client] (ecmascript)");
;
;
;
function to(color, space, { inGamut } = {}) {
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    let coords = space.from(color);
    let ret = {
        space,
        coords,
        alpha: color.alpha
    };
    if (inGamut) {
        ret = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ret, inGamut === true ? undefined : inGamut);
    }
    return ret;
}
to.returns = "color";
}}),
"[project]/node_modules/colorjs.io/src/to.js [app-client] (ecmascript) <export default as to>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "to": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/to.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/parse.js [app-client] (ecmascript) <export default as parse>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parse": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$parse$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/parse.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/colorjs.io/src/deltaE.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>deltaE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE/index.js [app-client] (ecmascript) <locals>");
;
;
;
function deltaE(c1, c2, o = {}) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isString"])(o)) {
        o = {
            method: o
        };
    }
    let { method = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].deltaE, ...rest } = o;
    for(let m in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"]){
        if ("deltae" + method.toLowerCase() === m.toLowerCase()) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"][m](c1, c2, rest);
        }
    }
    throw new TypeError(`Unknown deltaE method: ${method}`);
}
}}),
"[project]/node_modules/colorjs.io/src/interpolation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Functions related to color interpolation
 */ __turbopack_context__.s({
    "isRange": (()=>isRange),
    "mix": (()=>mix),
    "range": (()=>range),
    "register": (()=>register),
    "steps": (()=>steps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/clone.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/to.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/toGamut.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/get.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/angles.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/deltaE.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
function mix(c1, c2, p = .5, o = {}) {
    [c1, c2] = [
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(c1),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(c2)
    ];
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["type"])(p) === "object") {
        [p, o] = [
            .5,
            p
        ];
    }
    let r = range(c1, c2, o);
    return r(p);
}
function steps(c1, c2, options = {}) {
    let colorRange;
    if (isRange(c1)) {
        // Tweaking existing range
        [colorRange, options] = [
            c1,
            c2
        ];
        [c1, c2] = colorRange.rangeArgs.colors;
    }
    let { maxDeltaE, deltaEMethod, steps: steps1 = 2, maxSteps = 1000, ...rangeOptions } = options;
    if (!colorRange) {
        [c1, c2] = [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(c1),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(c2)
        ];
        colorRange = range(c1, c2, rangeOptions);
    }
    let totalDelta = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(c1, c2);
    let actualSteps = maxDeltaE > 0 ? Math.max(steps1, Math.ceil(totalDelta / maxDeltaE) + 1) : steps1;
    let ret = [];
    if (maxSteps !== undefined) {
        actualSteps = Math.min(actualSteps, maxSteps);
    }
    if (actualSteps === 1) {
        ret = [
            {
                p: .5,
                color: colorRange(.5)
            }
        ];
    } else {
        let step = 1 / (actualSteps - 1);
        ret = Array.from({
            length: actualSteps
        }, (_, i)=>{
            let p = i * step;
            return {
                p,
                color: colorRange(p)
            };
        });
    }
    if (maxDeltaE > 0) {
        // Iterate over all stops and find max deltaE
        let maxDelta = ret.reduce((acc, cur, i)=>{
            if (i === 0) {
                return 0;
            }
            let ΔΕ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(cur.color, ret[i - 1].color, deltaEMethod);
            return Math.max(acc, ΔΕ);
        }, 0);
        while(maxDelta > maxDeltaE){
            // Insert intermediate stops and measure maxDelta again
            // We need to do this for all pairs, otherwise the midpoint shifts
            maxDelta = 0;
            for(let i = 1; i < ret.length && ret.length < maxSteps; i++){
                let prev = ret[i - 1];
                let cur = ret[i];
                let p = (cur.p + prev.p) / 2;
                let color = colorRange(p);
                maxDelta = Math.max(maxDelta, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, prev.color), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$deltaE$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color, cur.color));
                ret.splice(i, 0, {
                    p,
                    color: colorRange(p)
                });
                i++;
            }
        }
    }
    ret = ret.map((a)=>a.color);
    return ret;
}
function range(color1, color2, options = {}) {
    if (isRange(color1)) {
        // Tweaking existing range
        let [r, options] = [
            color1,
            color2
        ];
        return range(...r.rangeArgs.colors, {
            ...r.rangeArgs.options,
            ...options
        });
    }
    let { space, outputSpace, progression, premultiplied } = options;
    color1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color1);
    color2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color2);
    // Make sure we're working on copies of these colors
    color1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color1);
    color2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color2);
    let rangeArgs = {
        colors: [
            color1,
            color2
        ],
        options
    };
    if (space) {
        space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(space);
    } else {
        space = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].registry[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].interpolationSpace] || color1.space;
    }
    outputSpace = outputSpace ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(outputSpace) : space;
    color1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color1, space);
    color2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color2, space);
    // Gamut map to avoid areas of flat color
    color1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color1);
    color2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color2);
    // Handle hue interpolation
    // See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840
    if (space.coords.h && space.coords.h.type === "angle") {
        let arc = options.hue = options.hue || "shorter";
        let hue = [
            space,
            "h"
        ];
        let [θ1, θ2] = [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color1, hue),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color2, hue)
        ];
        // Undefined hues must be evaluated before hue fix-up to properly
        // calculate hue arcs between undefined and defined hues.
        // See https://github.com/w3c/csswg-drafts/issues/9436#issuecomment-1746957545
        if (isNaN(θ1) && !isNaN(θ2)) {
            θ1 = θ2;
        } else if (isNaN(θ2) && !isNaN(θ1)) {
            θ2 = θ1;
        }
        [θ1, θ2] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$angles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["adjust"])(arc, [
            θ1,
            θ2
        ]);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color1, hue, θ1);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color2, hue, θ2);
    }
    if (premultiplied) {
        // not coping with polar spaces yet
        color1.coords = color1.coords.map((c)=>c * color1.alpha);
        color2.coords = color2.coords.map((c)=>c * color2.alpha);
    }
    return Object.assign((p)=>{
        p = progression ? progression(p) : p;
        let coords = color1.coords.map((start, i)=>{
            let end = color2.coords[i];
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["interpolate"])(start, end, p);
        });
        let alpha = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["interpolate"])(color1.alpha, color2.alpha, p);
        let ret = {
            space,
            coords,
            alpha
        };
        if (premultiplied) {
            // undo premultiplication
            ret.coords = ret.coords.map((c)=>c / alpha);
        }
        if (outputSpace !== space) {
            ret = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$to$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(ret, outputSpace);
        }
        return ret;
    }, {
        rangeArgs
    });
}
function isRange(val) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["type"])(val) === "function" && !!val.rangeArgs;
}
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].interpolationSpace = "lab";
function register(Color) {
    Color.defineFunction("mix", mix, {
        returns: "color"
    });
    Color.defineFunction("range", range, {
        returns: "function<color>"
    });
    Color.defineFunction("steps", steps, {
        returns: "array<color>"
    });
}
}}),
"[project]/node_modules/colorjs.io/src/serialize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>serialize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/util.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/space.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/defaults.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/getColor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/inGamut.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/toGamut.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/clone.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
function serialize(color, { precision = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$defaults$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].precision, format = "default", inGamut = true, ...customOptions } = {}) {
    let ret;
    color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$getColor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color);
    let formatId = format;
    format = color.space.getFormat(format) ?? color.space.getFormat("default") ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$space$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].DEFAULT_FORMAT;
    // The assignment to coords and inGamut needs to stay in the order they are now
    // The order of the assignment was changed as a workaround for a bug in Next.js
    // See this issue for details: https://github.com/color-js/color.js/issues/260
    let coords = color.coords.slice(); // clone so we can manipulate it
    inGamut ||= format.toGamut;
    if (inGamut && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$inGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color)) {
        // FIXME what happens if the color contains NaNs?
        coords = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$toGamut$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$clone$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(color), inGamut === true ? undefined : inGamut).coords;
    }
    if (format.type === "custom") {
        customOptions.precision = precision;
        if (format.serialize) {
            ret = format.serialize(coords, color.alpha, customOptions);
        } else {
            throw new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);
        }
    } else {
        // Functional syntax
        let name = format.name || "color";
        if (format.serializeCoords) {
            coords = format.serializeCoords(coords, precision);
        } else {
            if (precision !== null) {
                coords = coords.map((c)=>{
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["serializeNumber"])(c, {
                        precision
                    });
                });
            }
        }
        let args = [
            ...coords
        ];
        if (name === "color") {
            // If output is a color() function, add colorspace id as first argument
            let cssId = format.id || format.ids?.[0] || color.space.id;
            args.unshift(cssId);
        }
        let alpha = color.alpha;
        if (precision !== null) {
            alpha = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$util$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["serializeNumber"])(alpha, {
                precision
            });
        }
        let strAlpha = color.alpha >= 1 || format.noAlpha ? "" : `${format.commas ? "," : " /"} ${alpha}`;
        ret = `${name}(${args.join(format.commas ? ", " : " ")}${strAlpha})`;
    }
    return ret;
}
}}),
"[project]/node_modules/colorjs.io/src/serialize.js [app-client] (ecmascript) <export default as serialize>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "serialize": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$serialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$colorjs$2e$io$2f$src$2f$serialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/colorjs.io/src/serialize.js [app-client] (ecmascript)");
}}),
}]);

//# sourceMappingURL=node_modules_colorjs_io_src_af2d5b69._.js.map