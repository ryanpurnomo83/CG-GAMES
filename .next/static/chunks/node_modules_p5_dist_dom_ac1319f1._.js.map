{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/dom/p5.File.js"],"sourcesContent":["import { XML } from '../io/p5.XML.js';\n\n/**\n * @module DOM\n * @submodule DOM\n * @for p5.Element\n */\n\n\nclass File {\n  constructor(file, pInst) {\n    this.file = file;\n\n    this._pInst = pInst;\n\n    // Splitting out the file type into two components\n    // This makes determining if image or text etc simpler\n    const typeList = file.type.split('/');\n    this.type = typeList[0];\n    this.subtype = typeList[1];\n    this.name = file.name;\n    this.size = file.size;\n    this.data = undefined;\n  }\n\n\n  static _createLoader(theFile, callback) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const p5file = new File(theFile);\n      if (p5file.file.type === 'application/json') {\n        // Parse JSON and store the result in data\n        p5file.data = JSON.parse(e.target.result);\n      } else if (p5file.file.type === 'text/xml') {\n        // Parse XML, wrap it in p5.XML and store the result in data\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(e.target.result, 'text/xml');\n        p5file.data = new XML(xml.documentElement);\n      } else {\n        p5file.data = e.target.result;\n      }\n      callback(p5file);\n    };\n    return reader;\n  }\n\n  static _load(f, callback) {\n    // Text or data?\n    // This should likely be improved\n    if (/^text\\//.test(f.type) || f.type === 'application/json') {\n      File._createLoader(f, callback).readAsText(f);\n    } else if (!/^(video|audio)\\//.test(f.type)) {\n      File._createLoader(f, callback).readAsDataURL(f);\n    } else {\n      const file = new File(f);\n      file.data = URL.createObjectURL(f);\n      callback(file);\n    }\n  }\n}\n\nfunction file(p5, fn){\n  /**\n   * A class to describe a file.\n   *\n   * `p5.File` objects are used by\n   * <a href=\"#/p5.Element/drop\">myElement.drop()</a> and\n   * created by\n   * <a href=\"#/p5/createFileInput\">createFileInput</a>.\n   *\n   * @class p5.File\n   * @param {File} file wrapped file.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayInfo() when the file loads.\n   *   let input = createFileInput(displayInfo);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its info is written in black.');\n   * }\n   *\n   * // Display the p5.File's info once it loads.\n   * function displayInfo(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(file.name, 10, 10, 80, 40);\n   *\n   *   // Display the p5.File's type and subtype.\n   *   text(`${file.type}/${file.subtype}`, 10, 70);\n   *\n   *   // Display the p5.File's size in bytes.\n   *   text(file.size, 10, 90);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Use the file input to select an image to\n   * // load and display.\n   * let img;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call handleImage() when the file image loads.\n   *   let input = createFileInput(handleImage);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects an image file to load, it is displayed on the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the image if it's ready.\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * // Use the p5.File's data once it loads.\n   * function handleImage(file) {\n   *   // Check the p5.File's type.\n   *   if (file.type === 'image') {\n   *     // Create an image using using the p5.File's data.\n   *     img = createImg(file.data, '');\n   *\n   *     // Hide the image element so it doesn't appear twice.\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  p5.File = File;\n\n  /**\n   * Underlying\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\">File</a>\n   * object. All `File` properties and methods are accessible.\n   *\n   * @for p5.File\n   * @property file\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayInfo() when the file loads.\n   *   let input = createFileInput(displayInfo);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its info is written in black.');\n   * }\n   *\n   * // Use the p5.File once it loads.\n   * function displayInfo(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(file.name, 10, 10, 80, 40);\n   *\n   *   // Display the p5.File's type and subtype.\n   *   text(`${file.type}/${file.subtype}`, 10, 70);\n   *\n   *   // Display the p5.File's size in bytes.\n   *   text(file.size, 10, 90);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\">MIME type</a>\n   * as a string.\n   *\n   * For example, `'image'` and `'text'` are both MIME types.\n   *\n   * @for p5.File\n   * @property type\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayType() when the file loads.\n   *   let input = createFileInput(displayType);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its type is written in black.');\n   * }\n   *\n   * // Display the p5.File's type once it loads.\n   * function displayType(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's type.\n   *   text(`This is file's type is: ${file.type}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file subtype as a string.\n   *\n   * For example, a file with an `'image'`\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\">MIME type</a>\n   * may have a subtype such as ``png`` or ``jpeg``.\n   *\n   * @property subtype\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displaySubtype() when the file loads.\n   *   let input = createFileInput(displaySubtype);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its subtype is written in black.');\n   * }\n   *\n   * // Display the p5.File's type once it loads.\n   * function displaySubtype(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's subtype.\n   *   text(`This is file's subtype is: ${file.subtype}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The file name as a string.\n   *\n   * @property name\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a\n   * // file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayName() when the file loads.\n   *   let input = createFileInput(displayName);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its name is written in black.');\n   * }\n   *\n   * // Display the p5.File's name once it loads.\n   * function displayName(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's name.\n   *   text(`This is file's name is: ${file.name}`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * The number of bytes in the file.\n   *\n   * @property size\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displaySize() when the file loads.\n   *   let input = createFileInput(displaySize);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its size in bytes is written in black.');\n   * }\n   *\n   * // Display the p5.File's size in bytes once it loads.\n   * function displaySize(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's size.\n   *   text(`This is file has ${file.size} bytes.`, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * A string containing the file's data.\n   *\n   * Data can be either image data, text contents, or a parsed object in the\n   * case of JSON and <a href=\"#/p5.XML\">p5.XML</a> objects.\n   *\n   * @property data\n   * @for p5.File\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to load a file and display its info.\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a file input and place it beneath the canvas.\n   *   // Call displayData() when the file loads.\n   *   let input = createFileInput(displayData);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user loads a file, its data is written in black.');\n   * }\n   *\n   * // Display the p5.File's data once it loads.\n   * function displayData(file) {\n   *   background(200);\n   *\n   *   // Display the p5.File's data, which looks like a random string of characters.\n   *   text(file.data, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  file(p5, p5.prototype);\n}\n\nexport { File, file as default };\n"],"names":[],"mappings":";;;;AAAA;;AAEA;;;;CAIC,GAGD,MAAM;IACJ,YAAY,IAAI,EAAE,KAAK,CAAE;QACvB,IAAI,CAAC,IAAI,GAAG;QAEZ,IAAI,CAAC,MAAM,GAAG;QAEd,kDAAkD;QAClD,sDAAsD;QACtD,MAAM,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,EAAE;QACvB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,EAAE;QAC1B,IAAI,CAAC,IAAI,GAAG,KAAK,IAAI;QACrB,IAAI,CAAC,IAAI,GAAG,KAAK,IAAI;QACrB,IAAI,CAAC,IAAI,GAAG;IACd;IAGA,OAAO,cAAc,OAAO,EAAE,QAAQ,EAAE;QACtC,MAAM,SAAS,IAAI;QACnB,OAAO,MAAM,GAAG,SAAU,CAAC;YACzB,MAAM,SAAS,IAAI,KAAK;YACxB,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,oBAAoB;gBAC3C,0CAA0C;gBAC1C,OAAO,IAAI,GAAG,KAAK,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM;YAC1C,OAAO,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,YAAY;gBAC1C,4DAA4D;gBAC5D,MAAM,SAAS,IAAI;gBACnB,MAAM,MAAM,OAAO,eAAe,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE;gBACpD,OAAO,IAAI,GAAG,IAAI,gJAAA,CAAA,MAAG,CAAC,IAAI,eAAe;YAC3C,OAAO;gBACL,OAAO,IAAI,GAAG,EAAE,MAAM,CAAC,MAAM;YAC/B;YACA,SAAS;QACX;QACA,OAAO;IACT;IAEA,OAAO,MAAM,CAAC,EAAE,QAAQ,EAAE;QACxB,gBAAgB;QAChB,iCAAiC;QACjC,IAAI,UAAU,IAAI,CAAC,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,oBAAoB;YAC3D,KAAK,aAAa,CAAC,GAAG,UAAU,UAAU,CAAC;QAC7C,OAAO,IAAI,CAAC,mBAAmB,IAAI,CAAC,EAAE,IAAI,GAAG;YAC3C,KAAK,aAAa,CAAC,GAAG,UAAU,aAAa,CAAC;QAChD,OAAO;YACL,MAAM,OAAO,IAAI,KAAK;YACtB,KAAK,IAAI,GAAG,IAAI,eAAe,CAAC;YAChC,SAAS;QACX;IACF;AACF;AAEA,SAAS,KAAK,GAAE,EAAE,EAAE;IAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuFC,GACD,IAAG,IAAI,GAAG;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCC,GACH;AAEA,IAAG,OAAO,OAAO,aAAY;IAC3B,KAAK,IAAI,GAAG,SAAS;AACvB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/dom/p5.Element.js"],"sourcesContent":["import { File } from './p5.File.js';\nimport { C as Color } from '../creating_reading-D4AAKRbx.js';\nimport { w as AUTO } from '../constants-C-g_eAdC.js';\nimport '../io/p5.XML.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\n\n/**\n * @module DOM\n * @submodule DOM\n */\n\n\nclass Element {\n  width;\n  height;\n  elt;\n\n  constructor(elt, pInst) {\n    this.elt = elt;\n    this._pInst = this._pixelsState = pInst;\n    this._events = {};\n    this.width = this.elt.offsetWidth;\n    this.height = this.elt.offsetHeight;\n  }\n\n  /**\n   * Removes the element, stops all audio/video streams, and removes all\n   * callback functions.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square. ');\n   * }\n   *\n   * // Remove the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.remove();\n   * }\n   * </code>\n   * </div>\n   */\n  remove() {\n    // stop all audios/videos and detach all devices like microphone/camera etc\n    // used as input/output for audios/videos.\n    // if (this instanceof p5.MediaElement) {\n    if(this.stop){\n      this.stop();\n      const sources = this.elt.srcObject;\n      if (sources !== null) {\n        const tracks = sources.getTracks();\n        tracks.forEach(track => {\n          track.stop();\n        });\n      }\n    }\n\n    // delete the reference in this._pInst._elements\n    const index = this._pInst._elements.indexOf(this);\n    if (index !== -1) {\n      this._pInst._elements.splice(index, 1);\n    }\n\n    // deregister events\n    for (let ev in this._events) {\n      this.elt.removeEventListener(ev, this._events[ev]);\n    }\n    if (this.elt && this.elt.parentNode) {\n      this.elt.parentNode.removeChild(this.elt);\n    }\n  }\n\n  /**\n   * Attaches the element to a parent element.\n   *\n   * For example, a `&lt;div&gt;&lt;/div&gt;` element may be used as a box to\n   * hold two pieces of text, a header and a paragraph. The\n   * `&lt;div&gt;&lt;/div&gt;` is the parent element of both the header and\n   * paragraph.\n   *\n   * The parameter `parent` can have one of three types. `parent` can be a\n   * string with the parent element's ID, as in\n   * `myElement.parent('container')`. It can also be another\n   * <a href=\"#/p5.Element\">p5.Element</a> object, as in\n   * `myElement.parent(myDiv)`. Finally, `parent` can be an `HTMLElement`\n   * object, as in `myElement.parent(anotherElement)`.\n   *\n   * Calling `myElement.parent()` without an argument returns the element's\n   * parent.\n   *\n   * @param  {String|p5.Element|Object} parent ID, <a href=\"#/p5.Element\">p5.Element</a>,\n   *                                           or HTMLElement of desired parent element.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color to white\n   *   div.style('background-color', 'white');\n   *\n   *   // Align any text to the center.\n   *   div.style('text-align', 'center');\n   *\n   *   // Set its ID to \"container\".\n   *   div.id('container');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent\n   *   // using its ID \"container\".\n   *   p.parent('container');\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create rectangular div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color and align\n   *   // any text to the center.\n   *   div.style('background-color', 'white');\n   *   div.style('text-align', 'center');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent.\n   *   p.parent(div);\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup()  {\n   *   background(200);\n   *\n   *   // Create rectangular div element.\n   *   let div = createDiv();\n   *\n   *   // Place the div in the top-left corner.\n   *   div.position(10, 20);\n   *\n   *   // Set its width and height.\n   *   div.size(80, 60);\n   *\n   *   // Set its background color and align\n   *   // any text to the center.\n   *   div.style('background-color', 'white');\n   *   div.style('text-align', 'center');\n   *\n   *   // Create a paragraph element.\n   *   let p = createP('p5*js');\n   *\n   *   // Make the div its parent\n   *   // using the underlying\n   *   // HTMLElement.\n   *   p.parent(div.elt);\n   *\n   *   describe('The text \"p5*js\" written in black at the center of a white rectangle. The rectangle is inside a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {p5.Element}\n   */\n  parent(p) {\n    if (typeof p === 'undefined') {\n      return this.elt.parentNode;\n    }\n\n    if (typeof p === 'string') {\n      if (p[0] === '#') {\n        p = p.substring(1);\n      }\n      p = document.getElementById(p);\n    } else if (p instanceof Element) {\n      p = p.elt;\n    }\n    p.appendChild(this.elt);\n    return this;\n  }\n\n  /**\n   * Attaches the element as a child of another element.\n   *\n   * `myElement.child()` accepts either a string ID, DOM node, or\n   * <a href=\"#/p5.Element\">p5.Element</a>. For example,\n   * `myElement.child(otherElement)`. If no argument is provided, an array of\n   * children DOM nodes is returned.\n   *\n   * @returns {Node[]} an array of child nodes.\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *   let div1 = createDiv('Child');\n   *\n   *   // Make div1 the child of div0\n   *   // using the p5.Element.\n   *   div0.child(div1);\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *   let div1 = createDiv('Child');\n   *\n   *   // Give div1 an ID.\n   *   div1.id('apples');\n   *\n   *   // Make div1 the child of div0\n   *   // using its ID.\n   *   div0.child('apples');\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender notest'>\n   * <code>\n   * // This example assumes there is a div already on the page\n   * // with id \"myChildDiv\".\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div elements.\n   *   let div0 = createDiv('Parent');\n   *\n   *   // Select the child element by its ID.\n   *   let elt = document.getElementById('myChildDiv');\n   *\n   *   // Make div1 the child of div0\n   *   // using its HTMLElement object.\n   *   div0.child(elt);\n   *\n   *   describe('A gray square with the words \"Parent\" and \"Child\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String|p5.Element} [child] the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n   *                         to add to the current element\n   * @chainable\n   */\n  child(childNode) {\n    if (typeof childNode === 'undefined') {\n      return this.elt.childNodes;\n    }\n    if (typeof childNode === 'string') {\n      if (childNode[0] === '#') {\n        childNode = childNode.substring(1);\n      }\n      childNode = document.getElementById(childNode);\n    } else if (childNode instanceof Element) {\n      childNode = childNode.elt;\n    }\n\n    if (childNode instanceof HTMLElement) {\n      this.elt.appendChild(childNode);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the inner HTML of the element, replacing any existing HTML.\n   *\n   * The second parameter, `append`, is optional. If `true` is passed, as in\n   * `myElement.html('hi', true)`, the HTML is appended instead of replacing\n   * existing HTML.\n   *\n   * If no arguments are passed, as in `myElement.html()`, the element's inner\n   * HTML is returned.\n   *\n   * @for p5.Element\n   * @returns {String} the inner HTML of the element\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the div element and set its size.\n   *   let div = createDiv('');\n   *   div.size(100, 100);\n   *\n   *   // Set the inner HTML to \"hi\".\n   *   div.html('hi');\n   *\n   *   describe('A gray square with the word \"hi\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element and set its size.\n   *   let div = createDiv('Hello ');\n   *   div.size(100, 100);\n   *\n   *   // Append \"World\" to the div's HTML.\n   *   div.html('World', true);\n   *\n   *   describe('A gray square with the text \"Hello World\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element.\n   *   let div = createDiv('Hello');\n   *\n   *   // Prints \"Hello\" to the console.\n   *   print(div.html());\n   *\n   *   describe('A gray square with the word \"Hello!\" written beneath it.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} [html] the HTML to be placed inside the element\n   * @param  {Boolean} [append] whether to append HTML to existing\n   * @chainable\n   */\n  html(...args) {\n    if (args.length === 0) {\n      return this.elt.innerHTML;\n    } else if (args[1]) {\n      this.elt.insertAdjacentHTML('beforeend', args[0]);\n      return this;\n    } else {\n      this.elt.innerHTML = args[0];\n      return this;\n    }\n  }\n\n  /**\n   * Sets the element's ID using a given string.\n   *\n   * Calling `myElement.id()` without an argument returns its ID as a string.\n   *\n   * @param  {String} id ID of the element.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the canvas' ID\n   *   // to \"mycanvas\".\n   *   cnv.id('mycanvas');\n   *\n   *   // Get the canvas' ID.\n   *   let id = cnv.id();\n   *   text(id, 24, 54);\n   *\n   *   describe('The text \"mycanvas\" written in black on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {String} ID of the element.\n   */\n  id(id) {\n    if (typeof id === 'undefined') {\n      return this.elt.id;\n    }\n\n    this.elt.id = id;\n    this.width = this.elt.offsetWidth;\n    this.height = this.elt.offsetHeight;\n    return this;\n  }\n\n  /**\n   * Adds a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class\" target=\"_blank\">class attribute</a>\n   * to the element using a given string.\n   *\n   * Calling `myElement.class()` without an argument returns a string with its current classes.\n   *\n   * @param  {String} class class to add.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Add the class \"small\" to the\n   *   // canvas element.\n   *   cnv.class('small');\n   *\n   *   // Get the canvas element's class\n   *   // and display it.\n   *   let c = cnv.class();\n   *   text(c, 35, 54);\n   *\n   *   describe('The word \"small\" written in black on a gray canvas.');\n   *\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @return {String} element's classes, if any.\n   */\n  class(c) {\n    if (typeof c === 'undefined') {\n      return this.elt.className;\n    }\n\n    this.elt.className = c;\n    return this;\n  }\n\n  /**\n   *\n   * Adds a class to the element.\n   *\n   * @for p5.Element\n   * @param  {String} class name of class to add.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   let div = createDiv('div');\n   *\n   *   // Add a class to the div.\n   *   div.addClass('myClass');\n   *\n   *   describe('A gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  addClass(c) {\n    if (this.elt.className) {\n      if (!this.hasClass(c)) {\n        this.elt.className = this.elt.className + ' ' + c;\n      }\n    } else {\n      this.elt.className = c;\n    }\n    return this;\n  }\n\n  /**\n   * Removes a class from the element.\n   *\n   * @param  {String} class name of class to remove.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * // In this example, a class is set when the div is created\n   * // and removed when mouse is pressed. This could link up\n   * // with a CSS style rule to toggle style properties.\n   *\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add a class to the div.\n   *   div.addClass('myClass');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Remove 'myClass' from the div when the user presses the mouse.\n   * function mousePressed() {\n   *   div.removeClass('myClass');\n   * }\n   * </code>\n   * </div>\n   */\n  removeClass(c) {\n    // Note: Removing a class that does not exist does NOT throw an error in classList.remove method\n    this.elt.classList.remove(c);\n    return this;\n  }\n\n  /**\n   * Checks if a class is already applied to element.\n   *\n   * @returns {boolean} a boolean value if element has specified class.\n   * @param c {String} name of class to check.\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add the class 'show' to the div.\n   *   div.addClass('show');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Toggle the class 'show' when the mouse is pressed.\n   * function mousePressed() {\n   *   if (div.hasClass('show')) {\n   *     div.addClass('show');\n   *   } else {\n   *     div.removeClass('show');\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  hasClass(c) {\n    return this.elt.classList.contains(c);\n  }\n\n  /**\n   * Toggles whether a class is applied to the element.\n   *\n   * @param c {String} class name to toggle.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * let div;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element.\n   *   div = createDiv('div');\n   *\n   *   // Add the 'show' class to the div.\n   *   div.addClass('show');\n   *\n   *   describe('A gray square.');\n   * }\n   *\n   * // Toggle the 'show' class when the mouse is pressed.\n   * function mousePressed() {\n   *   div.toggleClass('show');\n   * }\n   * </code>\n   * </div>\n   */\n  toggleClass(c) {\n    // classList also has a toggle() method, but we cannot use that yet as support is unclear.\n    // See https://github.com/processing/p5.js/issues/3631\n    // this.elt.classList.toggle(c);\n    if (this.elt.classList.contains(c)) {\n      this.elt.classList.remove(c);\n    } else {\n      this.elt.classList.add(c);\n    }\n    return this;\n  }\n\n  /**\n   * Centers the element either vertically, horizontally, or both.\n   *\n   * `center()` will center the element relative to its parent or according to\n   * the page's body if the element has no parent.\n   *\n   * If no argument is passed, as in `myElement.center()` the element is aligned\n   * both vertically and horizontally.\n   *\n   * @param  {String} [align] passing 'vertical', 'horizontal' aligns element accordingly\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create the div element and style it.\n   *   let div = createDiv('');\n   *   div.size(10, 10);\n   *   div.style('background-color', 'orange');\n   *\n   *   // Center the div relative to the page's body.\n   *   div.center();\n   *\n   *   describe('A gray square and an orange rectangle. The rectangle is at the center of the page.');\n   * }\n   * </code>\n   * </div>\n   */\n  center(align) {\n    const style = this.elt.style.display;\n    const hidden = this.elt.style.display === 'none';\n    const parentHidden = this.parent().style.display === 'none';\n    const pos = { x: this.elt.offsetLeft, y: this.elt.offsetTop };\n\n    if (hidden) this.show();\n    if (parentHidden) this.parent().show();\n    this.elt.style.display = 'block';\n\n    this.position(0, 0);\n    const wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);\n    const hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);\n\n    if (align === 'both' || align === undefined) {\n      this.position(\n        wOffset / 2 + this.parent().offsetLeft,\n        hOffset / 2 + this.parent().offsetTop\n      );\n    } else if (align === 'horizontal') {\n      this.position(wOffset / 2 + this.parent().offsetLeft, pos.y);\n    } else if (align === 'vertical') {\n      this.position(pos.x, hOffset / 2 + this.parent().offsetTop);\n    }\n\n    this.style('display', style);\n    if (hidden) this.hide();\n    if (parentHidden) this.parent().hide();\n\n    return this;\n  }\n\n  /**\n   * Sets the element's position.\n   *\n   * The first two parameters, `x` and `y`, set the element's position relative\n   * to the top-left corner of the web page.\n   *\n   * The third parameter, `positionType`, is optional. It sets the element's\n   * <a target=\"_blank\"\n   * href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.\n   * `positionType` is a string that can be either `'static'`, `'fixed'`,\n   * `'relative'`, `'sticky'`, `'initial'`, or `'inherit'`.\n   *\n   * If no arguments passed, as in `myElement.position()`, the method returns\n   * the element's position in an object, as in `{ x: 0, y: 0 }`.\n   *\n   * @returns {Object} object of form `{ x: 0, y: 0 }` containing the element's position.\n   *\n   * @example\n   * <div>\n   * <code class='norender'>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Positions the canvas 50px to the right and 100px\n   *   // below the top-left corner of the window.\n   *   cnv.position(50, 100);\n   *\n   *   describe('A gray square that is 50 pixels to the right and 100 pixels down from the top-left corner of the web page.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code class='norender'>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Positions the canvas at the top-left corner\n   *   // of the window with a 'fixed' position type.\n   *   cnv.position(0, 0, 'fixed');\n   *\n   *   describe('A gray square in the top-left corner of the web page.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} [x] x-position relative to top-left of window (optional)\n   * @param  {Number} [y] y-position relative to top-left of window (optional)\n   * @param  {String} [positionType] it can be static, fixed, relative, sticky, initial or inherit (optional)\n   * @chainable\n   */\n  position(...args) {\n    if (args.length === 0) {\n      return { x: this.elt.offsetLeft, y: this.elt.offsetTop };\n    } else {\n      let positionType = 'absolute';\n      if (\n        args[2] === 'static' ||\n        args[2] === 'fixed' ||\n        args[2] === 'relative' ||\n        args[2] === 'sticky' ||\n        args[2] === 'initial' ||\n        args[2] === 'inherit'\n      ) {\n        positionType = args[2];\n      }\n      this.elt.style.position = positionType;\n      this.elt.style.left = args[0] + 'px';\n      this.elt.style.top = args[1] + 'px';\n      this.x = args[0];\n      this.y = args[1];\n      return this;\n    }\n  }\n\n  /**\n   * Shows the current element.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and hide it.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *   p.hide();\n   *\n   *   describe('A gray square. The text \"p5*js\" appears when the user double-clicks the square.');\n   * }\n   *\n   * // Show the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.show();\n   * }\n   * </code>\n   * </div>\n   */\n  show() {\n    this.elt.style.display = 'block';\n    return this;\n  }\n\n  /**\n   * Hides the current element.\n   *\n   * @chainable\n   *\n   * @example\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element.\n   *   p = createP('p5*js');\n   *   p.position(10, 10);\n   *\n   *   describe('The text \"p5*js\" at the center of a gray square. The text disappears when the user double-clicks the square.');\n   * }\n   *\n   * // Hide the paragraph when the user double-clicks.\n   * function doubleClicked() {\n   *   p.hide();\n   * }\n   * </code>\n   * </div>\n   */\n  hide() {\n    this.elt.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Sets the element's width and height.\n   *\n   * Calling `myElement.size()` without an argument returns the element's size\n   * as an object with the properties `width` and `height`. For example,\n   *  `{ width: 20, height: 10 }`.\n   *\n   * The first parameter, `width`, is optional. It's a number used to set the\n   * element's width. Calling `myElement.size(10)`\n   *\n   * The second parameter, 'height`, is also optional. It's a\n   * number used to set the element's height. For example, calling\n   * `myElement.size(20, 10)` sets the element's width to 20 pixels and height\n   * to 10 pixels.\n   *\n   * The constant `AUTO` can be used to adjust one dimension at a time while\n   * maintaining the aspect ratio, which is `width / height`. For example,\n   * consider an element that's 200 pixels wide and 100 pixels tall. Calling\n   * `myElement.size(20, AUTO)` sets the width to 20 pixels and height to 10\n   * pixels.\n   *\n   * Note: In the case of elements that need to load data, such as images, wait\n   * to call `myElement.size()` until after the data loads.\n   *\n   * @return {Object} width and height of the element in an object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a pink div element and place it at the top-left corner.\n   *   let div = createDiv();\n   *   div.position(10, 10);\n   *   div.style('background-color', 'deeppink');\n   *\n   *   // Set the div's width to 80 pixels and height to 20 pixels.\n   *   div.size(80, 20);\n   *\n   *   describe('A gray square with a pink rectangle near its top.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a pink div element and place it at the top-left corner.\n   *   let div = createDiv();\n   *   div.position(10, 10);\n   *   div.style('background-color', 'deeppink');\n   *\n   *   // Set the div's width to 80 pixels and height to 40 pixels.\n   *   div.size(80, 40);\n   *\n   *   // Get the div's size as an object.\n   *   let s = div.size();\n   *\n   *   // Display the div's dimensions.\n   *   div.html(`${s.width} x ${s.height}`);\n   *\n   *   describe('A gray square with a pink rectangle near its top. The text \"80 x 40\" is written within the rectangle.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let img1;\n   * let img2;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Load an image of an astronaut on the moon\n   *   // and place it at the top-left of the canvas.\n   *   img1 = createImg(\n   *     'assets/moonwalk.jpg',\n   *     'An astronaut walking on the moon',\n   *     ''\n   *   );\n   *   img1.position(0, 0);\n   *\n   *   // Load an image of an astronaut on the moon\n   *   // and place it at the top-left of the canvas.\n   *   // Resize the image once it's loaded.\n   *   img2 = createImg(\n   *     'assets/moonwalk.jpg',\n   *     'An astronaut walking on the moon',\n   *     '',\n   *     resizeImage\n   *   );\n   *   img2.position(0, 0);\n   *\n   *   describe('A gray square two copies of a space image at the top-left. The copy in front is smaller.');\n   * }\n   *\n   * // Resize img2 and keep its aspect ratio.\n   * function resizeImage() {\n   *   img2.size(50, AUTO);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {(Number|AUTO)} [w]   width of the element, either AUTO, or a number.\n   * @param  {(Number|AUTO)} [h] height of the element, either AUTO, or a number.\n   * @chainable\n   */\n  size(w, h) {\n    if (arguments.length === 0) {\n      return { width: this.elt.offsetWidth, height: this.elt.offsetHeight };\n    } else {\n      let aW = w;\n      let aH = h;\n      const AUTO$1 = AUTO;\n      if (aW !== AUTO$1 || aH !== AUTO$1) {\n        if (aW === AUTO$1) {\n          aW = h * this.width / this.height;\n        } else if (aH === AUTO$1) {\n          aH = w * this.height / this.width;\n        }\n        // set diff for cnv vs normal div\n        if (this.elt instanceof HTMLCanvasElement) {\n          const j = {};\n          const k = this.elt.getContext('2d');\n          let prop;\n          for (prop in k) {\n            j[prop] = k[prop];\n          }\n          this.elt.setAttribute('width', aW * this._pInst._pixelDensity);\n          this.elt.setAttribute('height', aH * this._pInst._pixelDensity);\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n          for (prop in j) {\n            this.elt.getContext('2d')[prop] = j[prop];\n          }\n        } else {\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this.elt.width = aW;\n          this.elt.height = aH;\n        }\n        this.width = aW;\n        this.height = aH;\n        if (this._pInst && this._pInst._curElement) {\n          // main canvas associated with p5 instance\n          if (this._pInst._curElement.elt === this.elt) {\n            this._pInst.width = aW;\n            this._pInst.height = aH;\n          }\n        }\n      }\n      return this;\n    }\n  }\n\n  /**\n   * Applies a style to the element by adding a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax\" target=\"_blank\">CSS declaration</a>.\n   *\n   * The first parameter, `property`, is a string. If the name of a style\n   * property is passed, as in `myElement.style('color')`, the method returns\n   * the current value as a string or `null` if it hasn't been set. If a\n   * `property:style` string is passed, as in\n   * `myElement.style('color:deeppink')`, the method sets the style `property`\n   * to `value`.\n   *\n   * The second parameter, `value`, is optional. It sets the property's value.\n   * `value` can be a string, as in\n   * `myElement.style('color', 'deeppink')`, or a\n   * <a href=\"#/p5.Color\">p5.Color</a> object, as in\n   * `myElement.style('color', myColor)`.\n   *\n   * @param  {String} property style property to set.\n   * @returns {String} value of the property.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its font color to \"deeppink\".\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color', 'deeppink');\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Color object.\n   *   let c = color('deeppink');\n   *\n   *   // Create a paragraph element and set its font color using a p5.Color object.\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color', c);\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its font color to \"deeppink\"\n   *   // using property:value syntax.\n   *   let p = createP('p5*js');\n   *   p.position(25, 20);\n   *   p.style('color:deeppink');\n   *\n   *   describe('The text p5*js written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an empty paragraph element and set its font color to \"deeppink\".\n   *   let p = createP();\n   *   p.position(5, 5);\n   *   p.style('color', 'deeppink');\n   *\n   *   // Get the element's color as an  RGB color string.\n   *   let c = p.style('color');\n   *\n   *   // Set the element's inner HTML using the RGB color string.\n   *   p.html(c);\n   *\n   *   describe('The text \"rgb(255, 20, 147)\" written in pink on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} property\n   * @param  {String|p5.Color} value value to assign to the property.\n   * @return {String} value of the property.\n   * @chainable\n   */\n  style(prop, val) {\n    const self = this;\n\n    if (val instanceof Color) {\n      val = val.toString();\n    }\n\n    if (typeof val === 'undefined') {\n      if (prop.indexOf(':') === -1) {\n        // no value set, so assume requesting a value\n        let styles = window.getComputedStyle(self.elt);\n        let style = styles.getPropertyValue(prop);\n        return style;\n      } else {\n        // value set using `:` in a single line string\n        const attrs = prop.split(';');\n        for (let i = 0; i < attrs.length; i++) {\n          const parts = attrs[i].split(':');\n          if (parts[0] && parts[1]) {\n            this.elt.style[parts[0].trim()] = parts[1].trim();\n          }\n        }\n      }\n    } else {\n      // input provided as key,val pair\n      this.elt.style[prop] = val;\n      if (\n        prop === 'width' ||\n        prop === 'height' ||\n        prop === 'left' ||\n        prop === 'top'\n      ) {\n        let styles = window.getComputedStyle(self.elt);\n        let styleVal = styles.getPropertyValue(prop);\n        let numVal = styleVal.replace(/[^\\d.]/g, '');\n        this[prop] = Math.round(parseFloat(numVal, 10));\n      }\n    }\n    return this;\n  }\n\n  /* Helper method called by p5.Element.style() */\n  _translate(...args) {\n    this.elt.style.position = 'absolute';\n    // save out initial non-translate transform styling\n    let transform = '';\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/translate3d\\(.*\\)/g, '');\n      transform = transform.replace(/translate[X-Z]?\\(.*\\)/g, '');\n    }\n    if (args.length === 2) {\n      this.elt.style.transform =\n        'translate(' + args[0] + 'px, ' + args[1] + 'px)';\n    } else if (args.length > 2) {\n      this.elt.style.transform =\n        'translate3d(' +\n        args[0] +\n        'px,' +\n        args[1] +\n        'px,' +\n        args[2] +\n        'px)';\n      if (args.length === 3) {\n        this.elt.parentElement.style.perspective = '1000px';\n      } else {\n        this.elt.parentElement.style.perspective = args[3] + 'px';\n      }\n    }\n    // add any extra transform styling back on end\n    this.elt.style.transform += transform;\n    return this;\n  }\n\n  /* Helper method called by p5.Element.style() */\n  _rotate(...args) {\n    // save out initial non-rotate transform styling\n    let transform = '';\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/rotate3d\\(.*\\)/g, '');\n      transform = transform.replace(/rotate[X-Z]?\\(.*\\)/g, '');\n    }\n\n    if (args.length === 1) {\n      this.elt.style.transform = 'rotate(' + args[0] + 'deg)';\n    } else if (args.length === 2) {\n      this.elt.style.transform =\n        'rotate(' + args[0] + 'deg, ' + args[1] + 'deg)';\n    } else if (args.length === 3) {\n      this.elt.style.transform = 'rotateX(' + args[0] + 'deg)';\n      this.elt.style.transform += 'rotateY(' + args[1] + 'deg)';\n      this.elt.style.transform += 'rotateZ(' + args[2] + 'deg)';\n    }\n    // add remaining transform back on\n    this.elt.style.transform += transform;\n    return this;\n  }\n\n  /**\n   * Adds an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#attributes\" target=\"_blank\">attribute</a>\n   * to the element.\n   *\n   * This method is useful for advanced tasks. Most commonly-used attributes,\n   * such as `id`, can be set with their dedicated methods. For example,\n   * `nextButton.id('next')` sets an element's `id` attribute. Calling\n   * `nextButton.attribute('id', 'next')` has the same effect.\n   *\n   * The first parameter, `attr`, is the attribute's name as a string. Calling\n   * `myElement.attribute('align')` returns the attribute's current value as a\n   * string or `null` if it hasn't been set.\n   *\n   * The second parameter, `value`, is optional. It's a string used to set the\n   * attribute's value. For example, calling\n   * `myElement.attribute('align', 'center')` sets the element's horizontal\n   * alignment to `center`.\n   *\n   * @return {String} value of the attribute.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a container div element and place it at the top-left corner.\n   *   let container = createDiv();\n   *   container.position(0, 0);\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"left\".\n   *   let p1 = createP('hi');\n   *   p1.parent(container);\n   *   p1.attribute('align', 'left');\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"center\".\n   *   let p2 = createP('hi');\n   *   p2.parent(container);\n   *   p2.attribute('align', 'center');\n   *\n   *   // Create a paragraph element and place it within the container.\n   *   // Set its horizontal alignment to \"right\".\n   *   let p3 = createP('hi');\n   *   p3.parent(container);\n   *   p3.attribute('align', 'right');\n   *\n   *   describe('A gray square with the text \"hi\" written on three separate lines, each placed further to the right.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String} attr       attribute to set.\n   * @param  {String} value      value to assign to the attribute.\n   * @chainable\n   */\n  attribute(attr, value) {\n    //handling for checkboxes and radios to ensure options get\n    //attributes not divs\n    if (\n      this.elt.firstChild != null &&\n      (this.elt.firstChild.type === 'checkbox' ||\n        this.elt.firstChild.type === 'radio')\n    ) {\n      if (typeof value === 'undefined') {\n        return this.elt.firstChild.getAttribute(attr);\n      } else {\n        for (let i = 0; i < this.elt.childNodes.length; i++) {\n          this.elt.childNodes[i].setAttribute(attr, value);\n        }\n      }\n    } else if (typeof value === 'undefined') {\n      return this.elt.getAttribute(attr);\n    } else {\n      this.elt.setAttribute(attr, value);\n      return this;\n    }\n  }\n\n  /**\n   * Removes an attribute from the element.\n   *\n   * The parameter `attr` is the attribute's name as a string. For example,\n   * calling `myElement.removeAttribute('align')` removes its `align`\n   * attribute if it's been set.\n   *\n   * @param  {String} attr       attribute to remove.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let p;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and place it in the center of the canvas.\n   *   // Set its \"align\" attribute to \"center\".\n   *   p = createP('hi');\n   *   p.position(0, 20);\n   *   p.attribute('align', 'center');\n   *\n   *   describe('The text \"hi\" written in black at the center of a gray square. The text moves to the left edge when double-clicked.');\n   * }\n   *\n   * // Remove the 'align' attribute when the user double-clicks the paragraph.\n   * function doubleClicked() {\n   *   p.removeAttribute('align');\n   * }\n   * </code>\n   * </div>\n   */\n  removeAttribute(attr) {\n    if (\n      this.elt.firstChild != null &&\n      (this.elt.firstChild.type === 'checkbox' ||\n        this.elt.firstChild.type === 'radio')\n    ) {\n      for (let i = 0; i < this.elt.childNodes.length; i++) {\n        this.elt.childNodes[i].removeAttribute(attr);\n      }\n    }\n    this.elt.removeAttribute(attr);\n    return this;\n  }\n\n  /**\n   * Returns or sets the element's value.\n   *\n   * Calling `myElement.value()` returns the element's current value.\n   *\n   * The parameter, `value`, is an optional number or string. If provided,\n   * as in `myElement.value(123)`, it's used to set the element's value.\n   *\n   * @return {String|Number} value of the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a text input and place it beneath the canvas.\n   *   // Set its default value to \"hello\".\n   *   input = createInput('hello');\n   *   input.position(0, 100);\n   *\n   *   describe('The text from an input box is displayed on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input's value to display a message.\n   *   let msg = input.value();\n   *   text(msg, 0, 55);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a text input and place it beneath the canvas.\n   *   // Set its default value to \"hello\".\n   *   input = createInput('hello');\n   *   input.position(0, 100);\n   *\n   *   describe('The text from an input box is displayed on a gray square. The text resets to \"hello\" when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input's value to display a message.\n   *   let msg = input.value();\n   *   text(msg, 0, 55);\n   * }\n   *\n   * // Reset the input's value.\n   * function doubleClicked() {\n   *   input.value('hello');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {String|Number}     value\n   * @chainable\n   */\n  value(...args) {\n    if (args.length > 0) {\n      this.elt.value = args[0];\n      return this;\n    } else {\n      if (this.elt.type === 'range') {\n        return parseFloat(this.elt.value);\n      } else return this.elt.value;\n    }\n  }\n\n  /**\n   * Calls a function when the mouse is pressed over the element.\n   *\n   * Calling `myElement.mousePressed(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the canvas\n   *   // is pressed.\n   *   cnv.mousePressed(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse is pressed.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mousePressed(fxn) {\n    // Prepend the mouse property setters to the event-listener.\n    // This is required so that mouseButton is set correctly prior to calling the callback (fxn).\n    // For details, see https://github.com/processing/p5.js/issues/3087.\n    const eventPrependedFxn = function (event) {\n      this._pInst.mouseIsPressed = true;\n      this._pInst._activePointers.set(event.pointerId, event);\n      this._pInst._setMouseButton(event);\n      this._pInst._updatePointerCoords(event);\n      // Pass along the return-value of the callback:\n      return fxn.call(this, event);\n    };\n    // Pass along the event-prepended form of the callback.\n    Element._adjustListener('pointerdown', eventPrependedFxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is pressed twice over the element.\n   *\n   * Calling `myElement.doubleClicked(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                double clicked over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // canvas is double-clicked.\n   *   cnv.doubleClicked(randomColor);\n   *\n   *   describe('A gray square changes color when the user double-clicks the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  doubleClicked(fxn) {\n    Element._adjustListener('dblclick', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse wheel scrolls over the element.\n   *\n   * The callback function, `fxn`, is passed an `event` object. `event` has\n   * two numeric properties, `deltaY` and `deltaX`. `event.deltaY` is\n   * negative if the mouse wheel rotates away from the user. It's positive if\n   * the mouse wheel rotates toward the user. `event.deltaX` is positive if\n   * the mouse wheel moves to the right. It's negative if the mouse wheel moves\n   * to the left.\n   *\n   * Calling `myElement.mouseWheel(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse wheel is\n   *                                scrolled over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse wheel moves.\n   *   cnv.mouseWheel(randomColor);\n   *\n   *   describe('A gray square changes color when the user scrolls the mouse wheel over the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call changeBackground() when the\n   *   // mouse wheel moves.\n   *   cnv.mouseWheel(changeBackground);\n   *\n   *   describe('A gray square. When the mouse wheel scrolls over the square, it changes color and displays shapes.');\n   * }\n   *\n   * function changeBackground(event) {\n   *   // Change the background color\n   *   // based on deltaY.\n   *   if (event.deltaY > 0) {\n   *     background('deeppink');\n   *   } else if (event.deltaY < 0) {\n   *     background('cornflowerblue');\n   *   } else {\n   *     background(200);\n   *   }\n   *\n   *   // Draw a shape based on deltaX.\n   *   if (event.deltaX > 0) {\n   *     circle(50, 50, 20);\n   *   } else if (event.deltaX < 0) {\n   *     square(40, 40, 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  mouseWheel(fxn) {\n    Element._adjustListener('wheel', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is released over the element.\n   *\n   * Calling `myElement.mouseReleased(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when a\n   *   // mouse press ends.\n   *   cnv.mouseReleased(randomColor);\n   *\n   *   describe('A gray square changes color when the user releases a mouse press.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseReleased(fxn) {\n    Element._adjustListener('pointerup', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse is pressed and released over the element.\n   *\n   * Calling `myElement.mouseReleased(false)` disables the function.\n   *\n   * Note: Some mobile browsers may also trigger this event when the element\n   * receives a quick tap.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse is\n   *                                pressed and released over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when a\n   *   // mouse press ends.\n   *   cnv.mouseClicked(randomColor);\n   *\n   *   describe('A gray square changes color when the user releases a mouse press.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseClicked(fxn) {\n    Element._adjustListener('click', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves over the element.\n   *\n   * Calling `myElement.mouseMoved(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves.\n   *   cnv.mouseMoved(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves over the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseMoved(fxn) {\n    Element._adjustListener('pointermove', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves onto the element.\n   *\n   * Calling `myElement.mouseOver(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves onto the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves onto the canvas.\n   *   cnv.mouseOver(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves onto the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseOver(fxn) {\n    Element._adjustListener('pointerover', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the mouse moves off the element.\n   *\n   * Calling `myElement.mouseOut(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the mouse\n   *                                moves off the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call randomColor() when the\n   *   // mouse moves off the canvas.\n   *   cnv.mouseOut(randomColor);\n   *\n   *   describe('A gray square changes color when the mouse moves off the canvas.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  mouseOut(fxn) {\n    Element._adjustListener('pointerout', fxn, this);\n    return this;\n  }\n\n    /**\n   * Calls a function when a file is dragged over the element.\n   *\n   * Calling `myElement.dragOver(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the file is\n   *                                dragged over the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Drag a file over the canvas to test.\n   *\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call helloFile() when a\n   *   // file is dragged over\n   *   // the canvas.\n   *   cnv.dragOver(helloFile);\n   *\n   *   describe('A gray square. The text \"hello, file\" appears when a file is dragged over the square.');\n   * }\n   *\n   * function helloFile() {\n   *   text('hello, file', 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  dragOver(fxn) {\n    Element._adjustListener('dragover', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when a file is dragged off the element.\n   *\n   * Calling `myElement.dragLeave(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the file is\n   *                                dragged off the element.\n   *                                `false` disables the function.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * // Drag a file over, then off\n   * // the canvas to test.\n   *\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call byeFile() when a\n   *   // file is dragged over,\n   *   // then off the canvas.\n   *   cnv.dragLeave(byeFile);\n   *\n   *   describe('A gray square. The text \"bye, file\" appears when a file is dragged over, then off the square.');\n   * }\n   *\n   * function byeFile() {\n   *   text('bye, file', 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  dragLeave(fxn) {\n    Element._adjustListener('dragleave', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the element changes.\n   *\n   * Calling `myElement.changed(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when the element changes.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dropdown;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a dropdown menu and add a few color options.\n   *   dropdown = createSelect();\n   *   dropdown.position(0, 0);\n   *   dropdown.option('red');\n   *   dropdown.option('green');\n   *   dropdown.option('blue');\n   *\n   *   // Call paintBackground() when the color option changes.\n   *   dropdown.changed(paintBackground);\n   *\n   *   describe('A gray square with a dropdown menu at the top. The square changes color when an option is selected.');\n   * }\n   *\n   * // Paint the background with the selected color.\n   * function paintBackground() {\n   *   let c = dropdown.value();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   checkbox = createCheckbox(' circle');\n   *   checkbox.position(0, 100);\n   *\n   *   // Call repaint() when the checkbox changes.\n   *   checkbox.changed(repaint);\n   *\n   *   describe('A gray square with a checkbox underneath it that says \"circle\". A white circle appears when the box is checked and disappears otherwise.');\n   * }\n   *\n   * // Paint the background gray and determine whether to draw a circle.\n   * function repaint() {\n   *   background(200);\n   *   if (checkbox.checked() === true) {\n   *     circle(50, 50, 30);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  changed(fxn) {\n    Element._adjustListener('change', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the element receives input.\n   *\n   * `myElement.input()` is often used to with text inputs and sliders. Calling\n   * `myElement.input(false)` disables the function.\n   *\n   * @param  {Function|Boolean} fxn function to call when input is detected within\n   *                                the element.\n   *                                `false` disables the function.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a slider and place it beneath the canvas.\n   *   slider = createSlider(0, 255, 200);\n   *   slider.position(0, 100);\n   *\n   *   // Call repaint() when the slider changes.\n   *   slider.input(repaint);\n   *\n   *   describe('A gray square with a range slider underneath it. The background changes shades of gray when the slider is moved.');\n   * }\n   *\n   * // Paint the background using slider's value.\n   * function repaint() {\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let input;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an input and place it beneath the canvas.\n   *   input = createInput('');\n   *   input.position(0, 100);\n   *\n   *   // Call repaint() when input is detected.\n   *   input.input(repaint);\n   *\n   *   describe('A gray square with a text input bar beneath it. Any text written in the input appears in the middle of the square.');\n   * }\n   *\n   * // Paint the background gray and display the input's value.\n   * function repaint() {\n   *   background(200);\n   *   let msg = input.value();\n   *   text(msg, 5, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  input(fxn) {\n    Element._adjustListener('input', fxn, this);\n    return this;\n  }\n\n  /**\n   * Calls a function when the user drops a file on the element.\n   *\n   * The first parameter, `callback`, is a function to call once the file loads.\n   * The callback function should have one parameter, `file`, that's a\n   * <a href=\"#/p5.File\">p5.File</a> object. If the user drops multiple files on\n   * the element, `callback`, is called once for each file.\n   *\n   * The second parameter, `fxn`, is a function to call when the browser detects\n   * one or more dropped files. The callback function should have one\n   * parameter, `event`, that's a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\n   *\n   * @param  {Function} callback  called when a file loads. Called once for each file dropped.\n   * @param  {Function} [fxn]     called once when any files are dropped.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Drop an image on the canvas to view\n   * // this example.\n   * let img;\n   *\n   * function setup() {\n   *   let c = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call handleFile() when a file that's dropped on the canvas has loaded.\n   *   c.drop(handleFile);\n   *\n   *   describe('A gray square. When the user drops an image on the square, it is displayed.');\n   * }\n   *\n   * // Remove the existing image and display the new one.\n   * function handleFile(file) {\n   *   // Remove the current image, if any.\n   *   if (img) {\n   *     img.remove();\n   *   }\n   *\n   *   // Create an <img> element with the\n   *   // dropped file.\n   *   img = createImg(file.data, '');\n   *   img.hide();\n   *\n   *   // Draw the image.\n   *   image(img, 0, 0, width, height);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Drop an image on the canvas to view\n   * // this example.\n   * let img;\n   * let msg;\n   *\n   * function setup() {\n   *   let c = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Call functions when the user drops a file on the canvas\n   *   // and when the file loads.\n   *   c.drop(handleFile, handleDrop);\n   *\n   *   describe('A gray square. When the user drops an image on the square, it is displayed. The id attribute of canvas element is also displayed.');\n   * }\n   *\n   * // Display the image when it loads.\n   * function handleFile(file) {\n   *   // Remove the current image, if any.\n   *   if (img) {\n   *     img.remove();\n   *   }\n   *\n   *   // Create an img element with the dropped file.\n   *   img = createImg(file.data, '');\n   *   img.hide();\n   *\n   *   // Draw the image.\n   *   image(img, 0, 0, width, height);\n   * }\n   *\n   * // Display the file's name when it loads.\n   * function handleDrop(event) {\n   *   // Remove current paragraph, if any.\n   *   if (msg) {\n   *     msg.remove();\n   *   }\n   *\n   *   // Use event to get the drop target's id.\n   *   let id = event.target.id;\n   *\n   *   // Write the canvas' id beneath it.\n   *   msg = createP(id);\n   *   msg.position(0, 100);\n   *\n   *   // Set the font color randomly for each drop.\n   *   let c = random(['red', 'green', 'blue']);\n   *   msg.style('color', c);\n   *   msg.style('font-size', '12px');\n   * }\n   * </code>\n   * </div>\n   */\n  drop(callback, fxn) {\n    // Is the file stuff supported?\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      if (!this._dragDisabled) {\n        this._dragDisabled = true;\n\n        const preventDefault = function (evt) {\n          evt.preventDefault();\n        };\n\n        // If you want to be able to drop you've got to turn off\n        // a lot of default behavior.\n        // avoid `attachListener` here, since it overrides other handlers.\n        this.elt.addEventListener('dragover', preventDefault);\n\n        // If this is a drag area we need to turn off the default behavior\n        this.elt.addEventListener('dragleave', preventDefault);\n      }\n\n      // Deal with the files\n      Element._attachListener(\n        'drop',\n        function (evt) {\n          evt.preventDefault();\n          // Call the second argument as a callback that receives the raw drop event\n          if (typeof fxn === 'function') {\n            fxn.call(this, evt);\n          }\n          // A FileList\n          const files = evt.dataTransfer.files;\n\n          // Load each one and trigger the callback\n          for (const f of files) {\n            File._load(f, callback);\n          }\n        },\n        this\n      );\n    } else {\n      console.log('The File APIs are not fully supported in this browser.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Makes the element draggable.\n   *\n   * The parameter, `elmnt`, is optional. If another\n   * <a href=\"#/p5.Element\">p5.Element</a> object is passed, as in\n   * `myElement.draggable(otherElement)`, the other element will become draggable.\n   *\n   * @param  {p5.Element} [elmnt]  another <a href=\"#/p5.Element\">p5.Element</a>.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let stickyNote;\n   * let textInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element and style it.\n   *   stickyNote = createDiv('Note');\n   *   stickyNote.position(5, 5);\n   *   stickyNote.size(80, 20);\n   *   stickyNote.style('font-size', '16px');\n   *   stickyNote.style('font-family', 'Comic Sans MS');\n   *   stickyNote.style('background', 'orchid');\n   *   stickyNote.style('padding', '5px');\n   *\n   *   // Make the note draggable.\n   *   stickyNote.draggable();\n   *\n   *   // Create a panel div and style it.\n   *   let panel = createDiv('');\n   *   panel.position(5, 40);\n   *   panel.size(80, 50);\n   *   panel.style('background', 'orchid');\n   *   panel.style('font-size', '16px');\n   *   panel.style('padding', '5px');\n   *   panel.style('text-align', 'center');\n   *\n   *   // Make the panel draggable.\n   *   panel.draggable();\n   *\n   *   // Create a text input and style it.\n   *   textInput = createInput('Note');\n   *   textInput.size(70);\n   *\n   *   // Add the input to the panel.\n   *   textInput.parent(panel);\n   *\n   *   // Call handleInput() when text is input.\n   *   textInput.input(handleInput);\n   *\n   *   describe(\n   *     'A gray square with two purple rectangles that move when dragged. The top rectangle displays the text that is typed into the bottom rectangle.'\n   *   );\n   * }\n   *\n   * // Update stickyNote's HTML when text is input.\n   * function handleInput() {\n   *   stickyNote.html(textInput.value());\n   * }\n   * </code>\n   * </div>\n   */\n  draggable(elmMove) {\n    let isTouch = 'ontouchstart' in window;\n\n    let x = 0,\n      y = 0,\n      px = 0,\n      py = 0,\n      elmDrag,\n      dragMouseDownEvt = isTouch ? 'touchstart' : 'mousedown',\n      closeDragElementEvt = isTouch ? 'touchend' : 'mouseup',\n      elementDragEvt = isTouch ? 'touchmove' : 'mousemove';\n\n    if (elmMove === undefined) {\n      elmMove = this.elt;\n      elmDrag = elmMove;\n    } else if (elmMove !== this.elt && elmMove.elt !== this.elt) {\n      elmMove = elmMove.elt;\n      elmDrag = this.elt;\n    }\n\n    elmDrag.addEventListener(dragMouseDownEvt, dragMouseDown, false);\n    elmDrag.style.cursor = 'move';\n\n    function dragMouseDown(e) {\n      e = e || window.event;\n\n      if (isTouch) {\n        const touches = e.changedTouches;\n        px = parseInt(touches[0].clientX);\n        py = parseInt(touches[0].clientY);\n      } else {\n        px = parseInt(e.clientX);\n        py = parseInt(e.clientY);\n      }\n\n      document.addEventListener(closeDragElementEvt, closeDragElement, false);\n      document.addEventListener(elementDragEvt, elementDrag, false);\n      return false;\n    }\n\n    function elementDrag(e) {\n      e = e || window.event;\n\n      if (isTouch) {\n        const touches = e.changedTouches;\n        x = px - parseInt(touches[0].clientX);\n        y = py - parseInt(touches[0].clientY);\n        px = parseInt(touches[0].clientX);\n        py = parseInt(touches[0].clientY);\n      } else {\n        x = px - parseInt(e.clientX);\n        y = py - parseInt(e.clientY);\n        px = parseInt(e.clientX);\n        py = parseInt(e.clientY);\n      }\n\n      elmMove.style.left = elmMove.offsetLeft - x + 'px';\n      elmMove.style.top = elmMove.offsetTop - y + 'px';\n    }\n\n    function closeDragElement() {\n      document.removeEventListener(closeDragElementEvt, closeDragElement, false);\n      document.removeEventListener(elementDragEvt, elementDrag, false);\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Boolean|Function} fxn\n   * @param {Element} ctx\n   * @chainable\n   * @alt\n   * General handler for event attaching and detaching\n   */\n  static _adjustListener(ev, fxn, ctx) {\n    if (fxn === false) {\n      Element._detachListener(ev, ctx);\n    } else {\n      Element._attachListener(ev, fxn, ctx);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Function} fxn\n   * @param {Element} ctx\n   */\n  static _attachListener(ev, fxn, ctx) {\n    // detach the old listener if there was one\n    if (ctx._events[ev]) {\n      Element._detachListener(ev, ctx);\n    }\n    const f = fxn.bind(ctx);\n    ctx.elt.addEventListener(ev, f, false);\n    ctx._events[ev] = f;\n  }\n\n  /**\n   *\n   * @private\n   * @static\n   * @param {String} ev\n   * @param {Element} ctx\n   */\n  static _detachListener(ev, ctx) {\n    const f = ctx._events[ev];\n    ctx.elt.removeEventListener(ev, f, false);\n    ctx._events[ev] = null;\n  }\n}\nfunction element(p5, fn){\n  /**\n   * A class to describe an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started\" target=\"_blank\">HTML element</a>.\n   *\n   * Sketches can use many elements. Common elements include the drawing canvas,\n   * buttons, sliders, webcam feeds, and so on.\n   *\n   * All elements share the methods of the `p5.Element` class. They're created\n   * with functions such as <a href=\"#/p5/createCanvas\">createCanvas()</a> and\n   * <a href=\"#/p5/createButton\">createButton()</a>.\n   *\n   * @class p5.Element\n   * @param {HTMLElement} elt wrapped DOM element.\n   * @param {p5} [pInst] pointer to p5 instance.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button element and\n   *   // place it beneath the canvas.\n   *   let btn = createButton('change');\n   *   btn.position(0, 100);\n   *\n   *   // Call randomColor() when\n   *   // the button is pressed.\n   *   btn.mousePressed(randomColor);\n   *\n   *   describe('A gray square with a button that says \"change\" beneath it. The square changes color when the user presses the button.');\n   * }\n   *\n   * // Paint the background either\n   * // red, yellow, blue, or green.\n   * function randomColor() {\n   *   let c = random(['red', 'yellow', 'blue', 'green']);\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.Element = Element;\n\n  /**\n   * A `Number` property that stores the element's width.\n   *\n   * @type {Number}\n   * @property width\n   * @for p5.Element\n   */\n\n  /**\n   * A `Number` property that stores the element's height.\n   *\n   * @type {Number}\n   * @property height\n   * @for p5.Element\n   */\n\n  /**\n   * The element's underlying `HTMLElement` object.\n   *\n   * The\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a>\n   * object's properties and methods can be used directly.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create a canvas element and\n   *   // assign it to cnv.\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the border style for the\n   *   // canvas.\n   *   cnv.elt.style.border = '5px dashed deeppink';\n   *\n   *   describe('A gray square with a pink border drawn with dashed lines.');\n   * }\n   * </code>\n   * </div>\n   *\n   * @property elt\n   * @for p5.Element\n   * @name elt\n   * @readOnly\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  element(p5, p5.prototype);\n}\n\nexport { Element, element as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2755, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/dom/p5.MediaElement.js"],"sourcesContent":["import { Element } from './p5.Element.js';\nimport './p5.File.js';\nimport '../io/p5.XML.js';\nimport '../creating_reading-D4AAKRbx.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-C-g_eAdC.js';\n\n/**\n * @module DOM\n * @submodule DOM\n */\n\n\nclass MediaElement extends Element {\n  constructor(elt, pInst) {\n    super(elt, pInst);\n\n    const self = this;\n    this.elt.crossOrigin = 'anonymous';\n\n    this._prevTime = 0;\n    this._cueIDCounter = 0;\n    this._cues = [];\n    this.pixels = [];\n    this._pixelsState = this;\n    this._pixelDensity = 1;\n    this._modified = false;\n\n    // Media has an internal canvas that is used when drawing it to the main\n    // canvas. It will need to be updated each frame as the video itself plays.\n    // We don't want to update it every time we draw, however, in case the user\n    // has used load/updatePixels. To handle this, we record the frame drawn to\n    // the internal canvas so we only update it if the frame has changed.\n    this._frameOnCanvas = -1;\n\n    Object.defineProperty(self, 'src', {\n      get() {\n        const firstChildSrc = self.elt.children[0].src;\n        const srcVal = self.elt.src === window.location.href ? '' : self.elt.src;\n        const ret =\n          firstChildSrc === window.location.href ? srcVal : firstChildSrc;\n        return ret;\n      },\n      set(newValue) {\n        for (let i = 0; i < self.elt.children.length; i++) {\n          self.elt.removeChild(self.elt.children[i]);\n        }\n        const source = document.createElement('source');\n        source.src = newValue;\n        elt.appendChild(source);\n        self.elt.src = newValue;\n        self.modified = true;\n      }\n    });\n\n    // private _onended callback, set by the method: onended(callback)\n    self._onended = function () { };\n    self.elt.onended = function () {\n      self._onended(self);\n    };\n  }\n\n\n  /**\n   * Plays audio or video from a media element.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display a message.\n   *   text('Click to play', 50, 50);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. A beat plays when the user clicks the square.');\n   * }\n   *\n   * // Play the beat when the user presses the mouse.\n   * function mousePressed() {\n   *   beat.play();\n   * }\n   * </code>\n   * </div>\n   */\n  play() {\n    if (this.elt.currentTime === this.elt.duration) {\n      this.elt.currentTime = 0;\n    }\n    let promise;\n    if (this.elt.readyState > 1) {\n      promise = this.elt.play();\n    } else {\n      // in Chrome, playback cannot resume after being stopped and must reload\n      this.elt.load();\n      promise = this.elt.play();\n    }\n    if (promise && promise.catch) {\n      promise.catch(e => {\n        // if it's an autoplay failure error\n        if (e.name === 'NotAllowedError') {\n          if (typeof IS_MINIFIED === 'undefined') {\n            p5._friendlyAutoplayError(this.src);\n          } else {\n            console.error(e);\n          }\n        } else {\n          // any other kind of error\n          console.error('Media play method encountered an unexpected error', e);\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Stops a media element and sets its current time to 0.\n   *\n   * Calling `media.play()` will restart playing audio/video from the beginning.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isStopped = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to start\" written in black on a gray background. The beat starts or stops when the user presses the mouse.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isStopped === true) {\n   *     text('Click to start', 50, 50);\n   *   } else {\n   *     text('Click to stop', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isStopped === true) {\n   *     // If the beat is stopped, play it.\n   *     beat.play();\n   *     isStopped = false;\n   *   } else {\n   *     // If the beat is playing, stop it.\n   *     beat.stop();\n   *     isStopped = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  stop() {\n    this.elt.pause();\n    this.elt.currentTime = 0;\n    return this;\n  }\n\n  /**\n   * Pauses a media element.\n   *\n   * Calling `media.play()` will resume playing audio/video from the moment it paused.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPaused = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. The beat plays or pauses when the user clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isPaused === true) {\n   *     text('Click to play', 50, 50);\n   *   } else {\n   *     text('Click to pause', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPaused === true) {\n   *     // If the beat is paused,\n   *     // play it.\n   *     beat.play();\n   *     isPaused = false;\n   *   } else {\n   *     // If the beat is playing,\n   *     // pause it.\n   *     beat.pause();\n   *     isPaused = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  pause() {\n    this.elt.pause();\n    return this;\n  }\n\n  /**\n   * Plays the audio/video repeatedly in a loop.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isLooping = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to loop\" written in black on a gray background. A beat plays repeatedly in a loop when the user clicks. The beat stops when the user clicks again.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isLooping === true) {\n   *     text('Click to stop', 50, 50);\n   *   } else {\n   *     text('Click to loop', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isLooping === true) {\n   *     // If the beat is looping, stop it.\n   *     beat.stop();\n   *     isLooping = false;\n   *   } else {\n   *     // If the beat is stopped, loop it.\n   *     beat.loop();\n   *     isLooping = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  loop() {\n    this.elt.setAttribute('loop', true);\n    this.play();\n    return this;\n  }\n  /**\n   * Stops the audio/video from playing in a loop.\n   *\n   * The media will stop when it finishes playing.\n   *\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPlaying = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"Click to play\" written in black on a gray background. A beat plays when the user clicks. The beat stops when the user clicks again.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different instructions based on playback.\n   *   if (isPlaying === true) {\n   *     text('Click to stop', 50, 50);\n   *   } else {\n   *     text('Click to play', 50, 50);\n   *   }\n   * }\n   *\n   * // Adjust playback when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPlaying === true) {\n   *     // If the beat is playing, stop it.\n   *     beat.stop();\n   *     isPlaying = false;\n   *   } else {\n   *     // If the beat is stopped, play it.\n   *     beat.play();\n   *     isPlaying = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  noLoop() {\n    this.elt.removeAttribute('loop');\n    return this;\n  }\n\n  /**\n   * Sets up logic to check that autoplay succeeded.\n   *\n   * @private\n   */\n  _setupAutoplayFailDetection() {\n    const timeout = setTimeout(() => {\n      if (typeof IS_MINIFIED === 'undefined') {\n        p5._friendlyAutoplayError(this.src);\n      } else {\n        console.error(e);\n      }\n    }, 500);\n    this.elt.addEventListener('play', () => clearTimeout(timeout), {\n      passive: true,\n      once: true\n    });\n  }\n\n  /**\n   * Sets the audio/video to play once it's loaded.\n   *\n   * The parameter, `shouldAutoplay`, is optional. Calling\n   * `media.autoplay()` without an argument causes the media to play\n   * automatically. If `true` is passed, as in `media.autoplay(true)`, the\n   * media will automatically play. If `false` is passed, as in\n   * `media.autoPlay(false)`, it won't play automatically.\n   *\n   * @param {Boolean} [shouldAutoplay] whether the element should autoplay.\n   * @chainable\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * let video;\n   *\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Call handleVideo() once the video loads.\n   *   video = createVideo('assets/fingers.mov', handleVideo);\n   *\n   *   describe('A video of fingers walking on a treadmill.');\n   * }\n   *\n   * // Set the video's size and play it.\n   * function handleVideo() {\n   *   video.size(100, 100);\n   *   video.autoplay();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video, but don't play it automatically.\n   *   let video = createVideo('assets/fingers.mov', handleVideo);\n   *\n   *   // Play the video when the user clicks on it.\n   *   video.mousePressed(handlePress);\n   *\n   *   describe('An image of fingers on a treadmill. They start walking when the user double-clicks on them.');\n   * }\n   * </code>\n   * </div>\n   *\n   * // Set the video's size and playback mode.\n   * function handleVideo() {\n   *   video.size(100, 100);\n   *   video.autoplay(false);\n   * }\n   *\n   * // Play the video.\n   * function handleClick() {\n   *   video.play();\n   * }\n   */\n  autoplay(val) {\n    const oldVal = this.elt.getAttribute('autoplay');\n    this.elt.setAttribute('autoplay', val);\n    // if we turned on autoplay\n    if (val && !oldVal) {\n      // bind method to this scope\n      const setupAutoplayFailDetection =\n        () => this._setupAutoplayFailDetection();\n      // if media is ready to play, schedule check now\n      if (this.elt.readyState === 4) {\n        setupAutoplayFailDetection();\n      } else {\n        // otherwise, schedule check whenever it is ready\n        this.elt.addEventListener('canplay', setupAutoplayFailDetection, {\n          passive: true,\n          once: true\n        });\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the audio/video volume.\n   *\n   * Calling `media.volume()` without an argument returns the current volume\n   * as a number in the range 0 (off) to 1 (maximum).\n   *\n   * The parameter, `val`, is optional. It's a number that sets the volume\n   * from 0 (off) to 1 (maximum). For example, calling `media.volume(0.5)`\n   * sets the volume to half of its maximum.\n   *\n   * @return {Number} current volume.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Volume: V\" on a gray square with media controls beneath it. The number \"V\" oscillates between 0 and 1 as the music plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Produce a number between 0 and 1.\n   *   let n = 0.5 * sin(frameCount * 0.01) + 0.5;\n   *\n   *   // Use n to set the volume.\n   *   dragon.volume(n);\n   *\n   *   // Get the current volume and display it.\n   *   let v = dragon.volume();\n   *\n   *   // Round v to 1 decimal place for display.\n   *   v = round(v, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the volume.\n   *   text(`Volume: ${v}`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {Number}            val volume between 0.0 and 1.0.\n   * @chainable\n   */\n  volume(val) {\n    if (typeof val === 'undefined') {\n      return this.elt.volume;\n    } else {\n      this.elt.volume = val;\n    }\n  }\n\n  /**\n   * Sets the audio/video playback speed.\n   *\n   * The parameter, `val`, is optional. It's a number that sets the playback\n   * speed. 1 plays the media at normal speed, 0.5 plays it at half speed, 2\n   * plays it at double speed, and so on. -1 plays the media at normal speed\n   * in reverse.\n   *\n   * Calling `media.speed()` returns the current speed as a number.\n   *\n   * Note: Not all browsers support backward playback. Even if they do,\n   * playback might not be smooth.\n   *\n   * @return {Number} current playback speed.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Speed: S\" on a gray square with media controls beneath it. The number \"S\" oscillates between 0 and 1 as the music plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Produce a number between 0 and 2.\n   *   let n = sin(frameCount * 0.01) + 1;\n   *\n   *   // Use n to set the playback speed.\n   *   dragon.speed(n);\n   *\n   *   // Get the current speed and display it.\n   *   let s = dragon.speed();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the speed.\n   *   text(`Speed: ${s}`, 50, 50);\n   * }\n   * </code>\n   */\n  /**\n   * @param {Number} speed  speed multiplier for playback.\n   * @chainable\n   */\n  speed(val) {\n    if (typeof val === 'undefined') {\n      return this.presetPlaybackRate || this.elt.playbackRate;\n    } else {\n      if (this.loadedmetadata) {\n        this.elt.playbackRate = val;\n      } else {\n        this.presetPlaybackRate = val;\n      }\n    }\n  }\n\n  /**\n   * Sets the media element's playback time.\n   *\n   * The parameter, `time`, is optional. It's a number that specifies the\n   * time, in seconds, to jump to when playback begins.\n   *\n   * Calling `media.time()` without an argument returns the number of seconds\n   * the audio/video has played.\n   *\n   * Note: Time resets to 0 when looping media restarts.\n   *\n   * @return {Number} current time (in seconds).\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"S seconds\" on a gray square with media controls beneath it. The number \"S\" increases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the current playback time.\n   *   let s = dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the playback time.\n   *   text(`${s} seconds`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   // Jump to 2 seconds to start.\n   *   dragon.time(2);\n   *\n   *   describe('The text \"S seconds\" on a gray square with media controls beneath it. The number \"S\" increases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get the current playback time.\n   *   let s = dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the playback time.\n   *   text(`${s} seconds`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {Number} time time to jump to (in seconds).\n   * @chainable\n   */\n  time(val) {\n    if (typeof val === 'undefined') {\n      return this.elt.currentTime;\n    } else {\n      this.elt.currentTime = val;\n      return this;\n    }\n  }\n\n  /**\n   * Returns the audio/video's duration in seconds.\n   *\n   * @return {Number} duration (in seconds).\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"S seconds left\" on a gray square with media controls beneath it. The number \"S\" decreases as the song plays.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the time remaining.\n   *   let s = dragon.duration() - dragon.time();\n   *\n   *   // Round s to 1 decimal place for display.\n   *   s = round(s, 1);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the time remaining.\n   *   text(`${s} seconds left`, 50, 50);\n   * }\n   * </code>\n   * </div>\n   */\n  duration() {\n    return this.elt.duration;\n  }\n  _ensureCanvas() {\n    if (!this.canvas) {\n      this.canvas = document.createElement('canvas');\n      this.drawingContext = this.canvas.getContext('2d');\n      this.setModified(true);\n    }\n\n    // Don't update the canvas again if we have already updated the canvas with\n    // the current frame\n    const needsRedraw = this._frameOnCanvas !== this._pInst.frameCount;\n    if (this.loadedmetadata && needsRedraw) {\n      // wait for metadata for w/h\n      if (this.canvas.width !== this.elt.width) {\n        this.canvas.width = this.elt.width;\n        this.canvas.height = this.elt.height;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n      }\n\n      this.drawingContext.clearRect(\n        0, 0, this.canvas.width, this.canvas.height);\n\n      if (this.flipped === true) {\n        this.drawingContext.save();\n        this.drawingContext.scale(-1, 1);\n        this.drawingContext.translate(-this.canvas.width, 0);\n      }\n\n      this.drawingContext.drawImage(\n        this.elt,\n        0,\n        0,\n        this.canvas.width,\n        this.canvas.height\n      );\n\n      if (this.flipped === true) {\n        this.drawingContext.restore();\n      }\n\n      this.setModified(true);\n      this._frameOnCanvas = this._pInst.frameCount;\n    }\n  }\n  loadPixels(...args) {\n    this._ensureCanvas();\n    return p5.Renderer2D.prototype.loadPixels.apply(this, args);\n  }\n  updatePixels(x, y, w, h) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n      p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n    }\n    this.setModified(true);\n    return this;\n  }\n  get(...args) {\n    this._ensureCanvas();\n    return p5.Renderer2D.prototype.get.apply(this, args);\n  }\n  _getPixel(...args) {\n    this.loadPixels();\n    return p5.Renderer2D.prototype._getPixel.apply(this, args);\n  }\n\n  set(x, y, imgOrCol) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n      p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n      this.setModified(true);\n    }\n  }\n  copy(...args) {\n    this._ensureCanvas();\n    fn.copy.apply(this, args);\n  }\n  mask(...args) {\n    this.loadPixels();\n    this.setModified(true);\n    p5.Image.prototype.mask.apply(this, args);\n  }\n  /**\n   * helper method for web GL mode to figure out if the element\n   * has been modified and might need to be re-uploaded to texture\n   * memory between frames.\n   * @private\n   * @return {boolean} a boolean indicating whether or not the\n   * image has been updated or modified since last texture upload.\n   */\n  isModified() {\n    return this._modified;\n  }\n  /**\n   * helper method for web GL mode to indicate that an element has been\n   * changed or unchanged since last upload. gl texture upload will\n   * set this value to false after uploading the texture; or might set\n   * it to true if metadata has become available but there is no actual\n   * texture data available yet..\n   * @param {Boolean} val sets whether or not the element has been\n   * modified.\n   * @private\n   */\n  setModified(value) {\n    this._modified = value;\n  }\n  /**\n   * Calls a function when the audio/video reaches the end of its playback.\n   *\n   * The element is passed as an argument to the callback function.\n   *\n   * Note: The function won't be called if the media is looping.\n   *\n   * @param  {Function} callback function to call when playback ends.\n   *                             The `p5.MediaElement` is passed as\n   *                             the argument.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   * let isPlaying = false;\n   * let isDone = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   // Call handleEnd() when the beat finishes.\n   *   beat.onended(handleEnd);\n   *\n   *   describe('The text \"Click to play\" written in black on a gray square. A beat plays when the user clicks. The text \"Done!\" appears when the beat finishes playing.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display different messages based on playback.\n   *   if (isDone === true) {\n   *     text('Done!', 50, 50);\n   *   } else if (isPlaying === false) {\n   *     text('Click to play', 50, 50);\n   *   } else {\n   *     text('Playing...', 50, 50);\n   *   }\n   * }\n   *\n   * // Play the beat when the user presses the mouse.\n   * function mousePressed() {\n   *   if (isPlaying === false) {\n   *     isPlaying = true;\n   *     beat.play();\n   *   }\n   * }\n   *\n   * // Set isDone when playback ends.\n   * function handleEnd() {\n   *   isDone = false;\n   * }\n   * </code>\n   * </div>\n   */\n  onended(callback) {\n    this._onended = callback;\n    return this;\n  }\n\n  /*** CONNECT TO WEB AUDIO API / p5.sound.js ***/\n\n  /**\n   * Sends the element's audio to an output.\n   *\n   * The parameter, `audioNode`, can be an `AudioNode` or an object from the\n   * `p5.sound` library.\n   *\n   * If no element is provided, as in `myElement.connect()`, the element\n   * connects to the main output. All connections are removed by the\n   * `.disconnect()` method.\n   *\n   * Note: This method is meant to be used with the p5.sound.js addon library.\n   *\n   * @param  {AudioNode|Object} audioNode AudioNode from the Web Audio API,\n   * or an object from the p5.sound library\n   */\n  connect(obj) {\n    let audioContext, mainOutput;\n\n    // if p5.sound exists, same audio context\n    if (typeof fn.getAudioContext === 'function') {\n      audioContext = fn.getAudioContext();\n      mainOutput = p5.soundOut.input;\n    } else {\n      try {\n        audioContext = obj.context;\n        mainOutput = audioContext.destination;\n      } catch (e) {\n        throw 'connect() is meant to be used with Web Audio API or p5.sound.js';\n      }\n    }\n\n    // create a Web Audio MediaElementAudioSourceNode if none already exists\n    if (!this.audioSourceNode) {\n      this.audioSourceNode = audioContext.createMediaElementSource(this.elt);\n\n      // connect to main output when this method is first called\n      this.audioSourceNode.connect(mainOutput);\n    }\n\n    // connect to object if provided\n    if (obj) {\n      if (obj.input) {\n        this.audioSourceNode.connect(obj.input);\n      } else {\n        this.audioSourceNode.connect(obj);\n      }\n    } else {\n      // otherwise connect to main output of p5.sound / AudioContext\n      this.audioSourceNode.connect(mainOutput);\n    }\n  }\n\n  /**\n   * Disconnect all Web Audio routing, including to the main output.\n   *\n   * This is useful if you want to re-route the output through audio effects,\n   * for example.\n   *\n   */\n  disconnect() {\n    if (this.audioSourceNode) {\n      this.audioSourceNode.disconnect();\n    } else {\n      throw 'nothing to disconnect';\n    }\n  }\n\n  /*** SHOW / HIDE CONTROLS ***/\n\n  /**\n   * Show the default\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\">HTMLMediaElement</a>\n   * controls.\n   *\n   * Note: The controls vary between web browsers.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background('cornflowerblue');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(50);\n   *\n   *   // Display a dragon.\n   *   text('🐉', 50, 50);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('A dragon emoji, 🐉, drawn in the center of a blue square. A song plays in the background. Audio controls are displayed beneath the canvas.');\n   * }\n   * </code>\n   * </div>\n   */\n  showControls() {\n    // must set style for the element to show on the page\n    this.elt.style['text-align'] = 'inherit';\n    this.elt.controls = true;\n  }\n\n  /**\n   * Hide the default\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement\" target=\"_blank\">HTMLMediaElement</a>\n   * controls.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let dragon;\n   * let isHidden = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   dragon = createAudio('assets/lucky_dragons.mp3');\n   *\n   *   // Show the default media controls.\n   *   dragon.showControls();\n   *\n   *   describe('The text \"Double-click to hide controls\" written in the middle of a gray square. A song plays in the background. Audio controls are displayed beneath the canvas. The controls appear/disappear when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *\n   *   // Display a different message when controls are hidden or shown.\n   *   if (isHidden === true) {\n   *     text('Double-click to show controls', 10, 20, 80, 80);\n   *   } else {\n   *     text('Double-click to hide controls', 10, 20, 80, 80);\n   *   }\n   * }\n   *\n   * // Show/hide controls based on a double-click.\n   * function doubleClicked() {\n   *   if (isHidden === true) {\n   *     dragon.showControls();\n   *     isHidden = false;\n   *   } else {\n   *     dragon.hideControls();\n   *     isHidden = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  hideControls() {\n    this.elt.controls = false;\n  }\n\n  /**\n   * Schedules a function to call when the audio/video reaches a specific time\n   * during its playback.\n   *\n   * The first parameter, `time`, is the time, in seconds, when the function\n   * should run. This value is passed to `callback` as its first argument.\n   *\n   * The second parameter, `callback`, is the function to call at the specified\n   * cue time.\n   *\n   * The third parameter, `value`, is optional and can be any type of value.\n   * `value` is passed to `callback`.\n   *\n   * Calling `media.addCue()` returns an ID as a string. This is useful for\n   * removing the cue later.\n   *\n   * @param {Number}   time     cue time to run the callback function.\n   * @param {Function} callback function to call at the cue time.\n   * @param {Object} [value]    object to pass as the argument to\n   *                            `callback`.\n   * @return {Number} id ID of this cue,\n   *                     useful for `media.removeCue(id)`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *   beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('A red square with a beat playing in the background. Its color changes every 2 seconds while the audio plays.');\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   */\n  addCue(time, callback, val) {\n    const id = this._cueIDCounter++;\n\n    const cue = new Cue(callback, time, id, val);\n    this._cues.push(cue);\n\n    if (!this.elt.ontimeupdate) {\n      this.elt.ontimeupdate = this._onTimeUpdate.bind(this);\n    }\n\n    return id;\n  }\n\n  /**\n   * Removes a callback based on its ID.\n   *\n   * @param  {Number} id ID of the cue, created by `media.addCue()`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let lavenderID;\n   * let isRemoved = false;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *\n   *   // Record the ID of the \"lavender\" callback.\n   *   lavenderID = beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('The text \"Double-click to remove lavender.\" written on a red square. The color changes every 2 seconds while the audio plays. The lavender option is removed when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display different instructions based on the available callbacks.\n   *   if (isRemoved === false) {\n   *     text('Double-click to remove lavender.', 10, 10, 80, 80);\n   *   } else {\n   *     text('No more lavender.', 10, 10, 80, 80);\n   *   }\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   *\n   * // Remove the lavender color-change cue when the user double-clicks.\n   * function doubleClicked() {\n   *   if (isRemoved === false) {\n   *     beat.removeCue(lavenderID);\n   *     isRemoved = true;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  removeCue(id) {\n    for (let i = 0; i < this._cues.length; i++) {\n      if (this._cues[i].id === id) {\n        console.log(id);\n        this._cues.splice(i, 1);\n      }\n    }\n\n    if (this._cues.length === 0) {\n      this.elt.ontimeupdate = null;\n    }\n  }\n\n  /**\n   * Removes all functions scheduled with `media.addCue()`.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let isChanging = true;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Play the beat in a loop.\n   *   beat.loop();\n   *\n   *   // Schedule a few events.\n   *   beat.addCue(0, changeBackground, 'red');\n   *   beat.addCue(2, changeBackground, 'deeppink');\n   *   beat.addCue(4, changeBackground, 'orchid');\n   *   beat.addCue(6, changeBackground, 'lavender');\n   *\n   *   describe('The text \"Double-click to stop changing.\" written on a square. The color changes every 2 seconds while the audio plays. The color stops changing when the user double-clicks the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Display different instructions based on the available callbacks.\n   *   if (isChanging === true) {\n   *     text('Double-click to stop changing.', 10, 10, 80, 80);\n   *   } else {\n   *     text('No more changes.', 10, 10, 80, 80);\n   *   }\n   * }\n   *\n   * // Change the background color.\n   * function changeBackground(c) {\n   *   background(c);\n   * }\n   *\n   * // Remove cued functions and stop changing colors when the user\n   * // double-clicks.\n   * function doubleClicked() {\n   *   if (isChanging === true) {\n   *     beat.clearCues();\n   *     isChanging = false;\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  clearCues() {\n    this._cues = [];\n    this.elt.ontimeupdate = null;\n  }\n\n  // private method that checks for cues to be fired if events\n  // have been scheduled using addCue(callback, time).\n  _onTimeUpdate() {\n    const playbackTime = this.time();\n\n    for (let i = 0; i < this._cues.length; i++) {\n      const callbackTime = this._cues[i].time;\n      const val = this._cues[i].val;\n\n      if (this._prevTime < callbackTime && callbackTime <= playbackTime) {\n        // pass the scheduled callbackTime as parameter to the callback\n        this._cues[i].callback(val);\n      }\n    }\n\n    this._prevTime = playbackTime;\n  }\n}\n\n// Cue inspired by JavaScript setTimeout, and the\n// Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org\n// eslint-disable-next-line no-unused-vars\nclass Cue {\n  constructor(callback, time, id, val) {\n    this.callback = callback;\n    this.time = time;\n    this.id = id;\n    this.val = val;\n  }\n}\n\nfunction media(p5, fn){\n  /**\n   * Helpers for create methods.\n   */\n  function addElement(elt, pInst, media) {\n    const node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    const c = media\n      ? new MediaElement(elt, pInst)\n      : new Element(elt, pInst);\n    pInst._elements.push(c);\n    return c;\n  }\n\n  /** VIDEO STUFF **/\n\n  // Helps perform similar tasks for media element methods.\n  function createMedia(pInst, type, src, callback) {\n    const elt = document.createElement(type);\n\n    // Create source elements from given sources\n    src = src || '';\n    if (typeof src === 'string') {\n      src = [src];\n    }\n    for (const mediaSource of src) {\n      const sourceEl = document.createElement('source');\n      sourceEl.setAttribute('src', mediaSource);\n      elt.appendChild(sourceEl);\n    }\n\n    // If callback is provided, attach to element\n    if (typeof callback === 'function') {\n      const callbackHandler = () => {\n        callback();\n        elt.removeEventListener('canplaythrough', callbackHandler);\n      };\n      elt.addEventListener('canplaythrough', callbackHandler);\n    }\n\n    const mediaEl = addElement(elt, pInst, true);\n    mediaEl.loadedmetadata = false;\n\n    // set width and height onload metadata\n    elt.addEventListener('loadedmetadata', () => {\n      mediaEl.width = elt.videoWidth;\n      mediaEl.height = elt.videoHeight;\n\n      // set elt width and height if not set\n      if (mediaEl.elt.width === 0) mediaEl.elt.width = elt.videoWidth;\n      if (mediaEl.elt.height === 0) mediaEl.elt.height = elt.videoHeight;\n      if (mediaEl.presetPlaybackRate) {\n        mediaEl.elt.playbackRate = mediaEl.presetPlaybackRate;\n        delete mediaEl.presetPlaybackRate;\n      }\n      mediaEl.loadedmetadata = true;\n    });\n\n    return mediaEl;\n  }\n\n  /**\n   * Creates a `&lt;video&gt;` element for simple audio/video playback.\n   *\n   * `createVideo()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object. Videos are shown by\n   * default. They can be hidden by calling `video.hide()` and drawn to the\n   * canvas using <a href=\"#/p5/image\">image()</a>.\n   *\n   * The first parameter, `src`, is the path the video. If a single string is\n   * passed, as in `'assets/topsecret.mp4'`, a single video is loaded. An array\n   * of strings can be used to load the same video in different formats. For\n   * example, `['assets/topsecret.mp4', 'assets/topsecret.ogv', 'assets/topsecret.webm']`.\n   * This is useful for ensuring that the video can play across different browsers with\n   * different capabilities. See\n   * <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>MDN</a>\n   * for more information about supported formats.\n   *\n   * The second parameter, `callback`, is optional. It's a function to call once\n   * the video is ready to play.\n   *\n   * @param  {String|String[]} src path to a video file, or an array of paths for\n   *                               supporting different browsers.\n   * @param  {Function} [callback] function to call once the video is ready to play.\n   * @return {p5.MediaElement}   new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Note: this may not work in some browsers.\n   *   let video = createVideo('assets/small.mp4');\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Provide an array options for different file formats.\n   *   let video = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm']\n   *   );\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * let video;\n   *\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load a video and add it to the page.\n   *   // Provide an array options for different file formats.\n   *   // Call mute() once the video loads.\n   *   video = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n   *     muteVideo\n   *   );\n   *\n   *   // Show the default video controls.\n   *   video.showControls();\n   *\n   *   describe('A video of a toy robot with playback controls beneath it.');\n   * }\n   *\n   * // Mute the video once it loads.\n   * function muteVideo() {\n   *   video.volume(0);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createVideo = function (src, callback) {\n    // p5._validateParameters('createVideo', arguments);\n    return createMedia(this, 'video', src, callback);\n  };\n\n  /** AUDIO STUFF **/\n\n  /**\n   * Creates a hidden `&lt;audio&gt;` element for simple audio playback.\n   *\n   * `createAudio()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * The first parameter, `src`, is the path the video. If a single string is\n   * passed, as in `'assets/video.mp4'`, a single video is loaded. An array\n   * of strings can be used to load the same video in different formats. For\n   * example, `['assets/video.mp4', 'assets/video.ogv', 'assets/video.webm']`.\n   * This is useful for ensuring that the video can play across different\n   * browsers with different capabilities. See\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\" target=\"_blank\">MDN</a>\n   * for more information about supported formats.\n   *\n   * The second parameter, `callback`, is optional. It's a function to call once\n   * the audio is ready to play.\n   *\n   * @param  {String|String[]} [src] path to an audio file, or an array of paths\n   *                                 for supporting different browsers.\n   * @param  {Function} [callback]   function to call once the audio is ready to play.\n   * @return {p5.MediaElement}       new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Load the audio.\n   *   let beat = createAudio('assets/beat.mp3');\n   *\n   *   // Show the default audio controls.\n   *   beat.showControls();\n   *\n   *   describe('An audio beat plays when the user double-clicks the square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createAudio = function (src, callback) {\n    // p5._validateParameters('createAudio', arguments);\n    return createMedia(this, 'audio', src, callback);\n  };\n\n  /** CAMERA STUFF **/\n\n  fn.VIDEO = 'video';\n\n  fn.AUDIO = 'audio';\n\n  // from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      const getUserMedia =\n        navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        return Promise.reject(\n          new Error('getUserMedia is not implemented in this browser')\n        );\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  }\n\n  /**\n   * Creates a `&lt;video&gt;` element that \"captures\" the audio/video stream from\n   * the webcam and microphone.\n   *\n   * `createCapture()` returns a new\n   * <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object. Videos are shown by\n   * default. They can be hidden by calling `capture.hide()` and drawn to the\n   * canvas using <a href=\"#/p5/image\">image()</a>.\n   *\n   * The first parameter, `type`, is optional. It sets the type of capture to\n   * use. By default, `createCapture()` captures both audio and video. If `VIDEO`\n   * is passed, as in `createCapture(VIDEO)`, only video will be captured.\n   * If `AUDIO` is passed, as in `createCapture(AUDIO)`, only audio will be\n   * captured. A constraints object can also be passed to customize the stream.\n   * See the <a href=\"http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints\" target=\"_blank\">\n   * W3C documentation</a> for possible properties. Different browsers support different\n   * properties.\n   *\n   * The 'flipped' property is an optional property which can be set to `{flipped:true}`\n   * to mirror the video output.If it is true then it means that video will be mirrored\n   * or flipped and if nothing is mentioned then by default it will be `false`.\n   *\n   * The second parameter,`callback`, is optional. It's a function to call once\n   * the capture is ready for use. The callback function should have one\n   * parameter, `stream`, that's a\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\" target=\"_blank\">MediaStream</a> object.\n   *\n   * Note: `createCapture()` only works when running a sketch locally or using HTTPS. Learn more\n   * <a href=\"http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https\" target=\"_blank\">here</a>\n   * and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" target=\"_blank\">here</a>.\n   *\n   * @param  {(AUDIO|VIDEO|Object)}  [type] type of capture, either AUDIO or VIDEO,\n   *                                   or a constraints object. Both video and audio\n   *                                   audio streams are captured by default.\n   * @param  {Object}                  [flipped] flip the capturing video and mirror the output with `{flipped:true}`. By\n   *                                   default it is false.\n   * @param  {Function}                [callback] function to call once the stream\n   *                                   has loaded.\n   * @return {p5.MediaElement} new <a href=\"#/p5.MediaElement\">p5.MediaElement</a> object.\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * function setup() {\n   *   noCanvas();\n   *\n   *   // Create the video capture.\n   *   createCapture(VIDEO);\n   *\n   *   describe('A video stream from the webcam.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the video capture and hide the element.\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   *\n   *   describe('A video stream from the webcam with inverted colors.');\n   * }\n   *\n   * function draw() {\n   *   // Draw the video capture within the canvas.\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *\n   *   // Invert the colors in the stream.\n   *   filter(INVERT);\n   * }\n   * </code>\n   * </div>\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create the video capture with mirrored output.\n   *   capture = createCapture(VIDEO,{ flipped:true });\n   *   capture.size(100,100);\n   *\n   *   describe('A video stream from the webcam with flipped or mirrored output.');\n   * }\n   *\n   * </code>\n   * </div>\n   *\n   * <div class='notest norender'>\n   * <code>\n   * function setup() {\n   *   createCanvas(480, 120);\n   *\n   *   // Create a constraints object.\n   *   let constraints = {\n   *     video: {\n   *       mandatory: {\n   *         minWidth: 1280,\n   *         minHeight: 720\n   *       },\n   *       optional: [{ maxFrameRate: 10 }]\n   *     },\n   *     audio: false\n   *   };\n   *\n   *   // Create the video capture.\n   *   createCapture(constraints);\n   *\n   *   describe('A video stream from the webcam.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createCapture = function (...args) {\n    // p5._validateParameters('createCapture', args);\n\n    // return if getUserMedia is not supported by the browser\n    if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\n      throw new DOMException('getUserMedia not supported in this browser');\n    }\n\n    let useVideo = true;\n    let useAudio = true;\n    let constraints;\n    let callback;\n    let flipped = false;\n\n    for (const arg of args) {\n      if (arg === fn.VIDEO) useAudio = false;\n      else if (arg === fn.AUDIO) useVideo = false;\n      else if (typeof arg === 'object') {\n        if (arg.flipped !== undefined) {\n          flipped = arg.flipped;\n          delete arg.flipped;\n        }\n        constraints = Object.assign({}, constraints, arg);\n      }\n      else if (typeof arg === 'function') {\n        callback = arg;\n      }\n    }\n\n    const videoConstraints = { video: useVideo, audio: useAudio };\n    constraints = Object.assign({}, videoConstraints, constraints);\n    const domElement = document.createElement('video');\n    // required to work in iOS 11 & up:\n    domElement.setAttribute('playsinline', '');\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      try {\n        if ('srcObject' in domElement) {\n          domElement.srcObject = stream;\n        } else {\n          domElement.src = window.URL.createObjectURL(stream);\n        }\n      }\n      catch (err) {\n        domElement.src = stream;\n      }\n    }).catch(e => {\n      if (e.name === 'NotFoundError')\n        p5._friendlyError('No webcam found on this device', 'createCapture');\n      if (e.name === 'NotAllowedError')\n        p5._friendlyError('Access to the camera was denied', 'createCapture');\n\n      console.error(e);\n    });\n\n    const videoEl = addElement(domElement, this, true);\n    videoEl.loadedmetadata = false;\n    // set width and height onload metadata\n    domElement.addEventListener('loadedmetadata', function () {\n      domElement.play();\n      if (domElement.width) {\n        videoEl.width = domElement.width;\n        videoEl.height = domElement.height;\n        if (flipped) {\n          videoEl.elt.style.transform = 'scaleX(-1)';\n        }\n      } else {\n        videoEl.width = videoEl.elt.width = domElement.videoWidth;\n        videoEl.height = videoEl.elt.height = domElement.videoHeight;\n      }\n      videoEl.loadedmetadata = true;\n\n      if (callback) callback(domElement.srcObject);\n    });\n    videoEl.flipped = flipped;\n    return videoEl;\n  };\n\n  // =============================================================================\n  //                         p5.MediaElement additions\n  // =============================================================================\n\n  /**\n   * A class to handle audio and video.\n   *\n   * `p5.MediaElement` extends <a href=\"#/p5.Element\">p5.Element</a> with\n   * methods to handle audio and video. `p5.MediaElement` objects are created by\n   * calling <a href=\"#/p5/createVideo\">createVideo</a>,\n   * <a href=\"#/p5/createAudio\">createAudio</a>, and\n   * <a href=\"#/p5/createCapture\">createCapture</a>.\n   *\n   * @class p5.MediaElement\n   * @param {String} elt DOM node that is wrapped\n   * @extends p5.Element\n   *\n   * @example\n   * <div class='notest'>\n   * <code>\n   * let capture;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createCapture().\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   *\n   *   describe('A webcam feed with inverted colors.');\n   * }\n   *\n   * function draw() {\n   *   // Display the video stream and invert the colors.\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *   filter(INVERT);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.MediaElement = MediaElement;\n\n  /**\n   * Path to the media element's source as a string.\n   *\n   * @for p5.MediaElement\n   * @property src\n   * @return {String} src\n   * @example\n   * <div>\n   * <code>\n   * let beat;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a p5.MediaElement using createAudio().\n   *   beat = createAudio('assets/beat.mp3');\n   *\n   *   describe('The text \"https://p5js.org/reference/assets/beat.mp3\" written in black on a gray background.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   textWrap(CHAR);\n   *   text(beat.src, 10, 10, 80, 80);\n   * }\n   * </code>\n   * </div>\n   */\n}\n\nif(typeof p5 !== 'undefined'){\n  media(p5, p5.prototype);\n}\n\nexport { MediaElement, media as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4467, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/dom/dom.js"],"sourcesContent":["import { Element } from './p5.Element.js';\nimport { MediaElement } from './p5.MediaElement.js';\nimport { File } from './p5.File.js';\nimport '../creating_reading-D4AAKRbx.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-C-g_eAdC.js';\nimport '../io/p5.XML.js';\n\n/**\n * The web is much more than just canvas and the DOM functionality makes it easy to interact\n * with other HTML5 objects, including text, hyperlink, image, input, video,\n * audio, and webcam.\n * There is a set of creation methods, DOM manipulation methods, and\n * an extended <a href=\"#/p5.Element\">p5.Element</a> that supports a range of HTML elements. See the\n * <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>\n * beyond the canvas tutorial</a> for a full overview of how this addon works.\n *\n * See <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>tutorial: beyond the canvas</a>\n * for more info on how to use this library.</a>\n *\n * @module DOM\n * @submodule DOM\n * @for p5\n * @requires p5\n */\n\n\nfunction dom(p5, fn){\n  /**\n   * Searches the page for the first element that matches the given\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics#different_types_of_selectors\" target=\"_blank\">CSS selector string</a>.\n   *\n   * The selector string can be an ID, class, tag name, or a combination.\n   * `select()` returns a <a href=\"#/p5.Element\">p5.Element</a> object if it\n   * finds a match and `null` if not.\n   *\n   * The second parameter, `container`, is optional. It specifies a container to\n   * search within. `container` can be CSS selector string, a\n   * <a href=\"#/p5.Element\">p5.Element</a> object, or an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> object.\n   *\n   * @method select\n   * @param  {String} selectors CSS selector string of element to search for.\n   * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> to search within.\n   * @return {p5.Element|null} <a href=\"#/p5.Element\">p5.Element</a> containing the element.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(200);\n   *\n   *   // Select the canvas by its tag.\n   *   let cnv = select('canvas');\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   // Add a class attribute to the canvas.\n   *   cnv.class('pinkborder');\n   *\n   *   background(200);\n   *\n   *   // Select the canvas by its class.\n   *   cnv = select('.pinkborder');\n   *\n   *   // Style its border.\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   let cnv = createCanvas(100, 100);\n   *\n   *   // Set the canvas' ID.\n   *   cnv.id('mycanvas');\n   *\n   *   background(200);\n   *\n   *   // Select the canvas by its ID.\n   *   cnv = select('#mycanvas');\n   *\n   *   // Style its border.\n   *   cnv.style('border', '5px deeppink dashed');\n   *\n   *   describe('A gray square with a dashed pink border.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.select = function (e, p) {\n    // p5._validateParameters('select', arguments);\n    const container = this._getContainer(p);\n    const res = container.querySelector(e);\n    if (res) {\n      return this._wrapElement(res);\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   * Searches the page for all elements that matches the given\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics#different_types_of_selectors\" target=\"_blank\">CSS selector string</a>.\n   *\n   * The selector string can be an ID, class, tag name, or a combination.\n   * `selectAll()` returns an array of <a href=\"#/p5.Element\">p5.Element</a>\n   * objects if it finds any matches and an empty array if none are found.\n   *\n   * The second parameter, `container`, is optional. It specifies a container to\n   * search within. `container` can be CSS selector string, a\n   * <a href=\"#/p5.Element\">p5.Element</a> object, or an\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> object.\n   *\n   * @method selectAll\n   * @param  {String} selectors CSS selector string of element to search for.\n   * @param  {String|p5.Element|HTMLElement} [container] CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\" target=\"_blank\">HTMLElement</a> to search within.\n   * @return {p5.Element[]} array of <a href=\"#/p5.Element\">p5.Element</a>s containing any elements found.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create three buttons.\n   *   createButton('1');\n   *   createButton('2');\n   *   createButton('3');\n   *\n   *   // Select the buttons by their tag.\n   *   let buttons = selectAll('button');\n   *\n   *   // Position the buttons.\n   *   for (let i = 0; i < 3; i += 1) {\n   *     buttons[i].position(0, i * 30);\n   *   }\n   *\n   *   describe('Three buttons stacked vertically. The buttons are labeled, \"1\", \"2\", and \"3\".');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   // Create three buttons and position them.\n   *   let b1 = createButton('1');\n   *   b1.position(0, 0);\n   *   let b2 = createButton('2');\n   *   b2.position(0, 30);\n   *   let b3 = createButton('3');\n   *   b3.position(0, 60);\n   *\n   *   // Add a class attribute to each button.\n   *   b1.class('btn');\n   *   b2.class('btn btn-pink');\n   *   b3.class('btn');\n   *\n   *   // Select the buttons by their class.\n   *   let buttons = selectAll('.btn');\n   *   let pinkButtons = selectAll('.btn-pink');\n   *\n   *   // Style the selected buttons.\n   *   buttons.forEach(setFont);\n   *   pinkButtons.forEach(setColor);\n   *\n   *   describe('Three buttons stacked vertically. The buttons are labeled, \"1\", \"2\", and \"3\". Buttons \"1\" and \"3\" are gray. Button \"2\" is pink.');\n   * }\n   *\n   * // Set a button's font to Comic Sans MS.\n   * function setFont(btn) {\n   *   btn.style('font-family', 'Comic Sans MS');\n   * }\n   *\n   * // Set a button's background and font color.\n   * function setColor(btn) {\n   *   btn.style('background', 'deeppink');\n   *   btn.style('color', 'white');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.selectAll = function (e, p) {\n    // p5._validateParameters('selectAll', arguments);\n    const arr = [];\n    const container = this._getContainer(p);\n    const res = container.querySelectorAll(e);\n    if (res) {\n      for (let j = 0; j < res.length; j++) {\n        const obj = this._wrapElement(res[j]);\n        arr.push(obj);\n      }\n    }\n    return arr;\n  };\n\n  /**\n   * Helper function for select and selectAll\n   */\n  fn._getContainer = function (p) {\n    let container = document;\n    if (typeof p === 'string') {\n      container = document.querySelector(p) || document;\n    } else if (p instanceof Element) {\n      container = p.elt;\n    } else if (p instanceof HTMLElement) {\n      container = p;\n    }\n    return container;\n  };\n\n  /**\n   * Helper function for getElement and getElements.\n   */\n  fn._wrapElement = function (elt) {\n    const children = Array.prototype.slice.call(elt.children);\n    if (elt.tagName === 'INPUT' && elt.type === 'checkbox') {\n      let converted = new Element(elt, this);\n      converted.checked = function (...args) {\n        if (args.length === 0) {\n          return this.elt.checked;\n        } else if (args[0]) {\n          this.elt.checked = true;\n        } else {\n          this.elt.checked = false;\n        }\n        return this;\n      };\n      return converted;\n    } else if (elt.tagName === 'VIDEO' || elt.tagName === 'AUDIO') {\n      return new MediaElement(elt, this);\n    } else if (elt.tagName === 'SELECT') {\n      return this.createSelect(new Element(elt, this));\n    } else if (\n      children.length > 0 &&\n      children.every(function (c) {\n        return c.tagName === 'INPUT' || c.tagName === 'LABEL';\n      }) &&\n      (elt.tagName === 'DIV' || elt.tagName === 'SPAN')\n    ) {\n      return this.createRadio(new Element(elt, this));\n    } else {\n      return new Element(elt, this);\n    }\n  };\n\n  /**\n   * Creates a new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * The first parameter, `tag`, is a string an HTML tag such as `'h5'`.\n   *\n   * The second parameter, `content`, is optional. It's a string that sets the\n   * HTML content to insert into the new element. New elements have no content\n   * by default.\n   *\n   * @method createElement\n   * @param  {String} tag tag for the new element.\n   * @param  {String} [content] HTML content to insert into the element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h5 element with nothing in it.\n   *   createElement('h5');\n   *\n   *   describe('A gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h5 element with the content \"p5*js\".\n   *   let h5 = createElement('h5', 'p5*js');\n   *\n   *   // Set the element's style and position.\n   *   h5.style('color', 'deeppink');\n   *   h5.position(30, 15);\n   *\n   *   describe('The text \"p5*js\" written in pink in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createElement = function (tag, content) {\n    // p5._validateParameters('createElement', arguments);\n    const elt = document.createElement(tag);\n    if (typeof content !== 'undefined') {\n      elt.innerHTML = content;\n    }\n    return addElement(elt, this);\n  };\n\n  /**\n   * Removes all elements created by p5.js, including any event handlers.\n   *\n   * There are two exceptions:\n   * canvas elements created by <a href=\"#/p5/createCanvas\">createCanvas()</a>\n   * and <a href=\"#/p5.Renderer\">p5.Render</a> objects created by\n   * <a href=\"#/p5/createGraphics\">createGraphics()</a>.\n   *\n   * @method removeElements\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and place\n   *   // it in the middle of the canvas.\n   *   let p = createP('p5*js');\n   *   p.position(25, 25);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center. The text disappears when the mouse is pressed.');\n   * }\n   *\n   * // Remove all elements when the mouse is pressed.\n   * function mousePressed() {\n   *   removeElements();\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a paragraph element and place\n   *   // it at the top of the canvas.\n   *   let p = createP('p5*js');\n   *   p.position(25, 25);\n   *\n   *   // Create a slider element and place it\n   *   // beneath the canvas.\n   *   slider = createSlider(0, 255, 200);\n   *   slider.position(0, 100);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center and a range slider beneath it. The square changes color when the slider is moved. The text and slider disappear when the square is double-clicked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider value to change the background color.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   *\n   * // Remove all elements when the mouse is double-clicked.\n   * function doubleClicked() {\n   *   removeElements();\n   * }\n   * </code>\n   * </div>\n   */\n  fn.removeElements = function (e) {\n    // p5._validateParameters('removeElements', arguments);\n    // el.remove splices from this._elements, so don't mix iteration with it\n    const isNotCanvasElement = el => !(el.elt instanceof HTMLCanvasElement);\n    const removeableElements = this._elements.filter(isNotCanvasElement);\n    removeableElements.map(el => el.remove());\n  };\n\n  /**\n   * Helpers for create methods.\n   */\n  function addElement(elt, pInst, media) {\n    const node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    const c = media\n      ? new MediaElement(elt, pInst)\n      : new Element(elt, pInst);\n    pInst._elements.push(c);\n    return c;\n  }\n\n  /**\n   * Creates a `&lt;div&gt;&lt;/div&gt;` element.\n   *\n   * `&lt;div&gt;&lt;/div&gt;` elements are commonly used as containers for\n   * other elements.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;div&gt;&lt;/div&gt;`.\n   *\n   * @method createDiv\n   * @param  {String} [html] inner HTML for the new `&lt;div&gt;&lt;/div&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a div element and set its position.\n   *   let div = createDiv('p5*js');\n   *   div.position(25, 35);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an h3 element within the div.\n   *   let div = createDiv('<h3>p5*js</h3>');\n   *   div.position(20, 5);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createDiv = function (html = '') {\n    let elt = document.createElement('div');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a paragraph element.\n   *\n   * `&lt;p&gt;&lt;/p&gt;` elements are commonly used for paragraph-length text.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;p&gt;&lt;/p&gt;`.\n   *\n   * @method createP\n   * @param  {String} [html] inner HTML for the new `&lt;p&gt;&lt;/p&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a paragraph element and set its position.\n   *   let p = createP('Tell me a story.');\n   *   p.position(5, 0);\n   *\n   *   describe('A gray square displaying the text \"Tell me a story.\" written in black.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createP = function (html = '') {\n    let elt = document.createElement('p');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a `&lt;span&gt;&lt;/span&gt;` element.\n   *\n   * `&lt;span&gt;&lt;/span&gt;` elements are commonly used as containers\n   * for inline elements. For example, a `&lt;span&gt;&lt;/span&gt;`\n   * can hold part of a sentence that's a\n   * <span style=\"color: deeppink;\">different</span> style.\n   *\n   * The parameter `html` is optional. It accepts a string that sets the\n   * inner HTML of the new `&lt;span&gt;&lt;/span&gt;`.\n   *\n   * @method createSpan\n   * @param  {String} [html] inner HTML for the new `&lt;span&gt;&lt;/span&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a span element and set its position.\n   *   let span = createSpan('p5*js');\n   *   span.position(25, 35);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in its center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Create a div element as a container.\n   *   let div = createDiv();\n   *\n   *   // Place the div at the center.\n   *   div.position(25, 35);\n   *\n   *   // Create a span element.\n   *   let s1 = createSpan('p5');\n   *\n   *   // Create a second span element.\n   *   let s2 = createSpan('*');\n   *\n   *   // Set the second span's font color.\n   *   s2.style('color', 'deeppink');\n   *\n   *   // Create a third span element.\n   *   let s3 = createSpan('js');\n   *\n   *   // Add all the spans to the container div.\n   *   s1.parent(div);\n   *   s2.parent(div);\n   *   s3.parent(div);\n   *\n   *   describe('A gray square with the text \"p5*js\" written in black at its center. The asterisk is pink.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createSpan = function (html = '') {\n    let elt = document.createElement('span');\n    elt.innerHTML = html;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates an `&lt;img&gt;` element that can appear outside of the canvas.\n   *\n   * The first parameter, `src`, is a string with the path to the image file.\n   * `src` should be a relative path, as in `'assets/image.png'`, or a URL, as\n   * in `'https://example.com/image.png'`.\n   *\n   * The second parameter, `alt`, is a string with the\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt#usage_notes\" target=\"_blank\">alternate text</a>\n   * for the image. An empty string `''` can be used for images that aren't displayed.\n   *\n   * The third parameter, `crossOrigin`, is optional. It's a string that sets the\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\" target=\"_blank\">crossOrigin property</a>\n   * of the image. Use `'anonymous'` or `'use-credentials'` to fetch the image\n   * with cross-origin access.\n   *\n   * The fourth parameter, `callback`, is also optional. It sets a function to\n   * call after the image loads. The new image is passed to the callback\n   * function as a <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @method createImg\n   * @param  {String} src relative path or URL for the image.\n   * @param  {String} alt alternate text for the image.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   let img = createImg(\n   *     'https://p5js.org/assets/img/asterisk-01.png',\n   *     'The p5.js magenta asterisk.'\n   *   );\n   *   img.position(0, -10);\n   *\n   *   describe('A gray square with a magenta asterisk in its center.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createImg\n   * @param  {String} src\n   * @param  {String} alt\n   * @param  {String} [crossOrigin] crossOrigin property to use when fetching the image.\n   * @param  {Function} [successCallback] function to call once the image loads. The new image will be passed\n   *                                      to the function as a <a href=\"#/p5.Element\">p5.Element</a> object.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  fn.createImg = function () {\n    // p5._validateParameters('createImg', arguments);\n    const elt = document.createElement('img');\n    const args = arguments;\n    let self;\n    if (args.length > 1 && typeof args[1] === 'string') {\n      elt.alt = args[1];\n    }\n    if (args.length > 2 && typeof args[2] === 'string') {\n      elt.crossOrigin = args[2];\n    }\n    elt.src = args[0];\n    self = addElement(elt, this);\n    elt.addEventListener('load', function () {\n      self.width = elt.offsetWidth || elt.width;\n      self.height = elt.offsetHeight || elt.height;\n      const last = args[args.length - 1];\n      if (typeof last === 'function') last(self);\n    });\n    return self;\n  };\n\n  /**\n   * Creates an `&lt;a&gt;&lt;/a&gt;` element that links to another web page.\n   *\n   * The first parmeter, `href`, is a string that sets the URL of the linked\n   * page.\n   *\n   * The second parameter, `html`, is a string that sets the inner HTML of the\n   * link. It's common to use text, images, or buttons as links.\n   *\n   * The third parameter, `target`, is optional. It's a string that tells the\n   * web browser where to open the link. By default, links open in the current\n   * browser tab. Passing `'_blank'` will cause the link to open in a new\n   * browser tab. MDN describes a few\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target\" target=\"_blank\">other options</a>.\n   *\n   * @method createA\n   * @param  {String} href       URL of linked page.\n   * @param  {String} html       inner HTML of link element to display.\n   * @param  {String} [target]   target where the new link should open,\n   *                             either `'_blank'`, `'_self'`, `'_parent'`, or `'_top'`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an anchor element that links to p5js.org.\n   *   let a = createA('https://p5js.org/', 'p5*js');\n   *   a.position(25, 35);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   background(200);\n   *\n   *   // Create an anchor tag that links to p5js.org.\n   *   // Open the link in a new tab.\n   *   let a = createA('https://p5js.org/', 'p5*js', '_blank');\n   *   a.position(25, 35);\n   *\n   *   describe('The text \"p5*js\" written at the center of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createA = function (href, html, target) {\n    // p5._validateParameters('createA', arguments);\n    const elt = document.createElement('a');\n    elt.href = href;\n    elt.innerHTML = html;\n    if (target) elt.target = target;\n    return addElement(elt, this);\n  };\n\n  /* INPUT */\n  /**\n   * Creates a slider `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Range sliders are useful for quickly selecting numbers from a given range.\n   *\n   * The first two parameters, `min` and `max`, are numbers that set the\n   * slider's minimum and maximum.\n   *\n   * The third parameter, `value`, is optional. It's a number that sets the\n   * slider's default value.\n   *\n   * The fourth parameter, `step`, is also optional. It's a number that sets the\n   * spacing between each value in the slider's range. Setting `step` to 0\n   * allows the slider to move smoothly from `min` to `max`.\n   *\n   * @method createSlider\n   * @param  {Number} min minimum value of the slider.\n   * @param  {Number} max maximum value of the slider.\n   * @param  {Number} [value] default value of the slider.\n   * @param  {Number} [step] size for each step in the slider's range.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   slider = createSlider(0, 255);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A dark gray square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   slider = createSlider(0, 255, 0);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   // Set its step size to 50.\n   *   slider = createSlider(0, 255, 0, 50);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let slider;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a slider and place it at the top of the canvas.\n   *   // Set its default value to 0.\n   *   // Set its step size to 0 so that it moves smoothly.\n   *   slider = createSlider(0, 255, 0, 0);\n   *   slider.position(10, 10);\n   *   slider.size(80);\n   *\n   *   describe('A black square with a range slider at the top. The square changes color when the slider is moved.');\n   * }\n   *\n   * function draw() {\n   *   // Use the slider as a grayscale value.\n   *   let g = slider.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createSlider = function (min, max, value, step) {\n    // p5._validateParameters('createSlider', arguments);\n    const elt = document.createElement('input');\n    elt.type = 'range';\n    elt.min = min;\n    elt.max = max;\n    if (step === 0) {\n      elt.step = 0.000000000000000001; // smallest valid step\n    } else if (step) {\n      elt.step = step;\n    }\n    if (typeof value === 'number') elt.value = value;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a `&lt;button&gt;&lt;/button&gt;` element.\n   *\n   * The first parameter, `label`, is a string that sets the label displayed on\n   * the button.\n   *\n   * The second parameter, `value`, is optional. It's a string that sets the\n   * button's value. See\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#value\" target=\"_blank\">MDN</a>\n   * for more details.\n   *\n   * @method createButton\n   * @param  {String} label label displayed on the button.\n   * @param  {String} [value] value of the button.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button and place it beneath the canvas.\n   *   let button = createButton('click me');\n   *   button.position(0, 100);\n   *\n   *   // Call repaint() when the button is pressed.\n   *   button.mousePressed(repaint);\n   *\n   *   describe('A gray square with a button that says \"click me\" beneath it. The square changes color when the button is clicked.');\n   * }\n   *\n   * // Change the background color.\n   * function repaint() {\n   *   let g = random(255);\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let button;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a button and set its value to 0.\n   *   // Place the button beneath the canvas.\n   *   button = createButton('click me', 'red');\n   *   button.position(0, 100);\n   *\n   *   // Call randomColor() when the button is pressed.\n   *   button.mousePressed(randomColor);\n   *\n   *   describe('A red square with a button that says \"click me\" beneath it. The square changes color when the button is clicked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the button's value to set the background color.\n   *   let c = button.value();\n   *   background(c);\n   * }\n   *\n   * // Set the button's value to a random color.\n   * function randomColor() {\n   *   let c = random(['red', 'green', 'blue', 'yellow']);\n   *   button.value(c);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createButton = function (label, value) {\n    // p5._validateParameters('createButton', arguments);\n    const elt = document.createElement('button');\n    elt.innerHTML = label;\n    if (value) elt.value = value;\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates a checkbox `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Checkboxes extend the <a href=\"#/p5.Element\">p5.Element</a> class with a\n   * `checked()` method. Calling `myBox.checked()` returns `true` if it the box\n   * is checked and `false` if not.\n   *\n   * The first parameter, `label`, is optional. It's a string that sets the label\n   * to display next to the checkbox.\n   *\n   * The second parameter, `value`, is also optional. It's a boolean that sets the\n   * checkbox's value.\n   *\n   * @method createCheckbox\n   * @param  {String} [label] label displayed after the checkbox.\n   * @param  {Boolean} [value] value of the checkbox. Checked is `true` and unchecked is `false`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   checkbox = createCheckbox();\n   *   checkbox.position(0, 100);\n   *\n   *   describe('A black square with a checkbox beneath it. The square turns white when the box is checked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   // Label the checkbox \"white\".\n   *   checkbox = createCheckbox(' white');\n   *   checkbox.position(0, 100);\n   *\n   *   describe('A black square with a checkbox labeled \"white\" beneath it. The square turns white when the box is checked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let checkbox;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a checkbox and place it beneath the canvas.\n   *   // Label the checkbox \"white\" and set its value to true.\n   *   checkbox = createCheckbox(' white', true);\n   *   checkbox.position(0, 100);\n   *\n   *   describe('A white square with a checkbox labeled \"white\" beneath it. The square turns black when the box is unchecked.');\n   * }\n   *\n   * function draw() {\n   *   // Use the checkbox to set the background color.\n   *   if (checkbox.checked()) {\n   *     background(255);\n   *   } else {\n   *     background(0);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createCheckbox = function (...args) {\n    // p5._validateParameters('createCheckbox', args);\n\n    // Create a container element\n    const elt = document.createElement('div');\n\n    // Create checkbox type input element\n    const checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n\n    // Create label element and wrap it around checkbox\n    const label = document.createElement('label');\n    label.appendChild(checkbox);\n\n    // Append label element inside the container\n    elt.appendChild(label);\n\n    //checkbox must be wrapped in p5.Element before label so that label appears after\n    const self = addElement(elt, this);\n\n    self.checked = function (...args) {\n      const cb = self.elt.firstElementChild.getElementsByTagName('input')[0];\n      if (cb) {\n        if (args.length === 0) {\n          return cb.checked;\n        } else if (args[0]) {\n          cb.checked = true;\n        } else {\n          cb.checked = false;\n        }\n      }\n      return self;\n    };\n\n    this.value = function (val) {\n      self.value = val;\n      return this;\n    };\n\n    // Set the span element innerHTML as the label value if passed\n    if (args[0]) {\n      self.value(args[0]);\n      const span = document.createElement('span');\n      span.innerHTML = args[0];\n      label.appendChild(span);\n    }\n\n    // Set the checked value of checkbox if passed\n    if (args[1]) {\n      checkbox.checked = true;\n    }\n\n    return self;\n  };\n\n  /**\n   * Creates a dropdown menu `&lt;select&gt;&lt;/select&gt;` element.\n   *\n   * The parameter is optional. If `true` is passed, as in\n   * `let mySelect = createSelect(true)`, then the dropdown will support\n   * multiple selections. If an existing `&lt;select&gt;&lt;/select&gt;` element\n   * is passed, as in `let mySelect = createSelect(otherSelect)`, the existing\n   * element will be wrapped in a new <a href=\"#/p5.Element\">p5.Element</a>\n   * object.\n   *\n   * Dropdowns extend the <a href=\"#/p5.Element\">p5.Element</a> class with a few\n   * helpful methods for managing options:\n   * - `mySelect.option(name, [value])` adds an option to the menu. The first paremeter, `name`, is a string that sets the option's name and value. The second parameter, `value`, is optional. If provided, it sets the value that corresponds to the key `name`. If an option with `name` already exists, its value is changed to `value`.\n   * - `mySelect.value()` returns the currently-selected option's value.\n   * - `mySelect.selected()` returns the currently-selected option.\n   * - `mySelect.selected(option)` selects the given option by default.\n   * - `mySelect.disable()` marks the whole dropdown element as disabled.\n   * - `mySelect.disable(option)` marks a given option as disabled.\n   * - `mySelect.enable()` marks the whole dropdown element as enabled.\n   * - `mySelect.enable(option)` marks a given option as enabled.\n   *\n   * @method createSelect\n   * @param {Boolean} [multiple] support multiple selections.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   // Set the selected option to \"red\".\n   *   mySelect.selected('red');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   // Set the selected option to \"red\".\n   *   mySelect.selected('red');\n   *\n   *   // Disable the \"yellow\" option.\n   *   mySelect.disable('yellow');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and place it beneath the canvas.\n   *   mySelect = createSelect();\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options with names and values.\n   *   mySelect.option('one', 'red');\n   *   mySelect.option('two', 'green');\n   *   mySelect.option('three', 'blue');\n   *   mySelect.option('four', 'yellow');\n   *\n   *   // Set the selected option to \"one\".\n   *   mySelect.selected('one');\n   *\n   *   describe('A red square with a dropdown menu beneath it. The square changes color when a new color is selected.');\n   * }\n   *\n   * function draw() {\n   *   // Use the selected value to paint the background.\n   *   let c = mySelect.selected();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Hold CTRL to select multiple options on Windows and Linux.\n   * // Hold CMD to select multiple options on macOS.\n   * let mySelect;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a dropdown and allow multiple selections.\n   *   // Place it beneath the canvas.\n   *   mySelect = createSelect(true);\n   *   mySelect.position(0, 100);\n   *\n   *   // Add color options.\n   *   mySelect.option('red');\n   *   mySelect.option('green');\n   *   mySelect.option('blue');\n   *   mySelect.option('yellow');\n   *\n   *   describe('A gray square with a dropdown menu beneath it. Colorful circles appear when their color is selected.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the selected value(s) to draw circles.\n   *   let colors = mySelect.selected();\n   *   for (let i = 0; i < colors.length; i += 1) {\n   *     // Calculate the x-coordinate.\n   *     let x = 10 + i * 20;\n   *\n   *     // Access the color.\n   *     let c = colors[i];\n   *\n   *     // Draw the circle.\n   *     fill(c);\n   *     circle(x, 50, 20);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createSelect\n   * @param {Object} existing select element to wrap, either as a <a href=\"#/p5.Element\">p5.Element</a> or\n   *                          a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement\" target=\"_blank\">HTMLSelectElement</a>.\n   * @return {p5.Element}\n   */\n\n  fn.createSelect = function (...args) {\n    // p5._validateParameters('createSelect', args);\n    let self;\n    let arg = args[0];\n    if (arg instanceof Element && arg.elt instanceof HTMLSelectElement) {\n      // If given argument is p5.Element of select type\n      self = arg;\n      this.elt = arg.elt;\n    } else if (arg instanceof HTMLSelectElement) {\n      self = addElement(arg, this);\n      this.elt = arg;\n    } else {\n      const elt = document.createElement('select');\n      if (arg && typeof arg === 'boolean') {\n        elt.setAttribute('multiple', 'true');\n      }\n      self = addElement(elt, this);\n      this.elt = elt;\n    }\n    self.option = function (name, value) {\n      let index;\n\n      // if no name is passed, return\n      if (name === undefined) {\n        return;\n      }\n      //see if there is already an option with this name\n      for (let i = 0; i < this.elt.length; i += 1) {\n        if (this.elt[i].textContent === name) {\n          index = i;\n          break;\n        }\n      }\n      //if there is an option with this name we will modify it\n      if (index !== undefined) {\n        //if the user passed in false then delete that option\n        if (value === false) {\n          this.elt.remove(index);\n        } else {\n          // Update the option at index with the value\n          this.elt[index].value = value;\n        }\n      } else {\n        //if it doesn't exist create it\n        const opt = document.createElement('option');\n        opt.textContent = name;\n        opt.value = value === undefined ? name : value;\n        this.elt.appendChild(opt);\n        this._pInst._elements.push(opt);\n      }\n    };\n\n    self.selected = function (value) {\n      // Update selected status of option\n      if (value !== undefined) {\n        for (let i = 0; i < this.elt.length; i += 1) {\n          if (this.elt[i].value.toString() === value.toString()) {\n            this.elt.selectedIndex = i;\n          }\n        }\n        return this;\n      } else {\n        if (this.elt.getAttribute('multiple')) {\n          let arr = [];\n          for (const selectedOption of this.elt.selectedOptions) {\n            arr.push(selectedOption.value);\n          }\n          return arr;\n        } else {\n          return this.elt.value;\n        }\n      }\n    };\n\n    self.disable = function (value) {\n      if (typeof value === 'string') {\n        for (let i = 0; i < this.elt.length; i++) {\n          if (this.elt[i].value.toString() === value) {\n            this.elt[i].disabled = true;\n            this.elt[i].selected = false;\n          }\n        }\n      } else {\n        this.elt.disabled = true;\n      }\n      return this;\n    };\n\n    self.enable = function (value) {\n      if (typeof value === 'string') {\n        for (let i = 0; i < this.elt.length; i++) {\n          if (this.elt[i].value.toString() === value) {\n            this.elt[i].disabled = false;\n            this.elt[i].selected = false;\n          }\n        }\n      } else {\n        this.elt.disabled = false;\n        for (let i = 0; i < this.elt.length; i++) {\n          this.elt[i].disabled = false;\n          this.elt[i].selected = false;\n        }\n      }\n      return this;\n    };\n\n    return self;\n  };\n\n  /**\n   * Creates a radio button element.\n   *\n   * The parameter is optional. If a string is passed, as in\n   * `let myRadio = createSelect('food')`, then each radio option will\n   * have `\"food\"` as its `name` parameter: `&lt;input name=\"food\"&gt;&lt;/input&gt;`.\n   * If an existing `&lt;div&gt;&lt;/div&gt;` or `&lt;span&gt;&lt;/span&gt;`\n   * element is passed, as in `let myRadio = createSelect(container)`, it will\n   * become the radio button's parent element.\n   *\n   * Radio buttons extend the <a href=\"#/p5.Element\">p5.Element</a> class with a few\n   * helpful methods for managing options:\n   * - `myRadio.option(value, [label])` adds an option to the menu. The first paremeter, `value`, is a string that sets the option's value and label. The second parameter, `label`, is optional. If provided, it sets the label displayed for the `value`. If an option with `value` already exists, its label is changed and its value is returned.\n   * - `myRadio.value()` returns the currently-selected option's value.\n   * - `myRadio.selected()` returns the currently-selected option.\n   * - `myRadio.selected(value)` selects the given option and returns it as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\" target=\"_blank\">`HTMLInputElement`</a>.\n   * - `myRadio.disable(shouldDisable)` enables the entire radio button if `true` is passed and disables it if `false` is passed.\n   *\n   * @method createRadio\n   * @param  {Object} [containerElement] container HTML Element, either a `&lt;div&gt;&lt;/div&gt;`\n   * or `&lt;span&gt;&lt;/span&gt;`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let style = document.createElement('style');\n   * style.innerHTML = `\n   * .p5-radio label {\n   *    display: flex;\n   *    align-items: center;\n   *  }\n   *  .p5-radio input {\n   *    margin-right: 5px;\n   *  }\n   *  `;\n   * document.head.appendChild(style);\n   *\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.class('p5-radio');\n   *   myRadio.size(60);\n   *\n   *   // Add a few color options.\n   *   myRadio.option('red');\n   *   myRadio.option('yellow');\n   *   myRadio.option('blue');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   describe('A yellow square with three color options listed, \"red\", \"yellow\", and \"blue\". The square changes color when the user selects a new option.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let g = myRadio.value();\n   *   background(g);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.size(50);\n   *\n   *   // Add a few color options.\n   *   // Color values are labeled with\n   *   // emotions they evoke.\n   *   myRadio.option('red', 'love');\n   *   myRadio.option('yellow', 'joy');\n   *   myRadio.option('blue', 'trust');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   describe('A yellow square with three options listed, \"love\", \"joy\", and \"trust\". The square changes color when the user selects a new option.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let c = myRadio.value();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myRadio;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a radio button element and place it\n   *   // in the top-left corner.\n   *   myRadio = createRadio();\n   *   myRadio.position(0, 0);\n   *   myRadio.size(50);\n   *\n   *   // Add a few color options.\n   *   myRadio.option('red');\n   *   myRadio.option('yellow');\n   *   myRadio.option('blue');\n   *\n   *   // Choose a default option.\n   *   myRadio.selected('yellow');\n   *\n   *   // Create a button and place it beneath the canvas.\n   *   let btn = createButton('disable');\n   *   btn.position(0, 100);\n   *\n   *   // Call disableRadio() when btn is pressed.\n   *   btn.mousePressed(disableRadio);\n   *\n   *   describe('A yellow square with three options listed, \"red\", \"yellow\", and \"blue\". The square changes color when the user selects a new option. A \"disable\" button beneath the canvas disables the color options when pressed.');\n   * }\n   *\n   * function draw() {\n   *   // Set the background color using the radio button.\n   *   let c = myRadio.value();\n   *   background(c);\n   * }\n   *\n   * // Disable myRadio.\n   * function disableRadio() {\n   *   myRadio.disable(true);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createRadio\n   * @param {String} [name] name parameter assigned to each option's `&lt;input&gt;&lt;/input&gt;` element.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  /**\n   * @method createRadio\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   */\n  //counter for unique names on radio button\n  let counter = 0;\n  fn.createRadio = function (...args) {\n    // Creates a div, adds each option as an individual input inside it.\n    // If already given with a containerEl, will search for all input[radio]\n    // it, create a p5.Element out of it, add options to it and return the p5.Element.\n\n    let self;\n    let radioElement;\n    let name;\n    const arg0 = args[0];\n    if (\n      arg0 instanceof Element &&\n      (arg0.elt instanceof HTMLDivElement || arg0.elt instanceof HTMLSpanElement)\n    ) {\n      // If given argument is p5.Element of div/span type\n      self = arg0;\n      this.elt = arg0.elt;\n    } else if (\n      // If existing radio Element is provided as argument 0\n      arg0 instanceof HTMLDivElement ||\n      arg0 instanceof HTMLSpanElement\n    ) {\n      self = addElement(arg0, this);\n      this.elt = arg0;\n      radioElement = arg0;\n      if (typeof args[1] === 'string') name = args[1];\n    } else {\n      if (typeof arg0 === 'string') name = arg0;\n      radioElement = document.createElement('div');\n      self = addElement(radioElement, this);\n      this.elt = radioElement;\n    }\n    self._name = name || `radioOption_${counter++}`;\n\n    // setup member functions\n    const isRadioInput = el =>\n      el instanceof HTMLInputElement && el.type === 'radio';\n    const isLabelElement = el => el instanceof HTMLLabelElement;\n    const isSpanElement = el => el instanceof HTMLSpanElement;\n\n    self._getOptionsArray = function () {\n      return Array.from(this.elt.children)\n        .filter(\n          el =>\n            isRadioInput(el) ||\n            (isLabelElement(el) && isRadioInput(el.firstElementChild))\n        )\n        .map(el => (isRadioInput(el) ? el : el.firstElementChild));\n    };\n\n    self.option = function (value, label) {\n      // return an option with this value, create if not exists.\n      let optionEl;\n      for (const option of self._getOptionsArray()) {\n        if (option.value === value) {\n          optionEl = option;\n          break;\n        }\n      }\n\n      // Create a new option, add it to radioElement and return it.\n      if (optionEl === undefined) {\n        optionEl = document.createElement('input');\n        optionEl.setAttribute('type', 'radio');\n        optionEl.setAttribute('value', value);\n      }\n      optionEl.setAttribute('name', self._name);\n\n      // Check if label element exists, else create it\n      let labelElement;\n      if (!isLabelElement(optionEl.parentElement)) {\n        labelElement = document.createElement('label');\n        labelElement.insertAdjacentElement('afterbegin', optionEl);\n      } else {\n        labelElement = optionEl.parentElement;\n      }\n\n      // Check if span element exists, else create it\n      let spanElement;\n      if (!isSpanElement(labelElement.lastElementChild)) {\n        spanElement = document.createElement('span');\n        optionEl.insertAdjacentElement('afterend', spanElement);\n      } else {\n        spanElement = labelElement.lastElementChild;\n      }\n\n      // Set the innerHTML of span element as the label text\n      spanElement.innerHTML = label === undefined ? value : label;\n\n      // Append the label element, which includes option element and\n      // span element to the radio container element\n      this.elt.appendChild(labelElement);\n\n      return optionEl;\n    };\n\n    self.remove = function (value) {\n      for (const optionEl of self._getOptionsArray()) {\n        if (optionEl.value === value) {\n          if (isLabelElement(optionEl.parentElement)) {\n            // Remove parent label which also removes children elements\n            optionEl.parentElement.remove();\n          } else {\n            // Remove the option input if parent label does not exist\n            optionEl.remove();\n          }\n          return;\n        }\n      }\n    };\n\n    self.value = function () {\n      let result = '';\n      for (const option of self._getOptionsArray()) {\n        if (option.checked) {\n          result = option.value;\n          break;\n        }\n      }\n      return result;\n    };\n\n    self.selected = function (value) {\n      let result = null;\n      if (value === undefined) {\n        for (const option of self._getOptionsArray()) {\n          if (option.checked) {\n            result = option;\n            break;\n          }\n        }\n      } else {\n        // forEach loop to uncheck all radio buttons before\n        // setting any one as checked.\n        self._getOptionsArray().forEach(option => {\n          option.checked = false;\n          option.removeAttribute('checked');\n        });\n\n        for (const option of self._getOptionsArray()) {\n          if (option.value === value) {\n            option.setAttribute('checked', true);\n            option.checked = true;\n            result = option;\n          }\n        }\n      }\n      return result;\n    };\n\n    self.disable = function (shouldDisable = true) {\n      for (const radioInput of self._getOptionsArray()) {\n        radioInput.setAttribute('disabled', shouldDisable);\n      }\n    };\n\n    return self;\n  };\n\n  /**\n   * Creates a color picker element.\n   *\n   * The parameter, `value`, is optional. If a color string or\n   * <a href=\"#/p5.Color\">p5.Color</a> object is passed, it will set the default\n   * color.\n   *\n   * Color pickers extend the <a href=\"#/p5.Element\">p5.Element</a> class with a\n   * couple of helpful methods for managing colors:\n   * - `myPicker.value()` returns the current color as a hex string in the format `'#rrggbb'`.\n   * - `myPicker.color()` returns the current color as a <a href=\"#/p5.Color\">p5.Color</a> object.\n   *\n   * @method createColorPicker\n   * @param {String|p5.Color} [value] default color as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color\" target=\"_blank\">CSS color string</a>.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myPicker;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a color picker and set its position.\n   *   myPicker = createColorPicker('deeppink');\n   *   myPicker.position(0, 100);\n   *\n   *   describe('A pink square with a color picker beneath it. The square changes color when the user picks a new color.');\n   * }\n   *\n   * function draw() {\n   *   // Use the color picker to paint the background.\n   *   let c = myPicker.color();\n   *   background(c);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myPicker;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a color picker and set its position.\n   *   myPicker = createColorPicker('deeppink');\n   *   myPicker.position(0, 100);\n   *\n   *   describe('A number with the format \"#rrggbb\" is displayed on a pink canvas. The background color and number change when the user picks a new color.');\n   * }\n   *\n   * function draw() {\n   *   // Use the color picker to paint the background.\n   *   let c = myPicker.value();\n   *   background(c);\n   *\n   *   // Display the current color as a hex string.\n   *   text(c, 25, 55);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createColorPicker = function (value) {\n    // p5._validateParameters('createColorPicker', arguments);\n    // TODO: This implementation needs to be rechecked or reimplemented\n    // The way it worked with color is a bit too complex\n    const elt = document.createElement('input');\n    let self;\n    elt.type = 'color';\n    if (value) {\n      if (value instanceof p5.Color) {\n        elt.value = value.toString('#rrggbb');\n      } else {\n        this.push();\n        this.colorMode('rgb');\n        elt.value = this.color(value).toString('#rrggbb');\n        this.pop();\n      }\n    } else {\n      elt.value = '#000000';\n    }\n    self = addElement(elt, this);\n    // Method to return a p5.Color object for the given color.\n    const inst = this;\n    self.color = function () {\n      inst.push();\n      if (value) {\n        if (value.mode) {\n          inst.colorMode(value.mode, ...(value?.maxes ? value.maxes[value.mode] || [] : []));\n        }\n      }\n      const c = inst.color(this.elt.value);\n      inst.pop();\n      return c;\n    };\n    return self;\n  };\n\n  /**\n   * Creates a text `&lt;input&gt;&lt;/input&gt;` element.\n   *\n   * Call `myInput.size()` to set the length of the text box.\n   *\n   * The first parameter, `value`, is optional. It's a string that sets the\n   * input's default value. The input is blank by default.\n   *\n   * The second parameter, `type`, is also optional. It's a string that\n   * specifies the type of text being input. See MDN for a full\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input\" target=\"_blank\">list of options</a>.\n   * The default is `'text'`.\n   *\n   * @method createInput\n   * @param {String} [value] default value of the input box. Defaults to an empty string `''`.\n   * @param {String} [type] type of input. Defaults to `'text'`.\n   * @return {p5.Element} new <a href=\"#/p5.Element\">p5.Element</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * let myInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an input element and place it\n   *   // beneath the canvas.\n   *   myInput = createInput();\n   *   myInput.position(0, 100);\n   *\n   *   describe('A gray square with a text box beneath it. The text in the square changes when the user types something new in the input bar.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input to display a message.\n   *   let msg = myInput.value();\n   *   text(msg, 25, 55);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let myInput;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create an input element and place it\n   *   // beneath the canvas. Set its default\n   *   // text to \"hello!\".\n   *   myInput = createInput('hello!');\n   *   myInput.position(0, 100);\n   *\n   *   describe('The text \"hello!\" written at the center of a gray square. A text box beneath the square also says \"hello!\". The text in the square changes when the user types something new in the input bar.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Use the input to display a message.\n   *   let msg = myInput.value();\n   *   text(msg, 25, 55);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method createInput\n   * @param {String} [value]\n   * @return {p5.Element}\n   */\n  fn.createInput = function (value = '', type = 'text') {\n    // p5._validateParameters('createInput', arguments);\n    let elt = document.createElement('input');\n    elt.setAttribute('value', value);\n    elt.setAttribute('type', type);\n    return addElement(elt, this);\n  };\n\n  /**\n   * Creates an `&lt;input&gt;&lt;/input&gt;` element of type `'file'`.\n   *\n   * `createFileInput()` allows users to select local files for use in a sketch.\n   * It returns a <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * The first parameter, `callback`, is a function that's called when the file\n   * loads. The callback function should have one parameter, `file`, that's a\n   * <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * The second parameter, `multiple`, is optional. It's a boolean value that\n   * allows loading multiple files if set to `true`. If `true`, `callback`\n   * will be called once per file.\n   *\n   * @method createFileInput\n   * @param  {Function} callback function to call once the file loads.\n   * @param  {Boolean} [multiple] allow multiple files to be selected.\n   * @return {p5.File} new <a href=\"#/p5.File\">p5.File</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * // Use the file input to select an image to\n   * // load and display.\n   * let input;\n   * let img;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create a file input and place it beneath\n   *   // the canvas.\n   *   input = createFileInput(handleImage);\n   *   input.position(0, 100);\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects an image file to load, it is displayed on the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the image if loaded.\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * // Create an image if the file is an image.\n   * function handleImage(file) {\n   *   if (file.type === 'image') {\n   *     img = createImg(file.data, '');\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * // Use the file input to select multiple images\n   * // to load and display.\n   * let input;\n   * let images = [];\n   *\n   * function setup() {\n   *   // Create a file input and place it beneath\n   *   // the canvas. Allow it to load multiple files.\n   *   input = createFileInput(handleImage, true);\n   *   input.position(0, 100);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the images if loaded. Each image\n   *   // is drawn 20 pixels lower than the\n   *   // previous image.\n   *   for (let i = 0; i < images.length; i += 1) {\n   *     // Calculate the y-coordinate.\n   *     let y = i * 20;\n   *\n   *     // Draw the image.\n   *     image(img, 0, y, 100, 100);\n   *   }\n   *\n   *   describe('A gray square with a file input beneath it. If the user selects multiple image files to load, they are displayed on the square.');\n   * }\n   *\n   * // Create an image if the file is an image,\n   * // then add it to the images array.\n   * function handleImage(file) {\n   *   if (file.type === 'image') {\n   *     let img = createImg(file.data, '');\n   *     img.hide();\n   *     images.push(img);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createFileInput = function (callback, multiple = false) {\n    // p5._validateParameters('createFileInput', arguments);\n\n    const handleFileSelect = function (event) {\n      for (const file of event.target.files) {\n        File._load(file, callback);\n      }\n    };\n\n    // If File API's are not supported, throw Error\n    if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n      console.log(\n        'The File APIs are not fully supported in this browser. Cannot create element.'\n      );\n      return;\n    }\n\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    if (multiple) fileInput.setAttribute('multiple', true);\n    fileInput.addEventListener('change', handleFileSelect, false);\n    return addElement(fileInput, this);\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  dom(p5, p5.prototype);\n}\n\nexport { dom as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6364, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/dom/index.js"],"sourcesContent":["import dom$1 from './dom.js';\nimport element from './p5.Element.js';\nimport media from './p5.MediaElement.js';\nimport file from './p5.File.js';\nimport '../creating_reading-D4AAKRbx.js';\nimport 'colorjs.io/fn';\nimport '../color/color_spaces/hsb.js';\nimport '../constants-C-g_eAdC.js';\nimport '../io/p5.XML.js';\n\nfunction dom(p5){\n  p5.registerAddon(dom$1);\n  p5.registerAddon(element);\n  p5.registerAddon(media);\n  p5.registerAddon(file);\n}\n\nexport { dom as default };\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;AAEA,SAAS,IAAI,EAAE;IACb,GAAG,aAAa,CAAC,2IAAA,CAAA,UAAK;IACtB,GAAG,aAAa,CAAC,qJAAA,CAAA,UAAO;IACxB,GAAG,aAAa,CAAC,0JAAA,CAAA,UAAK;IACtB,GAAG,aAAa,CAAC,kJAAA,CAAA,UAAI;AACvB","ignoreList":[0],"debugId":null}}]
}