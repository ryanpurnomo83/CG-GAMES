{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/p5.Vector.js"],"sourcesContent":["import { f as TWO_PI } from '../constants-C-g_eAdC.js';\n\n/**\n * @module Math\n * @requires constants\n */\n\n\n/// HELPERS FOR REMAINDER METHOD\nconst calculateRemainder2D = function (xComponent, yComponent) {\n  if (xComponent !== 0) {\n    this.x = this.x % xComponent;\n  }\n  if (yComponent !== 0) {\n    this.y = this.y % yComponent;\n  }\n  return this;\n};\n\nconst calculateRemainder3D = function (xComponent, yComponent, zComponent) {\n  if (xComponent !== 0) {\n    this.x = this.x % xComponent;\n  }\n  if (yComponent !== 0) {\n    this.y = this.y % yComponent;\n  }\n  if (zComponent !== 0) {\n    this.z = this.z % zComponent;\n  }\n  return this;\n};\n\nclass Vector {\n  // This is how it comes in with createVector()\n  // This check if the first argument is a function\n  constructor(...args) {\n    let values = args.map((arg) => arg || 0);\n    if (typeof args[0] === \"function\") {\n      this.isPInst = true;\n      this._fromRadians = args[0];\n      this._toRadians = args[1];\n      values = args.slice(2).map((arg) => arg || 0);\n    }\n    let dimensions = values.length; // TODO: make default 3 if no arguments\n    if (dimensions === 0) {\n      this.dimensions = 2;\n      this._values = [0, 0, 0];\n    } else {\n      this.dimensions = dimensions;\n      this._values = values;\n    }\n  }\n\n  /**\n   * Gets the values of the N-dimensional vector.\n   *\n   * This method returns an array of numbers that represent the vector.\n   * Each number in the array corresponds to a different component of the vector,\n   * like its position in different directions (e.g., x, y, z).\n   *\n   * @returns {Array<number>} The array of values representing the vector.\n   */\n  get values() {\n    return this._values;\n  }\n\n  /**\n   * Sets the values of the vector.\n   *\n   * This method allows you to update the entire vector with a new set of values.\n   * You need to provide an array of numbers, where each number represents a component\n   * of the vector (e.g., x, y, z). The length of the array should match the number of\n   * dimensions of the vector. If the array is shorter, the missing components will be\n   * set to 0. If the array is longer, the extra values will be ignored.\n   *\n   * @param {Array<number>} newValues - An array of numbers representing the new values for the vector.\n   *\n   */\n  set values(newValues) {\n    let dimensions = newValues.length;\n    if (dimensions === 0) {\n      this.dimensions = 2;\n      this._values = [0, 0, 0];\n    } else {\n      this.dimensions = dimensions;\n      this._values = newValues.slice();\n    }\n  }\n\n  /**\n   * Gets the x component of the vector.\n   *\n   * This method returns the value of the x component of the vector.\n   * Think of the x component as the horizontal position or the first number in the vector.\n   * If the x component is not defined, it will return 0.\n   *\n   * @returns {Number} The x component of the vector. Returns 0 if the value is not defined.\n   */\n  get x() {\n    return this._values[0] || 0;\n  }\n\n  /**\n   * Retrieves the value at the specified index from the vector.\n   *\n   * This method allows you to get the value of a specific component of the vector\n   * by providing its index. Think of the vector as a list of numbers, where each\n   * number represents a different direction (like x, y, or z). The index is just\n   * the position of the number in that list.\n   *\n   * For example, if you have a vector with values 10, 20, 30 the index 0 would\n   * give you the first value 10, index 1 would give you the second value 20,\n   * and so on.\n   *\n   * @param {Number} index - The position of the value you want to get from the vector.\n   * @returns {Number} The value at the specified position in the vector.\n   * @throws Will throw an error if the index is out of bounds, meaning if you try to\n   *          get a value from a position that doesn't exist in the vector.\n   */\n  getValue(index) {\n    if (index < this._values.length) {\n      return this._values[index];\n    } else {\n      p5._friendlyError(\n        \"The index parameter is trying to set a value outside the bounds of the vector\",\n        \"p5.Vector.setValue\"\n      );\n    }\n  }\n\n  /**\n   * Sets the value at the specified index of the vector.\n   *\n   * This method allows you to change a specific component of the vector by providing its index and the new value you want to set.\n   * Think of the vector as a list of numbers, where each number represents a different direction (like x, y, or z).\n   * The index is just the position of the number in that list.\n   *\n   * For example, if you have a vector with values [0, 20, 30], and you want to change the second value (20) to 50,\n   * you would use this method with index 1 (since indexes start at 0) and value 50.\n   *\n   * @param {Number} index - The position in the vector where you want to set the new value.\n   * @param {Number} value - The new value you want to set at the specified position.\n   * @throws Will throw an error if the index is outside the bounds of the vector, meaning if you try to set a value at a position that doesn't exist in the vector.\n   */\n  setValue(index, value) {\n    if (index < this._values.length) {\n      this._values[index] = value;\n    } else {\n      p5._friendlyError(\n        \"The index parameter is trying to set a value outside the bounds of the vector\",\n        \"p5.Vector.setValue\"\n      );\n    }\n  }\n\n  /**\n   * Gets the y component of the vector.\n   *\n   * This method returns the value of the y component of the vector.\n   * Think of the y component as the vertical position or the second number in the vector.\n   * If the y component is not defined, it will return 0.\n   *\n   * @returns {Number} The y component of the vector. Returns 0 if the value is not defined.\n   */\n  get y() {\n    return this._values[1] || 0;\n  }\n\n  /**\n   * Gets the z component of the vector.\n   *\n   * This method returns the value of the z component of the vector.\n   * Think of the z component as the depth or the third number in the vector.\n   * If the z component is not defined, it will return 0.\n   *\n   * @returns {Number} The z component of the vector. Returns 0 if the value is not defined.\n   */\n  get z() {\n    return this._values[2] || 0;\n  }\n\n  /**\n   * Gets the w component of the vector.\n   *\n   * This method returns the value of the w component of the vector.\n   * Think of the w component as the fourth number in the vector.\n   * If the w component is not defined, it will return 0.\n   *\n   * @returns {Number} The w component of the vector. Returns 0 if the value is not defined.\n   */\n  get w() {\n    return this._values[3] || 0;\n  }\n\n  /**\n   * Sets the x component of the vector.\n   *\n   * This method allows you to change the x value of the vector.\n   * The x value is the first number in the vector, representing the horizontal position.\n   * By calling this method, you can update the x value to a new number.\n   *\n   * @param {Number} xVal - The new value for the x component.\n   */\n  set x(xVal) {\n    if (this._values.length > 1) {\n      this._values[0] = xVal;\n    }\n  }\n\n  /**\n   * Sets the y component of the vector.\n   *\n   * This method allows you to change the y value of the vector.\n   * The y value is the second number in the vector, representing the vertical position.\n   * By calling this method, you can update the y value to a new number.\n   *\n   * @param {Number} yVal - The new value for the y component.\n   */\n  set y(yVal) {\n    if (this._values.length > 1) {\n      this._values[1] = yVal;\n    }\n  }\n\n  /**\n   * Sets the z component of the vector.\n   *\n   * This method allows you to change the z value of the vector.\n   * The z value is the third number in the vector, representing the depth or the third dimension.\n   * By calling this method, you can update the z value to a new number.\n   *\n   * @param {Number} zVal - The new value for the z component.\n   */\n  set z(zVal) {\n    if (this._values.length > 2) {\n      this._values[2] = zVal;\n    }\n  }\n\n  /**\n   * Sets the w component of the vector.\n   *\n   * This method allows you to change the w value of the vector.\n   * The w value is the fourth number in the vector, representing the fourth dimension.\n   * By calling this method, you can update the w value to a new number.\n   *\n   * @param {Number} wVal - The new value for the w component.\n   */\n  set w(wVal) {\n    if (this._values.length > 3) {\n      this._values[3] = wVal;\n    }\n  }\n\n  /**\n   * Returns a string representation of a vector.\n   *\n   * Calling `toString()` is useful for printing vectors to the console while\n   * debugging.\n   *\n   * @return {String} string representation of the vector.\n   *\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   let v = createVector(20, 30);\n   *\n   *   // Prints 'p5.Vector Object : [20, 30, 0]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  toString() {\n    return `[${this.values.join(\", \")}]`;\n  }\n\n  /**\n   * Sets the vector's `x`, `y`, and `z` components.\n   *\n   * `set()` can use separate numbers, as in `v.set(1, 2, 3)`, a\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.set(v2)`, or an\n   * array of numbers, as in `v.set([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it will be set to 0. For\n   * example, `v.set(4, 5)` sets `v.x` to 4, `v.y` to 5, and `v.z` to 0.\n   * Calling `set()` with no arguments, as in `v.set()`, sets all the vector's\n   * components to 0.\n   *\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top left.\n   *   let pos = createVector(25, 25);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // set() with numbers.\n   *   pos.set(75, 25);\n   *   point(pos);\n   *\n   *   // Bottom right.\n   *   // set() with a p5.Vector.\n   *   let p2 = createVector(75, 75);\n   *   pos.set(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // set() with an array.\n   *   let arr = [25, 75];\n   *   pos.set(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector|Number[]} value vector to set.\n   * @chainable\n   */\n  set(...args) {\n    if (args[0] instanceof Vector) {\n      this.values = args[0].values.slice();\n    } else if (Array.isArray(args[0])) {\n      this.values = args[0].map((arg) => arg || 0);\n    } else {\n      this.values = args.map((arg) => arg || 0);\n    }\n    this.dimensions = this.values.length;\n    return this;\n  }\n\n  /**\n   * Returns a copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @return {p5.Vector} copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100 ,100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let pos = createVector(50, 50);\n   *\n   *   // Make a copy.\n   *   let pc = pos.copy();\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(pc);\n   *\n   *   describe('A black point drawn in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  copy() {\n    if (this.isPInst) {\n      return new Vector(this._fromRadians, this._toRadians, ...this.values);\n    } else {\n      return new Vector(...this.values);\n    }\n  }\n\n  /**\n   * Adds to a vector's components.\n   *\n   * `add()` can use separate numbers, as in `v.add(1, 2, 3)`,\n   * another <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.add(v2)`, or\n   * an array of numbers, as in `v.add([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it won't change. For\n   * example, `v.add(4, 5)` adds 4 to `v.x`, 5 to `v.y`, and 0 to `v.z`.\n   * Calling `add()` with no arguments, as in `v.add()`, has no effect.\n   *\n   * This method supports N-dimensional vectors.\n   *\n   * The static version of `add()`, as in `p5.Vector.add(v2, v1)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number|Array} x   x component of the vector to be added or an array of components.\n   * @param  {Number} [y] y component of the vector to be added.\n   * @param  {Number} [z] z component of the vector to be added.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top left.\n   *   let pos = createVector(25, 25);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // Add numbers.\n   *   pos.add(50, 0);\n   *   point(pos);\n   *\n   *   // Bottom right.\n   *   // Add a p5.Vector.\n   *   let p2 = createVector(0, 50);\n   *   pos.add(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // Add an array.\n   *   let arr = [-50, 0];\n   *   pos.add(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top left.\n   *   let p1 = createVector(25, 25);\n   *\n   *   // Center.\n   *   let p2 = createVector(50, 50);\n   *\n   *   // Bottom right.\n   *   // Add p1 and p2.\n   *   let p3 = p5.Vector.add(p1, p2);\n   *\n   *   // Draw the points.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots in a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red arrow extends from the top left corner to the center. A blue arrow extends from the tip of the red arrow. A purple arrow extends from the origin to the tip of the blue arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(-30, 20);\n   *   drawArrow(v1, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.add(v1, v2);\n   *   drawArrow(origin, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector|Number[]} value The vector to add\n   * @chainable\n   */\n  add(...args) {\n    if (args[0] instanceof Vector) {\n      args = args[0].values;\n    } else if (Array.isArray(args[0])) {\n      args = args[0];\n    }\n    args.forEach((value, index) => {\n      this.values[index] = (this.values[index] || 0) + (value || 0);\n    });\n    return this;\n  }\n\n  /**\n   * Performs modulo (remainder) division with a vector's `x`, `y`, and `z`\n   * components.\n   *\n   * `rem()` can use separate numbers, as in `v.rem(1, 2, 3)`,\n   * another <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.rem(v2)`, or\n   * an array of numbers, as in `v.rem([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.rem(2)`, then all the components\n   * will be set to their values modulo 2. If two values are provided, as in\n   * `v.rem(2, 3)`, then `v.z` won't change. Calling `rem()` with no\n   * arguments, as in `v.rem()`, has no effect.\n   *\n   * The static version of `rem()`, as in `p5.Vector.rem(v2, v1)`, returns a\n   * new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param {Number} x x component of divisor vector.\n   * @param {Number} y y component of divisor vector.\n   * @param {Number} z z component of divisor vector.\n   * @chainable\n   *\n   * @example\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 0, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2, 3);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 5]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide numbers.\n   *   v.rem(2, 3, 4);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4, 5);\n   *   let v2 = createVector(2, 3, 4);\n   *\n   *   // Divide a p5.Vector.\n   *   v1.rem(v2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class='norender'>\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 5);\n   *\n   *   // Divide an array.\n   *   let arr = [2, 3, 4];\n   *   v.rem(arr);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4, 5);\n   *   let v2 = createVector(2, 3, 4);\n   *\n   *   // Divide without modifying the original vectors.\n   *   let v3 = p5.Vector.rem(v1, v2);\n   *\n   *   // Prints 'p5.Vector Object : [1, 1, 1]'.\n   *   print(v3.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector | Number[]}  value  divisor vector.\n   * @chainable\n   */\n  rem(x, y, z) {\n    if (x instanceof Vector) {\n      if ([x.x, x.y, x.z].every(Number.isFinite)) {\n        const xComponent = parseFloat(x.x);\n        const yComponent = parseFloat(x.y);\n        const zComponent = parseFloat(x.z);\n        return calculateRemainder3D.call(\n          this,\n          xComponent,\n          yComponent,\n          zComponent\n        );\n      }\n    } else if (Array.isArray(x)) {\n      if (x.every((element) => Number.isFinite(element))) {\n        if (x.length === 2) {\n          return calculateRemainder2D.call(this, x[0], x[1]);\n        }\n        if (x.length === 3) {\n          return calculateRemainder3D.call(this, x[0], x[1], x[2]);\n        }\n      }\n    } else if (arguments.length === 1) {\n      if (Number.isFinite(arguments[0]) && arguments[0] !== 0) {\n        this.x = this.x % arguments[0];\n        this.y = this.y % arguments[0];\n        this.z = this.z % arguments[0];\n        return this;\n      }\n    } else if (arguments.length === 2) {\n      const vectorComponents = [...arguments];\n      if (vectorComponents.every((element) => Number.isFinite(element))) {\n        if (vectorComponents.length === 2) {\n          return calculateRemainder2D.call(\n            this,\n            vectorComponents[0],\n            vectorComponents[1]\n          );\n        }\n      }\n    } else if (arguments.length === 3) {\n      const vectorComponents = [...arguments];\n      if (vectorComponents.every((element) => Number.isFinite(element))) {\n        if (vectorComponents.length === 3) {\n          return calculateRemainder3D.call(\n            this,\n            vectorComponents[0],\n            vectorComponents[1],\n            vectorComponents[2]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Subtracts from a vector's `x`, `y`, and `z` components.\n   *\n   * `sub()` can use separate numbers, as in `v.sub(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.sub(v2)`, or an array\n   * of numbers, as in `v.sub([1, 2, 3])`.\n   *\n   * If a value isn't provided for a component, it won't change. For\n   * example, `v.sub(4, 5)` subtracts 4 from `v.x`, 5 from `v.y`, and 0 from `v.z`.\n   * Calling `sub()` with no arguments, as in `v.sub()`, has no effect.\n   *\n   * The static version of `sub()`, as in `p5.Vector.sub(v2, v1)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number} x   x component of the vector to subtract.\n   * @param  {Number} [y] y component of the vector to subtract.\n   * @param  {Number} [z] z component of the vector to subtract.\n   * @chainable\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom right.\n   *   let pos = createVector(75, 75);\n   *   point(pos);\n   *\n   *   // Top right.\n   *   // Subtract numbers.\n   *   pos.sub(0, 50);\n   *   point(pos);\n   *\n   *   // Top left.\n   *   // Subtract a p5.Vector.\n   *   let p2 = createVector(50, 0);\n   *   pos.sub(p2);\n   *   point(pos);\n   *\n   *   // Bottom left.\n   *   // Subtract an array.\n   *   let arr = [0, -50];\n   *   pos.sub(arr);\n   *   point(pos);\n   *\n   *   describe('Four black dots arranged in a square on a gray background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(75, 75);\n   *   let p2 = createVector(50, 50);\n   *\n   *   // Subtract with modifying the original vectors.\n   *   let p3 = p5.Vector.sub(p1, p2);\n   *\n   *   // Draw the points.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots in a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red and a blue arrow extend from the top left. A purple arrow extends from the tip of the red arrow to the tip of the blue arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(20, 70);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.sub(v2, v1);\n   *   drawArrow(v1, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector|Number[]} value the vector to subtract\n   * @chainable\n   */\n  sub(...args) {\n    if (args[0] instanceof Vector) {\n      args[0].values.forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    } else if (Array.isArray(args[0])) {\n      args[0].forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    } else {\n      args.forEach((value, index) => {\n        this.values[index] -= value || 0;\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Multiplies a vector's `x`, `y`, and `z` components.\n   *\n   * `mult()` can use separate numbers, as in `v.mult(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.mult(v2)`, or an array\n   * of numbers, as in `v.mult([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.mult(2)`, then all the components\n   * will be multiplied by 2. If a value isn't provided for a component, it\n   * won't change. For example, `v.mult(4, 5)` multiplies `v.x` by, `v.y` by 5,\n   * and `v.z` by 1. Calling `mult()` with no arguments, as in `v.mult()`, has\n   * no effect.\n   *\n   * The static version of `mult()`, as in `p5.Vector.mult(v, 2)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @method mult\n   * @param  {Number} n The number to multiply with the vector\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Center.\n   *   // Multiply all components by 2.\n   *   p.mult(2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * 2 and p.y * 3\n   *   p.mult(2, 3);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * 2 and p.y * 3\n   *   let arr = [2, 3];\n   *   p.mult(arr);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Multiply p.x * p2.x and p.y * p2.y\n   *   let p2 = createVector(2, 3);\n   *   p.mult(p2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Top-left.\n   *   let p = createVector(25, 25);\n   *   point(p);\n   *\n   *   // Bottom-right.\n   *   // Create a new p5.Vector with\n   *   // p3.x = p.x * p2.x\n   *   // p3.y = p.y * p2.y\n   *   let p2 = createVector(2, 3);\n   *   let p3 = p5.Vector.mult(p, p2);\n   *   point(p3);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extending from the top left corner. The blue arrow is twice the length of the red arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(25, 25);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = p5.Vector.mult(v1, 2);\n   *   drawArrow(origin, v2, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} x number to multiply with the x component of the vector.\n   * @param  {Number} y number to multiply with the y component of the vector.\n   * @param  {Number} [z] number to multiply with the z component of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {Number[]} arr array to multiply with the components of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {p5.Vector} v vector to multiply with the components of the original vector.\n   * @chainable\n   */\n  mult(...args) {\n    if (args.length === 1 && args[0] instanceof Vector) {\n      const v = args[0];\n      const maxLen = Math.min(this.values.length, v.values.length);\n      for (let i = 0; i < maxLen; i++) {\n        if (Number.isFinite(v.values[i]) && typeof v.values[i] === \"number\") {\n          this._values[i] *= v.values[i];\n        } else {\n          console.warn(\n            \"p5.Vector.prototype.mult:\",\n            \"v contains components that are either undefined or not finite numbers\"\n          );\n          return this;\n        }\n      }\n    } else if (args.length === 1 && Array.isArray(args[0])) {\n      const arr = args[0];\n      const maxLen = Math.min(this.values.length, arr.length);\n      for (let i = 0; i < maxLen; i++) {\n        if (Number.isFinite(arr[i]) && typeof arr[i] === \"number\") {\n          this._values[i] *= arr[i];\n        } else {\n          console.warn(\n            \"p5.Vector.prototype.mult:\",\n            \"arr contains elements that are either undefined or not finite numbers\"\n          );\n          return this;\n        }\n      }\n    } else if (\n      args.length === 1 &&\n      typeof args[0] === \"number\" &&\n      Number.isFinite(args[0])\n    ) {\n      for (let i = 0; i < this._values.length; i++) {\n        this._values[i] *= args[0];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Divides a vector's `x`, `y`, and `z` components.\n   *\n   * `div()` can use separate numbers, as in `v.div(1, 2, 3)`, another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object, as in `v.div(v2)`, or an array\n   * of numbers, as in `v.div([1, 2, 3])`.\n   *\n   * If only one value is provided, as in `v.div(2)`, then all the components\n   * will be divided by 2. If a value isn't provided for a component, it\n   * won't change. For example, `v.div(4, 5)` divides `v.x` by, `v.y` by 5,\n   * and `v.z` by 1. Calling `div()` with no arguments, as in `v.div()`, has\n   * no effect.\n   *\n   * The static version of `div()`, as in `p5.Vector.div(v, 2)`, returns a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * originals.\n   *\n   * @param  {Number}    n The number to divide the vector by\n   * @chainable\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Center.\n   *   let p = createVector(50, 50);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 2\n   *   p.div(2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   p.div(2, 3);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   let arr = [2, 3];\n   *   p.div(arr);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Divide p.x / 2 and p.y / 3\n   *   let p2 = createVector(2, 3);\n   *   p.div(p2);\n   *   point(p);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Bottom-right.\n   *   let p = createVector(50, 75);\n   *   point(p);\n   *\n   *   // Top-left.\n   *   // Create a new p5.Vector with\n   *   // p3.x = p.x / p2.x\n   *   // p3.y = p.y / p2.y\n   *   let p2 = createVector(2, 3);\n   *   let p3 = p5.Vector.div(p, p2);\n   *   point(p3);\n   *\n   *   describe('Two black dots drawn on a gray square. One dot is in the top left corner and the other is in the bottom center.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = p5.Vector.div(v1, 2);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   describe('Two arrows extending from the top left corner. The blue arrow is half the length of the red arrow.');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {Number} x number to divide with the x component of the vector.\n   * @param  {Number} y number to divide with the y component of the vector.\n   * @param  {Number} [z] number to divide with the z component of the vector.\n   * @chainable\n   */\n  /**\n   * @param  {Number[]} arr array to divide the components of the vector by.\n   * @chainable\n   */\n  /**\n   * @param  {p5.Vector} v vector to divide the components of the original vector by.\n   * @chainable\n   */\n  div(...args) {\n    if (args.length === 0) return this;\n    if (args.length === 1 && args[0] instanceof Vector) {\n      const v = args[0];\n      if (\n        v._values.every(\n          (val) => Number.isFinite(val) && typeof val === \"number\"\n        )\n      ) {\n        if (v._values.some((val) => val === 0)) {\n          console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n          return this;\n        }\n        this._values = this._values.map((val, i) => val / v._values[i]);\n      } else {\n        console.warn(\n          \"p5.Vector.prototype.div:\",\n          \"vector contains components that are either undefined or not finite numbers\"\n        );\n      }\n      return this;\n    }\n\n    if (args.length === 1 && Array.isArray(args[0])) {\n      const arr = args[0];\n      if (arr.every((val) => Number.isFinite(val) && typeof val === \"number\")) {\n        if (arr.some((val) => val === 0)) {\n          console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n          return this;\n        }\n        this._values = this._values.map((val, i) => val / arr[i]);\n      } else {\n        console.warn(\n          \"p5.Vector.prototype.div:\",\n          \"array contains components that are either undefined or not finite numbers\"\n        );\n      }\n      return this;\n    }\n\n    if (args.every((val) => Number.isFinite(val) && typeof val === \"number\")) {\n      if (args.some((val) => val === 0)) {\n        console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\");\n        return this;\n      }\n      this._values = this._values.map((val, i) => val / args[0]);\n    } else {\n      console.warn(\n        \"p5.Vector.prototype.div:\",\n        \"arguments contain components that are either undefined or not finite numbers\"\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector.\n   *\n   * Use <a href=\"#/p5/mag\">mag()</a> to calculate the magnitude of a 2D vector\n   * using components as in `mag(x, y)`.\n   *\n   * @return {Number} magnitude of the vector.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let p = createVector(30, 40);\n   *\n   *   // Draw a line from the origin.\n   *   line(0, 0, p.x, p.y);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the vector's magnitude.\n   *   let m = p.mag();\n   *   text(m, p.x, p.y);\n   *\n   *   describe('A diagonal black line extends from the top left corner of a gray square. The number 50 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  mag() {\n    return Math.sqrt(this.magSq());\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector squared.\n   *\n   * @return {Number} squared magnitude of the vector.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector object.\n   *   let p = createVector(30, 40);\n   *\n   *   // Draw a line from the origin.\n   *   line(0, 0, p.x, p.y);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the vector's magnitude squared.\n   *   let m = p.magSq();\n   *   text(m, p.x, p.y);\n   *\n   *   describe('A diagonal black line extends from the top left corner of a gray square. The number 2500 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  magSq() {\n    return this._values.reduce(\n      (sum, component) => sum + component * component,\n      0\n    );\n  }\n\n  /**\n   * Calculates the dot product of two vectors.\n   *\n   * The dot product is a number that describes the overlap between two vectors.\n   * Visually, the dot product can be thought of as the \"shadow\" one vector\n   * casts on another. The dot product's magnitude is largest when two vectors\n   * point in the same or opposite directions. Its magnitude is 0 when two\n   * vectors form a right angle.\n   *\n   * The version of `dot()` with one parameter interprets it as another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * The version of `dot()` with multiple parameters interprets them as the\n   * `x`, `y`, and `z` components of another vector.\n   *\n   * The static version of `dot()`, as in `p5.Vector.dot(v1, v2)`, is the same\n   * as calling `v1.dot(v2)`.\n   *\n   * @param  {Number} x   x component of the vector.\n   * @param  {Number} [y] y component of the vector.\n   * @param  {Number} [z] z component of the vector.\n   * @return {Number}     dot product.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(3, 4);\n   *   let v2 = createVector(3, 0);\n   *\n   *   // Calculate the dot product.\n   *   let dp = v1.dot(v2);\n   *\n   *   // Prints \"9\" to the console.\n   *   print(dp);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the dot product.\n   *   let dp = p5.Vector.dot(v1, v2);\n   *\n   *   // Prints \"0\" to the console.\n   *   print(dp);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows drawn on a gray square. A black arrow points to the right and a red arrow follows the mouse. The text \"v1 • v2 = something\" changes as the mouse moves.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Draw the black arrow.\n   *   let v1 = createVector(30, 0);\n   *   drawArrow(v0, v1, 'black');\n   *\n   *   // Draw the red arrow.\n   *   let v2 = createVector(mouseX - 50, mouseY - 50);\n   *   drawArrow(v0, v2, 'red');\n   *\n   *   // Display the dot product.\n   *   let dp = v2.dot(v1);\n   *   text(`v2 • v1 = ${dp}`, 10, 20);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be dotted.\n   * @return {Number}\n   */\n  dot(...args) {\n    if (args[0] instanceof Vector) {\n      return this.dot(...args[0]._values);\n    }\n    return this._values.reduce((sum, component, index) => {\n      return sum + component * (args[index] || 0);\n    }, 0);\n  }\n\n  /**\n   * Calculates the cross product of two vectors.\n   *\n   * The cross product is a vector that points straight out of the plane created\n   * by two vectors. The cross product's magnitude is the area of the parallelogram\n   * formed by the original two vectors.\n   *\n   * The static version of `cross()`, as in `p5.Vector.cross(v1, v2)`, is the same\n   * as calling `v1.cross(v2)`.\n   *\n   * @param  {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed.\n   * @return {p5.Vector}   cross product as a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(3, 4);\n   *\n   *   // Calculate the cross product.\n   *   let cp = v1.cross(v2);\n   *\n   *   // Prints \"p5.Vector Object : [0, 0, 4]\" to the console.\n   *   print(cp.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(3, 4);\n   *\n   *   // Calculate the cross product.\n   *   let cp = p5.Vector.cross(v1, v2);\n   *\n   *   // Prints \"p5.Vector Object : [0, 0, 4]\" to the console.\n   *   print(cp.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  cross(v) {\n    const x = this.y * v.z - this.z * v.y;\n    const y = this.z * v.x - this.x * v.z;\n    const z = this.x * v.y - this.y * v.x;\n    if (this.isPInst) {\n      return new Vector(this._fromRadians, this._toRadians, x, y, z);\n    } else {\n      return new Vector(x, y, z);\n    }\n  }\n\n  /**\n   * Calculates the distance between two points represented by vectors.\n   *\n   * A point's coordinates can be represented by the components of a vector\n   * that extends from the origin to the point.\n   *\n   * The static version of `dist()`, as in `p5.Vector.dist(v1, v2)`, is the same\n   * as calling `v1.dist(v2)`.\n   *\n   * Use <a href=\"#/p5/dist\">dist()</a> to calculate the distance between points\n   * using coordinates as in `dist(x1, y1, x2, y2)`.\n   *\n   * @method dist\n   * @submodule p5.Vector\n   * @param  {p5.Vector} v x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}      distance.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the distance between them.\n   *   let d = v1.dist(v2);\n   *\n   *   // Prints \"1.414...\" to the console.\n   *   print(d);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v1 = createVector(1, 0);\n   *   let v2 = createVector(0, 1);\n   *\n   *   // Calculate the distance between them.\n   *   let d = p5.Vector.dist(v1, v2);\n   *\n   *   // Prints \"1.414...\" to the console.\n   *   print(d);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows drawn on a gray square. A red and a blue arrow extend from the top left. A purple arrow extends from the tip of the red arrow to the tip of the blue arrow. The number 36 is written in black near the purple arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *\n   *   // Draw the red arrow.\n   *   let v1 = createVector(50, 50);\n   *   drawArrow(origin, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   let v2 = createVector(20, 70);\n   *   drawArrow(origin, v2, 'blue');\n   *\n   *   // Purple arrow.\n   *   let v3 = p5.Vector.sub(v2, v1);\n   *   drawArrow(v1, v3, 'purple');\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *\n   *   // Display the magnitude. The same as floor(v3.mag());\n   *   let m = floor(p5.Vector.dist(v1, v2));\n   *   text(m, 50, 75);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  dist(v) {\n    return v.copy().sub(this).mag();\n  }\n\n  /**\n   * Scales the components of a <a href=\"#/p5.Vector\">p5.Vector</a> object so\n   * that its magnitude is 1.\n   *\n   * The static version of `normalize()`,  as in `p5.Vector.normalize(v)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @return {p5.Vector} normalized <a href=\"#/p5.Vector\">p5.Vector</a>.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector.\n   *   let v = createVector(10, 20, 2);\n   *\n   *   // Normalize.\n   *   v.normalize();\n   *\n   *   // Prints \"p5.Vector Object : [0.445..., 0.890..., 0.089...]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create a p5.Vector.\n   *   let v0 = createVector(10, 20, 2);\n   *\n   *   // Create a normalized copy.\n   *   let v1 = p5.Vector.normalize(v0);\n   *\n   *   // Prints \"p5.Vector Object : [10, 20, 2]\" to the console.\n   *   print(v0.toString());\n   *   // Prints \"p5.Vector Object : [0.445..., 0.890..., 0.089...]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A red and blue arrow extend from the center of a circle. Both arrows follow the mouse, but the blue arrow's length is fixed to the circle's radius.\");\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   // Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Vector from the center to the mouse.\n   *   let v1 = createVector(mouseX - 50, mouseY - 50);\n   *\n   *   // Circle's radius.\n   *   let r = 25;\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   v1.normalize();\n   *   drawArrow(v0, v1.mult(r), 'blue');\n   *\n   *   // Draw the circle.\n   *   noFill();\n   *   circle(50, 50, r * 2);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  normalize() {\n    const len = this.mag();\n    // here we multiply by the reciprocal instead of calling 'div()'\n    // since div duplicates this zero check.\n    if (len !== 0) this.mult(1 / len);\n    return this;\n  }\n\n  /**\n   * Limits a vector's magnitude to a maximum value.\n   *\n   * The static version of `limit()`, as in `p5.Vector.limit(v, 5)`, returns a\n   * new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * original.\n   *\n   * @param  {Number}    max maximum magnitude for the vector.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(10, 20, 2);\n   *\n   *   // Limit its magnitude.\n   *   v.limit(5);\n   *\n   *   // Prints \"p5.Vector Object : [2.227..., 4.454..., 0.445...]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(10, 20, 2);\n   *\n   *   // Create a copy an limit its magintude.\n   *   let v1 = p5.Vector.limit(v0, 5);\n   *\n   *   // Prints \"p5.Vector Object : [2.227..., 4.454..., 0.445...]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe(\"A red and blue arrow extend from the center of a circle. Both arrows follow the mouse, but the blue arrow never crosses the circle's edge.\");\n   * }\n   * function draw() {\n   *   background(240);\n   *\n   *   // Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Vector from the center to the mouse.\n   *   let v1 = createVector(mouseX - 50, mouseY - 50);\n   *\n   *   // Circle's radius.\n   *   let r = 25;\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v1.limit(r), 'blue');\n   *\n   *   // Draw the circle.\n   *   noFill();\n   *   circle(50, 50, r * 2);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  limit(max) {\n    const mSq = this.magSq();\n    if (mSq > max * max) {\n      this.div(Math.sqrt(mSq)) //normalize it\n        .mult(max);\n    }\n    return this;\n  }\n\n  /**\n   * Sets a vector's magnitude to a given value.\n   *\n   * The static version of `setMag()`, as in `p5.Vector.setMag(v, 10)`, returns\n   * a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change the\n   * original.\n   *\n   * @param  {Number}    len new length for this vector.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(3, 4, 0);\n   *\n   *   // Prints \"5\" to the console.\n   *   print(v.mag());\n   *\n   *   // Set its magnitude to 10.\n   *   v.setMag(10);\n   *\n   *   // Prints \"p5.Vector Object : [6, 8, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 4, 0);\n   *\n   *   // Create a copy with a magnitude of 10.\n   *   let v1 = p5.Vector.setMag(v0, 10);\n   *\n   *   // Prints \"5\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"p5.Vector Object : [6, 8, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the top left corner of a square toward its center. The red arrow reaches the center and the blue arrow only extends part of the way.');\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   let origin = createVector(0, 0);\n   *   let v = createVector(50, 50);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(origin, v, 'red');\n   *\n   *   // Set v's magnitude to 30.\n   *   v.setMag(30);\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(origin, v, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  setMag(n) {\n    return this.normalize().mult(n);\n  }\n\n  /**\n   * Calculates the angle a 2D vector makes with the positive x-axis.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `heading()` returns angles\n   * in the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The static version of `heading()`, as in `p5.Vector.heading(v)`, works the\n   * same way.\n   *\n   * @return {Number} angle of rotation.\n   *\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1);\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v.heading());\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Prints \"45\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1);\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(p5.Vector.heading(v));\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Prints \"45\" to the console.\n   *   print(p5.Vector.heading(v));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black arrow extends from the top left of a square to its center. The text \"Radians: 0.79\" and \"Degrees: 45\" is written near the tip of the arrow.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let origin = createVector(0, 0);\n   *   let v = createVector(50, 50);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(origin, v, 'black');\n   *\n   *   // Use radians.\n   *   angleMode(RADIANS);\n   *\n   *   // Display the heading in radians.\n   *   let h = round(v.heading(), 2);\n   *   text(`Radians: ${h}`, 20, 70);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Display the heading in degrees.\n   *   h = v.heading();\n   *   text(`Degrees: ${h}`, 20, 85);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  heading() {\n    const h = Math.atan2(this.y, this.x);\n    if (this.isPInst) return this._fromRadians(h);\n    return h;\n  }\n\n  /**\n   * Rotates a 2D vector to a specific angle without changing its magnitude.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `setHeading()` uses\n   * the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * @param  {Number}    angle angle of rotation.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v.heading());\n   *\n   *   // Point to the left.\n   *   v.setHeading(PI);\n   *\n   *   // Prints \"3.141...\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(v.heading());\n   *\n   *   // Point to the left.\n   *   v.setHeading(180);\n   *\n   *   // Prints \"180\" to the console.\n   *   print(v.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the center of a gray square. The red arrow points to the right and the blue arrow points down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Point down.\n   *   v1.setHeading(HALF_PI);\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v1, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  setHeading(a) {\n    if (this.isPInst) a = this._toRadians(a);\n    let m = this.mag();\n    this.x = m * Math.cos(a);\n    this.y = m * Math.sin(a);\n    return this;\n  }\n\n  /**\n   * Rotates a 2D vector by an angle without changing its magnitude.\n   *\n   * By convention, the positive x-axis has an angle of 0. Angles increase in\n   * the clockwise direction.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `rotate()` uses\n   * the units of the current <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * The static version of `rotate()`, as in `p5.Vector.rotate(v, PI)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {Number}    angle angle of rotation.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   *\n   *   // Rotate a quarter turn.\n   *   v.rotate(HALF_PI);\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   *\n   *   // Rotate a quarter turn.\n   *   v.rotate(90);\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 0);\n   *\n   *   // Create a rotated copy.\n   *   let v1 = p5.Vector.rotate(v0, HALF_PI);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v0.toString());\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 0);\n   *\n   *   // Create a rotated copy.\n   *   let v1 = p5.Vector.rotate(v0, 90);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v0.toString());\n   *\n   *   // Prints \"p5.Vector Object : [0, 1, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let v0;\n   * let v1;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   v0 = createVector(50, 50);\n   *   v1 = createVector(30, 0);\n   *\n   *   describe('A black arrow extends from the center of a gray square. The arrow rotates clockwise.');\n   * }\n   *\n   * function draw() {\n   *   background(240);\n   *\n   *   // Rotate v1.\n   *   v1.rotate(0.01);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  rotate(a) {\n    let newHeading = this.heading() + a;\n    if (this.isPInst) newHeading = this._toRadians(newHeading);\n    const mag = this.mag();\n    this.x = Math.cos(newHeading) * mag;\n    this.y = Math.sin(newHeading) * mag;\n    return this;\n  }\n\n  /**\n   * Calculates the angle between two vectors.\n   *\n   * The angles returned are signed, which means that\n   * `v1.angleBetween(v2) === -v2.angleBetween(v1)`.\n   *\n   * If the vector was created with\n   * <a href=\"#/p5/createVector\">createVector()</a>, `angleBetween()` returns\n   * angles in the units of the current\n   * <a href=\"#/p5/angleMode\">angleMode()</a>.\n   *\n   * @param  {p5.Vector}    value x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}       angle between the vectors.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v0.angleBetween(v1));\n   *\n   *   // Prints \"-1.570...\" to the console.\n   *   print(v1.angleBetween(v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(v0.angleBetween(v1));\n   *\n   *   // Prints \"-90\" to the console.\n   *   print(v1.angleBetween(v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(p5.Vector.angleBetween(v0, v1));\n   *\n   *   // Prints \"-1.570...\" to the console.\n   *   print(p5.Vector.angleBetween(v1, v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 0);\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"90\" to the console.\n   *   print(p5.Vector.angleBetween(v0, v1));\n   *\n   *   // Prints \"-90\" to the console.\n   *   print(p5.Vector.angleBetween(v1, v0));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two arrows extend from the center of a gray square. A red arrow points to the right and a blue arrow points down. The text \"Radians: 1.57\" and \"Degrees: 90\" is written above the arrows.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *   let v2 = createVector(0, 30);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Use radians.\n   *   angleMode(RADIANS);\n   *\n   *   // Display the angle in radians.\n   *   let angle = round(v1.angleBetween(v2), 2);\n   *   text(`Radians: ${angle}`, 20, 20);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Display the angle in degrees.\n   *   angle = round(v1.angleBetween(v2), 2);\n   *   text(`Degrees: ${angle}`, 20, 35);\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  angleBetween(v) {\n    const magSqMult = this.magSq() * v.magSq();\n    // Returns NaN if either vector is the zero vector.\n    if (magSqMult === 0) {\n      return NaN;\n    }\n    const u = this.cross(v);\n    // The dot product computes the cos value, and the cross product computes\n    // the sin value. Find the angle based on them. In addition, in the case of\n    // 2D vectors, a sign is added according to the direction of the vector.\n    let angle = Math.atan2(u.mag(), this.dot(v)) * Math.sign(u.z || 1);\n    if (this.isPInst) {\n      angle = this._fromRadians(angle);\n    }\n    return angle;\n  }\n\n  /**\n   * Calculates new `x`, `y`, and `z` components that are proportionally the\n   * same distance between two vectors.\n   *\n   * The `amt` parameter is the amount to interpolate between the old vector and\n   * the new vector. 0.0 keeps all components equal to the old vector's, 0.5 is\n   * halfway between, and 1.0 sets all components equal to the new vector's.\n   *\n   * The static version of `lerp()`, as in `p5.Vector.lerp(v0, v1, 0.5)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {Number}    x   x component.\n   * @param  {Number}    y   y component.\n   * @param  {Number}    z   z component.\n   * @param  {Number}    amt amount of interpolation between 0.0 (old vector)\n   *                         and 1.0 (new vector). 0.5 is halfway between.\n   * @chainable\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(1, 1, 1);\n   *   let v1 = createVector(3, 3, 3);\n   *\n   *   // Interpolate.\n   *   v0.lerp(v1, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v0.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(1, 1, 1);\n   *\n   *   // Interpolate.\n   *   v.lerp(3, 3, 3, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(1, 1, 1);\n   *   let v1 = createVector(3, 3, 3);\n   *\n   *   // Interpolate.\n   *   let v2 = p5.Vector.lerp(v0, v1, 0.5);\n   *\n   *   // Prints \"p5.Vector Object : [2, 2, 2]\" to the console.\n   *   print(v2.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square. A red arrow points to the right, a blue arrow points down, and a purple arrow points to the bottom right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(30, 0);\n   *   let v2 = createVector(0, 30);\n   *\n   *   // Interpolate.\n   *   let v3 = p5.Vector.lerp(v1, v2, 0.5);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Draw the purple arrow.\n   *   drawArrow(v0, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param  {p5.Vector} v  <a href=\"#/p5.Vector\">p5.Vector</a> to lerp toward.\n   * @param  {Number}    amt\n   * @chainable\n   */\n  lerp(x, y, z, amt) {\n    if (x instanceof Vector) {\n      return this.lerp(x.x, x.y, x.z, y);\n    }\n    this.x += (x - this.x) * amt || 0;\n    this.y += (y - this.y) * amt || 0;\n    this.z += (z - this.z) * amt || 0;\n    return this;\n  }\n\n  /**\n   * Calculates a new heading and magnitude that are between two vectors.\n   *\n   * The `amt` parameter is the amount to interpolate between the old vector and\n   * the new vector. 0.0 keeps the heading and magnitude equal to the old\n   * vector's, 0.5 sets them halfway between, and 1.0 sets the heading and\n   * magnitude equal to the new vector's.\n   *\n   * `slerp()` differs from <a href=\"#/p5.Vector/lerp\">lerp()</a> because\n   * it interpolates magnitude. Calling `v0.slerp(v1, 0.5)` sets `v0`'s\n   * magnitude to a value halfway between its original magnitude and `v1`'s.\n   * Calling `v0.lerp(v1, 0.5)` makes no such guarantee.\n   *\n   * The static version of `slerp()`, as in `p5.Vector.slerp(v0, v1, 0.5)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param {p5.Vector} v <a href=\"#/p5.Vector\">p5.Vector</a> to slerp toward.\n   * @param {Number} amt  amount of interpolation between 0.0 (old vector)\n   *                      and 1.0 (new vector). 0.5 is halfway between.\n   * @return {p5.Vector}\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 0);\n   *\n   *   // Prints \"3\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0\" to the console.\n   *   print(v0.heading());\n   *\n   *   // Create a p5.Vector object.\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1\" to the console.\n   *   print(v1.mag());\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v1.heading());\n   *\n   *   // Interpolate halfway between v0 and v1.\n   *   v0.slerp(v1, 0.5);\n   *\n   *   // Prints \"2\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v0.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v0 = createVector(3, 0);\n   *\n   *   // Prints \"3\" to the console.\n   *   print(v0.mag());\n   *\n   *   // Prints \"0\" to the console.\n   *   print(v0.heading());\n   *\n   *   // Create a p5.Vector object.\n   *   let v1 = createVector(0, 1);\n   *\n   *   // Prints \"1\" to the console.\n   *   print(v1.mag());\n   *\n   *   // Prints \"1.570...\" to the console.\n   *   print(v1.heading());\n   *\n   *   // Create a p5.Vector that's halfway between v0 and v1.\n   *   let v3 = p5.Vector.slerp(v0, v1, 0.5);\n   *\n   *   // Prints \"2\" to the console.\n   *   print(v3.mag());\n   *\n   *   // Prints \"0.785...\" to the console.\n   *   print(v3.heading());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square. A red arrow points to the right, a blue arrow points to the left, and a purple arrow points down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(50, 50);\n   *   let v1 = createVector(20, 0);\n   *   let v2 = createVector(-40, 0);\n   *\n   *   // Create a p5.Vector that's halfway between v1 and v2.\n   *   let v3 = p5.Vector.slerp(v1, v2, 0.5);\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   *\n   *   // Draw the purple arrow.\n   *   drawArrow(v0, v3, 'purple');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  slerp(v, amt) {\n    // edge cases.\n    if (amt === 0) {\n      return this;\n    }\n    if (amt === 1) {\n      return this.set(v);\n    }\n\n    // calculate magnitudes\n    const selfMag = this.mag();\n    const vMag = v.mag();\n    const magmag = selfMag * vMag;\n    // if either is a zero vector, linearly interpolate by these vectors\n    if (magmag === 0) {\n      this.mult(1 - amt).add(v.x * amt, v.y * amt, v.z * amt);\n      return this;\n    }\n    // the cross product of 'this' and 'v' is the axis of rotation\n    const axis = this.cross(v);\n    const axisMag = axis.mag();\n    // Calculates the angle between 'this' and 'v'\n    const theta = Math.atan2(axisMag, this.dot(v));\n\n    // However, if the norm of axis is 0, normalization cannot be performed,\n    // so we will divide the cases\n    if (axisMag > 0) {\n      axis.x /= axisMag;\n      axis.y /= axisMag;\n      axis.z /= axisMag;\n    } else if (theta < Math.PI * 0.5) {\n      // if the norm is 0 and the angle is less than PI/2,\n      // the angle is very close to 0, so do linear interpolation.\n      this.mult(1 - amt).add(v.x * amt, v.y * amt, v.z * amt);\n      return this;\n    } else {\n      // If the norm is 0 and the angle is more than PI/2, the angle is\n      // very close to PI.\n      // In this case v can be regarded as '-this', so take any vector\n      // that is orthogonal to 'this' and use that as the axis.\n      if (this.z === 0 && v.z === 0) {\n        // if both this and v are 2D vectors, use (0,0,1)\n        // this makes the result also a 2D vector.\n        axis.set(0, 0, 1);\n      } else if (this.x !== 0) {\n        // if the x components is not 0, use (y, -x, 0)\n        axis.set(this.y, -this.x, 0).normalize();\n      } else {\n        // if the x components is 0, use (1,0,0)\n        axis.set(1, 0, 0);\n      }\n    }\n\n    // Since 'axis' is a unit vector, ey is a vector of the same length as 'this'.\n    const ey = axis.cross(this);\n    // interpolate the length with 'this' and 'v'.\n    const lerpedMagFactor = 1 - amt + (amt * vMag) / selfMag;\n    // imagine a situation where 'axis', 'this', and 'ey' are pointing\n    // along the z, x, and y axes, respectively.\n    // rotates 'this' around 'axis' by amt * theta towards 'ey'.\n    const cosMultiplier = lerpedMagFactor * Math.cos(amt * theta);\n    const sinMultiplier = lerpedMagFactor * Math.sin(amt * theta);\n    // then, calculate 'result'.\n    this.x = this.x * cosMultiplier + ey.x * sinMultiplier;\n    this.y = this.y * cosMultiplier + ey.y * sinMultiplier;\n    this.z = this.z * cosMultiplier + ey.z * sinMultiplier;\n\n    return this;\n  }\n\n  /**\n   * Reflects a vector about a line in 2D or a plane in 3D.\n   *\n   * The orientation of the line or plane is described by a normal vector that\n   * points away from the shape.\n   *\n   * The static version of `reflect()`, as in `p5.Vector.reflect(v, n)`,\n   * returns a new <a href=\"#/p5.Vector\">p5.Vector</a> object and doesn't change\n   * the original.\n   *\n   * @param  {p5.Vector} surfaceNormal  <a href=\"#/p5.Vector\">p5.Vector</a>\n   *                                    to reflect about.\n   * @chainable\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a normal vector.\n   *   let n = createVector(0, 1);\n   *   // Create a vector to reflect.\n   *   let v = createVector(4, 6);\n   *\n   *   // Reflect v about n.\n   *   v.reflect(n);\n   *\n   *   // Prints \"p5.Vector Object : [4, -6, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a normal vector.\n   *   let n = createVector(0, 1);\n   *\n   *   // Create a vector to reflect.\n   *   let v0 = createVector(4, 6);\n   *\n   *   // Create a reflected vector.\n   *   let v1 = p5.Vector.reflect(v0, n);\n   *\n   *   // Prints \"p5.Vector Object : [4, -6, 0]\" to the console.\n   *   print(v1.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Three arrows extend from the center of a gray square with a vertical line down its middle. A black arrow points to the right, a blue arrow points to the bottom left, and a red arrow points to the bottom right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw a vertical line.\n   *   line(50, 0, 50, 100);\n   *\n   *   // Create a normal vector.\n   *   let n = createVector(1, 0);\n   *\n   *   // Center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a vector to reflect.\n   *   let v1 = createVector(30, 40);\n   *\n   *   // Create a reflected vector.\n   *   let v2 = p5.Vector.reflect(v1, n);\n   *\n   *   // Scale the normal vector for drawing.\n   *   n.setMag(30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, n, 'black');\n   *\n   *   // Draw the red arrow.\n   *   drawArrow(v0, v1, 'red');\n   *\n   *   // Draw the blue arrow.\n   *   drawArrow(v0, v2, 'blue');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  reflect(surfaceNormal) {\n    const surfaceNormalCopy = Vector.normalize(surfaceNormal);\n    return this.sub(surfaceNormalCopy.mult(2 * this.dot(surfaceNormalCopy)));\n  }\n\n  /**\n   * Returns the vector's components as an array of numbers.\n   *\n   * @return {Number[]} array with the vector's components.\n   * @example\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = createVector(20, 30);\n   *\n   *   // Prints \"[20, 30, 0]\" to the console.\n   *   print(v.array());\n   * }\n   * </code>\n   * </div>\n   */\n  array() {\n    return [this.x || 0, this.y || 0, this.z || 0];\n  }\n\n  /**\n   * Checks whether all the vector's components are equal to another vector's.\n   *\n   * `equals()` returns `true` if the vector's components are all the same as another\n   * vector's and `false` if not.\n   *\n   * The version of `equals()` with one parameter interprets it as another\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * The version of `equals()` with multiple parameters interprets them as the\n   * components of another vector. Any missing parameters are assigned the value\n   * 0.\n   *\n   * The static version of `equals()`, as in `p5.Vector.equals(v0, v1)`,\n   * interprets both parameters as <a href=\"#/p5.Vector\">p5.Vector</a> objects.\n   *\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @return {Boolean} whether the vectors are equal.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(10, 20, 30);\n   *   let v1 = createVector(10, 20, 30);\n   *   let v2 = createVector(0, 0, 0);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(v0.equals(v1));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(v0.equals(v2));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class = \"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(5, 10, 20);\n   *   let v1 = createVector(5, 10, 20);\n   *   let v2 = createVector(13, 10, 19);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(v0.equals(v1.x, v1.y, v1.z));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(v0.equals(v2.x, v2.y, v2.z));\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create p5.Vector objects.\n   *   let v0 = createVector(10, 20, 30);\n   *   let v1 = createVector(10, 20, 30);\n   *   let v2 = createVector(0, 0, 0);\n   *\n   *   // Prints \"true\" to the console.\n   *   print(p5.Vector.equals(v0, v1));\n   *\n   *   // Prints \"false\" to the console.\n   *   print(p5.Vector.equals(v0, v2));\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @param {p5.Vector|Array} value vector to compare.\n   * @return {Boolean}\n   */\n  equals(...args) {\n    let values;\n    if (args[0] instanceof Vector) {\n      values = args[0]._values;\n    } else if (Array.isArray(args[0])) {\n      values = args[0];\n    } else {\n      values = args;\n    }\n\n    for (let i = 0; i < this._values.length; i++) {\n      if (this._values[i] !== (values[i] || 0)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Replaces the components of a <a href=\"#/p5.Vector\">p5.Vector</a> that are very close to zero with zero.\n   *\n   * In computers, handling numbers with decimals can give slightly imprecise answers due to the way those numbers are represented.\n   * This can make it hard to check if a number is zero, as it may be close but not exactly zero.\n   * This method rounds very close numbers to zero to make those checks easier\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n   *\n   * @method clampToZero\n   * @return {p5.Vector} with components very close to zero replaced with zero.\n   * @chainable\n   */\n  clampToZero() {\n    for (let i = 0; i < this._values.length; i++) {\n      this._values[i] = this._clampToZero(this._values[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Helper function for clampToZero\n   * @private\n   */\n  _clampToZero(val) {\n    return Math.abs((val || 0) - 0) <= Number.EPSILON ? 0 : val;\n  }\n\n  // Static Methods\n\n  /**\n   * Creates a new 2D vector from an angle.\n   *\n   * @static\n   * @param {Number}     angle desired angle, in radians. Unaffected by <a href=\"#/p5/angleMode\">angleMode()</a>.\n   * @param {Number}     [length] length of the new vector (defaults to 1).\n   * @return {p5.Vector}       new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngle(0);\n   *\n   *   // Prints \"p5.Vector Object : [1, 0, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngle(0, 30);\n   *\n   *   // Prints \"p5.Vector Object : [30, 0, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black arrow extends from the center of a gray square. It points to the right.');\n   * }\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a p5.Vector with an angle 0 and magnitude 30.\n   *   let v1 = p5.Vector.fromAngle(0, 30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  static fromAngle(angle, length) {\n    if (typeof length === \"undefined\") {\n      length = 1;\n    }\n    return new Vector(length * Math.cos(angle), length * Math.sin(angle), 0);\n  }\n\n  /**\n   * Creates a new 3D vector from a pair of ISO spherical angles.\n   *\n   * @static\n   * @param {Number}     theta    polar angle in radians (zero is up).\n   * @param {Number}     phi      azimuthal angle in radians\n   *                               (zero is out of the screen).\n   * @param {Number}     [length] length of the new vector (defaults to 1).\n   * @return {p5.Vector}          new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngles(0, 0);\n   *\n   *   // Prints \"p5.Vector Object : [0, -1, 0]\" to the console.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100, WEBGL);\n   *\n   *   describe('A light shines on a pink sphere as it orbits.');\n   * }\n   *\n   * function draw() {\n   *   background(0);\n   *\n   *   // Calculate the ISO angles.\n   *   let theta = frameCount *  0.05;\n   *   let phi = 0;\n   *\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.fromAngles(theta, phi, 100);\n   *\n   *   // Create a point light using the p5.Vector.\n   *   let c = color('deeppink');\n   *   pointLight(c, v);\n   *\n   *   // Style the sphere.\n   *   fill(255);\n   *   noStroke();\n   *\n   *   // Draw the sphere.\n   *   sphere(35);\n   * }\n   * </code>\n   * </div>\n   */\n  static fromAngles(theta, phi, length) {\n    if (typeof length === \"undefined\") {\n      length = 1;\n    }\n    const cosPhi = Math.cos(phi);\n    const sinPhi = Math.sin(phi);\n    const cosTheta = Math.cos(theta);\n    const sinTheta = Math.sin(theta);\n\n    return new Vector(\n      length * sinTheta * sinPhi,\n      -length * cosTheta,\n      length * sinTheta * cosPhi\n    );\n  }\n\n  /**\n   * Creates a new 2D unit vector with a random heading.\n   *\n   * @static\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.random2D();\n   *\n   *   // Prints \"p5.Vector Object : [x, y, 0]\" to the console\n   *   // where x and y are small random numbers.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(1);\n   *\n   *   describe('A black arrow in extends from the center of a gray square. It changes direction once per second.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Create a p5.Vector to the center.\n   *   let v0 = createVector(50, 50);\n   *\n   *   // Create a random p5.Vector.\n   *   let v1 = p5.Vector.random2D();\n   *\n   *   // Scale v1 for drawing.\n   *   v1.mult(30);\n   *\n   *   // Draw the black arrow.\n   *   drawArrow(v0, v1, 'black');\n   * }\n   *\n   * // Draws an arrow between two vectors.\n   * function drawArrow(base, vec, myColor) {\n   *   push();\n   *   stroke(myColor);\n   *   strokeWeight(3);\n   *   fill(myColor);\n   *   translate(base.x, base.y);\n   *   line(0, 0, vec.x, vec.y);\n   *   rotate(vec.heading());\n   *   let arrowSize = 7;\n   *   translate(vec.mag() - arrowSize, 0);\n   *   triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n   *   pop();\n   * }\n   * </code>\n   * </div>\n   */\n  static random2D() {\n    return this.fromAngle(Math.random() * TWO_PI);\n  }\n\n  /**\n   * Creates a new 3D unit vector with a random heading.\n   *\n   * @static\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   // Create a p5.Vector object.\n   *   let v = p5.Vector.random3D();\n   *\n   *   // Prints \"p5.Vector Object : [x, y, z]\" to the console\n   *   // where x, y, and z are small random numbers.\n   *   print(v.toString());\n   * }\n   * </code>\n   * </div>\n   */\n  static random3D() {\n    const angle = Math.random() * TWO_PI;\n    const vz = Math.random() * 2 - 1;\n    const vzBase = Math.sqrt(1 - vz * vz);\n    const vx = vzBase * Math.cos(angle);\n    const vy = vzBase * Math.sin(angle);\n    return new Vector(vx, vy, vz);\n  }\n\n  // Returns a copy of a vector.\n  /**\n   * @static\n   * @param  {p5.Vector} v the <a href=\"#/p5.Vector\">p5.Vector</a> to create a copy of\n   * @return {p5.Vector} the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object\n   */\n  static copy(v) {\n    return v.copy(v);\n  }\n\n  // Adds two vectors together and returns a new one.\n  /**\n   * @static\n   * @param  {p5.Vector} v1 A <a href=\"#/p5.Vector\">p5.Vector</a> to add\n   * @param  {p5.Vector} v2 A <a href=\"#/p5.Vector\">p5.Vector</a> to add\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} resulting <a href=\"#/p5.Vector\">p5.Vector</a>.\n   */\n  static add(v1, v2, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.add\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.add(v2);\n    return target;\n  }\n\n  // Returns a vector remainder when it is divided by another vector\n  /**\n   * @static\n   * @param  {p5.Vector} v1 The dividend <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @param  {p5.Vector} v2 The divisor <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} v2\n   * @return {p5.Vector} The resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  static rem(v1, v2) {\n    if (v1 instanceof Vector && v2 instanceof Vector) {\n      let target = v1.copy();\n      target.rem(v2);\n      return target;\n    }\n  }\n\n  /*\n   * Subtracts one <a href=\"#/p5.Vector\">p5.Vector</a> from another and returns a new one.  The second\n   * vector (`v2`) is subtracted from the first (`v1`), resulting in `v1-v2`.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from\n   * @param  {p5.Vector} v2 A <a href=\"#/p5.Vector\">p5.Vector</a> to subtract\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} The resulting <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  static sub(v1, v2, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.sub\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.sub(v2);\n    return target;\n  }\n\n  /**\n   * Multiplies a vector by a scalar and returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} [z]\n   * @return {p5.Vector} resulting new <a href=\"#/p5.Vector\">p5.Vector</a>.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number}  n\n   * @param  {p5.Vector} [target] vector to receive the result.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} [target]\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {Number[]} arr\n   * @param  {p5.Vector} [target]\n   */\n  static mult(v, n, target) {\n    if (!target) {\n      target = v.copy();\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.mult\"\n        );\n      }\n    } else {\n      target.set(v);\n    }\n    target.mult(n);\n    return target;\n  }\n\n  /**\n   * Rotates the vector (only 2D vectors) by the given angle; magnitude remains the same. Returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number} angle\n   * @param  {p5.Vector} [target] The vector to receive the result\n   */\n  static rotate(v, a, target) {\n    if (arguments.length === 2) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.rotate\"\n        );\n      }\n      target.set(v);\n    }\n    target.rotate(a);\n    return target;\n  }\n\n  /**\n   * Divides a vector by a scalar and returns a new vector.\n   */\n  /**\n   * @static\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} [z]\n   * @return {p5.Vector} The resulting new <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v\n   * @param  {Number}  n\n   * @param  {p5.Vector} [target] The vector to receive the result\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {p5.Vector} v1\n   * @param  {p5.Vector} [target]\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v0\n   * @param  {Number[]} arr\n   * @param  {p5.Vector} [target]\n   */\n  static div(v, n, target) {\n    if (!target) {\n      target = v.copy();\n\n      if (arguments.length === 3) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.div\"\n        );\n      }\n    } else {\n      target.set(v);\n    }\n    target.div(n);\n    return target;\n  }\n\n  /**\n   * Calculates the dot product of two vectors.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 first <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @param  {p5.Vector} v2 second <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}     dot product.\n   */\n  static dot(v1, v2) {\n    return v1.dot(v2);\n  }\n\n  /**\n   * Calculates the cross product of two vectors.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 first <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @param  {p5.Vector} v2 second <a href=\"#/p5.Vector\">p5.Vector</a>.\n   * @return {Number}     cross product.\n   */\n  static cross(v1, v2) {\n    return v1.cross(v2);\n  }\n\n  /**\n   * Calculates the Euclidean distance between two points (considering a\n   * point as a vector object).\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v1 The first <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @param  {p5.Vector} v2 The second <a href=\"#/p5.Vector\">p5.Vector</a>\n   * @return {Number}     The distance\n   */\n  static dist(v1, v2) {\n    return v1.dist(v2);\n  }\n\n  /**\n   * Linear interpolate a vector to another vector and return the result as a\n   * new vector.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v1\n   * @param {p5.Vector} v2\n   * @param {Number} amt\n   * @param {p5.Vector} [target] The vector to receive the result\n   * @return {p5.Vector}      The lerped value\n   */\n  static lerp(v1, v2, amt, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 4) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.lerp\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.lerp(v2, amt);\n    return target;\n  }\n\n  /**\n   * Performs spherical linear interpolation with the other vector\n   * and returns the resulting vector.\n   * This works in both 3D and 2D. As for 2D, the result of slerping\n   * between 2D vectors is always a 2D vector.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v1 old vector.\n   * @param {p5.Vector} v2 new vector.\n   * @param {Number} amt\n   * @param {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} slerped vector between v1 and v2\n   */\n  static slerp(v1, v2, amt, target) {\n    if (!target) {\n      target = v1.copy();\n      if (arguments.length === 4) {\n        p5._friendlyError(\n          \"The target parameter is undefined, it should be of type p5.Vector\",\n          \"p5.Vector.slerp\"\n        );\n      }\n    } else {\n      target.set(v1);\n    }\n    target.slerp(v2, amt);\n    return target;\n  }\n\n  /**\n   * Calculates the magnitude (length) of the vector and returns the result as\n   * a float (this is simply the equation `sqrt(x*x + y*y + z*z)`.)\n   */\n  /**\n   * @static\n   * @param {p5.Vector} vecT The vector to return the magnitude of\n   * @return {Number}        The magnitude of vecT\n   */\n  static mag(vecT) {\n    return vecT.mag();\n  }\n\n  /**\n   * Calculates the squared magnitude of the vector and returns the result\n   * as a float (this is simply the equation <em>(x\\*x + y\\*y + z\\*z)</em>.)\n   * Faster if the real length is not required in the\n   * case of comparing vectors, etc.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} vecT the vector to return the squared magnitude of\n   * @return {Number}        the squared magnitude of vecT\n   */\n  static magSq(vecT) {\n    return vecT.magSq();\n  }\n\n  /**\n   * Normalize the vector to length 1 (make it a unit vector).\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  The vector to normalize\n   * @param {p5.Vector} [target] The vector to receive the result\n   * @return {p5.Vector}   The vector v, normalized to a length of 1\n   */\n  static normalize(v, target) {\n    if (arguments.length < 2) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.normalize\"\n        );\n      }\n      target.set(v);\n    }\n    return target.normalize();\n  }\n\n  /**\n   * Limit the magnitude of the vector to the value used for the <b>max</b>\n   * parameter.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  the vector to limit\n   * @param {Number}    max\n   * @param {p5.Vector} [target] the vector to receive the result (Optional)\n   * @return {p5.Vector} v with a magnitude limited to max\n   */\n  static limit(v, max, target) {\n    if (arguments.length < 3) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.limit\"\n        );\n      }\n      target.set(v);\n    }\n    return target.limit(max);\n  }\n\n  /**\n   * Set the magnitude of the vector to the value used for the <b>len</b>\n   * parameter.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v  the vector to set the magnitude of\n   * @param {Number}    len\n   * @param {p5.Vector} [target] the vector to receive the result (Optional)\n   * @return {p5.Vector} v with a magnitude set to len\n   */\n  static setMag(v, len, target) {\n    if (arguments.length < 3) {\n      target = v.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.setMag\"\n        );\n      }\n      target.set(v);\n    }\n    return target.setMag(len);\n  }\n\n  /**\n   * Calculate the angle of rotation for this vector (only 2D vectors).\n   * p5.Vectors created using <a href=\"#/p5/createVector\">createVector()</a>\n   * will take the current <a href=\"#/p5/angleMode\">angleMode</a> into\n   * consideration, and give the angle in radians or degrees accordingly.\n   */\n  /**\n   * @static\n   * @param {p5.Vector} v the vector to find the angle of\n   * @return {Number} the angle of rotation\n   */\n  static heading(v) {\n    return v.heading();\n  }\n\n  /**\n   * Calculates and returns the angle between two vectors. This function will take\n   * the <a href=\"#/p5/angleMode\">angleMode</a> on v1 into consideration, and\n   * give the angle in radians or degrees accordingly.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector}    v1 the first vector.\n   * @param  {p5.Vector}    v2 the second vector.\n   * @return {Number}       angle between the two vectors.\n   */\n  static angleBetween(v1, v2) {\n    return v1.angleBetween(v2);\n  }\n\n  /**\n   * Reflect a vector about a normal to a line in 2D, or about a normal to a\n   * plane in 3D.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} incidentVector vector to be reflected.\n   * @param  {p5.Vector} surfaceNormal\n   * @param  {p5.Vector} [target] vector to receive the result.\n   * @return {p5.Vector} the reflected vector\n   */\n  static reflect(incidentVector, surfaceNormal, target) {\n    if (arguments.length < 3) {\n      target = incidentVector.copy();\n    } else {\n      if (!(target instanceof Vector)) {\n        p5._friendlyError(\n          \"The target parameter should be of type p5.Vector\",\n          \"p5.Vector.reflect\"\n        );\n      }\n      target.set(incidentVector);\n    }\n    return target.reflect(surfaceNormal);\n  }\n\n  /**\n   * Return a representation of this vector as a float array. This is only\n   * for temporary use. If used in any other fashion, the contents should be\n   * copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b>\n   * method to copy into your own vector.\n   */\n  /**\n   * @static\n   * @param  {p5.Vector} v the vector to convert to an array\n   * @return {Number[]} an Array with the 3 values\n   */\n  static array(v) {\n    return v.array();\n  }\n\n  /**\n   * Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>\n   */\n  /**\n   * @static\n   * @param {p5.Vector|Array} v1 the first vector to compare\n   * @param {p5.Vector|Array} v2 the second vector to compare\n   * @return {Boolean}\n   */\n  static equals(v1, v2) {\n    let v;\n    if (v1 instanceof Vector) {\n      v = v1;\n    } else if (v1 instanceof Array) {\n      v = new Vector().set(v1);\n    } else {\n      p5._friendlyError(\n        \"The v1 parameter should be of type Array or p5.Vector\",\n        \"p5.Vector.equals\"\n      );\n    }\n    return v.equals(v2);\n  }\n}\n\nfunction vector(p5, fn) {\n  /**\n   * A class to describe a two or three-dimensional vector.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is like\n   * an arrow pointing in space. Vectors have both magnitude (length) and\n   * direction.\n   *\n   * `p5.Vector` objects are often used to program motion because they simplify\n   * the math. For example, a moving ball has a position and a velocity.\n   * Position describes where the ball is in space. The ball's position vector\n   * extends from the origin to the ball's center. Velocity describes the ball's\n   * speed and the direction it's moving. If the ball is moving straight up, its\n   * velocity vector points straight up. Adding the ball's velocity vector to\n   * its position vector moves it, as in `pos.add(vel)`. Vector math relies on\n   * methods inside the `p5.Vector` class.\n   *\n   * Note: <a href=\"#/p5/createVector\">createVector()</a> is the recommended way\n   * to make an instance of this class.\n   *\n   * @class p5.Vector\n   * @param {Number} [x] x component of the vector.\n   * @param {Number} [y] y component of the vector.\n   * @param {Number} [z] z component of the vector.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(25, 25);\n   *   let p2 = createVector(75, 75);\n   *\n   *   // Style the points.\n   *   strokeWeight(5);\n   *\n   *   // Draw the first point using a p5.Vector.\n   *   point(p1);\n   *\n   *   // Draw the second point using a p5.Vector's components.\n   *   point(p2.x, p2.y);\n   *\n   *   describe('Two black dots on a gray square, one at the top left and the other at the bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pos;\n   * let vel;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   pos = createVector(50, 100);\n   *   vel = createVector(0, -1);\n   *\n   *   describe('A black dot moves from bottom to top on a gray square. The dot reappears at the bottom when it reaches the top.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Add velocity to position.\n   *   pos.add(vel);\n   *\n   *   // If the dot reaches the top of the canvas,\n   *   // restart from the bottom.\n   *   if (pos.y < 0) {\n   *     pos.y = 100;\n   *   }\n   *\n   *   // Draw the dot.\n   *   strokeWeight(5);\n   *   point(pos);\n   * }\n   * </code>\n   * </div>\n   */\n  p5.Vector = Vector;\n\n  /**\n   * The x component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property x\n   * @name x\n   */\n\n  /**\n   * The y component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property y\n   * @name y\n   */\n\n  /**\n   * The z component of the vector\n   * @type {Number}\n   * @for p5.Vector\n   * @property z\n   * @name z\n   */\n}\n\nif (typeof p5 !== \"undefined\") {\n  vector(p5, p5.prototype);\n}\n\nexport { Vector, vector as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3692, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/Matrices/MatrixInterface.js"],"sourcesContent":["let GLMAT_ARRAY_TYPE = Array;\nlet isMatrixArray = (x) => Array.isArray(x);\nif (typeof Float32Array !== \"undefined\") {\n  GLMAT_ARRAY_TYPE = Float32Array;\n  isMatrixArray = (x) => Array.isArray(x) || x instanceof Float32Array;\n}\nclass MatrixInterface {\n  // Private field to store the matrix\n  #matrix = null;\n  constructor(...args) {\n    if (this.constructor === MatrixInterface) {\n      throw new Error(\"Class is of abstract type and can't be instantiated\");\n    }\n    const methods = [\n      \"add\",\n      \"setElement\",\n      \"reset\",\n      \"set\",\n      \"get\",\n      \"copy\",\n      \"clone\",\n      \"diagonal\",\n      \"row\",\n      \"column\",\n      \"transpose\",\n      \"mult\",\n      \"multiplyVec\",\n      \"invert\",\n      \"createSubMatrix3x3\",\n      \"inverseTranspose4x4\",\n      \"apply\",\n      \"scale\",\n      \"rotate4x4\",\n      \"translate\",\n      \"rotateX\",\n      \"rotateY\",\n      \"rotateZ\",\n      \"perspective\",\n      \"ortho\",\n      \"multiplyVec4\",\n      \"multiplyPoint\",\n      \"multiplyAndNormalizePoint\",\n      \"multiplyDirection\",\n      \"multiplyVec3\",\n    ];\n\n    methods.forEach((method) => {\n      if (this[method] === undefined) {\n        throw new Error(`${method}() method must be implemented`);\n      }\n    });\n  }\n}\n\nexport { GLMAT_ARRAY_TYPE, MatrixInterface, isMatrixArray };\n"],"names":[],"mappings":";;;;;AAAA,IAAI,mBAAmB;AACvB,IAAI,gBAAgB,CAAC,IAAM,MAAM,OAAO,CAAC;AACzC,IAAI,OAAO,iBAAiB,aAAa;IACvC,mBAAmB;IACnB,gBAAgB,CAAC,IAAM,MAAM,OAAO,CAAC,MAAM,aAAa;AAC1D;AACA,MAAM;IACJ,oCAAoC;IACpC,CAAA,MAAO,GAAG,KAAK;IACf,YAAY,GAAG,IAAI,CAAE;QACnB,IAAI,IAAI,CAAC,WAAW,KAAK,iBAAiB;YACxC,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,UAAU;YACd;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,QAAQ,OAAO,CAAC,CAAC;YACf,IAAI,IAAI,CAAC,OAAO,KAAK,WAAW;gBAC9B,MAAM,IAAI,MAAM,GAAG,OAAO,6BAA6B,CAAC;YAC1D;QACF;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3756, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/Matrices/Matrix.js"],"sourcesContent":["import { Vector } from '../p5.Vector.js';\nimport { MatrixInterface } from './MatrixInterface.js';\nimport '../../constants-C-g_eAdC.js';\n\n/**\n * @module Math\n */\n\n\nconst isPerfectSquare = (arr) => {\n  const sqDimention = Math.sqrt(Array.from(arr).length);\n  if (sqDimention % 1 !== 0) {\n    throw new Error(\"Array length must be a perfect square.\");\n  }\n  return true;\n};\n\nlet GLMAT_ARRAY_TYPE = Array;\nlet isMatrixArray = (x) => Array.isArray(x);\nif (typeof Float32Array !== \"undefined\") {\n  GLMAT_ARRAY_TYPE = Float32Array;\n  isMatrixArray = (x) => Array.isArray(x) || x instanceof Float32Array;\n}\n\nclass Matrix extends MatrixInterface {\n  matrix;\n  #sqDimention;\n\n  constructor(...args) {\n    super(...args);\n    // This is default behavior when object\n    // instantiated using createMatrix()\n    if (isMatrixArray(args[0]) && isPerfectSquare(args[0])) {\n      const sqDimention = Math.sqrt(Array.from(args[0]).length);\n      this.#sqDimention = sqDimention;\n      this.matrix = GLMAT_ARRAY_TYPE.from(args[0]);\n    } else if (typeof args[0] === \"number\") {\n      this.#sqDimention = Number(args[0]);\n      this.matrix = this.#createIdentityMatrix(args[0]);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the 3x3 matrix if the dimensions are 3x3, otherwise returns `undefined`.\n   *\n   * This method returns the matrix if its dimensions are 3x3.\n   * If the matrix is not 3x3, it returns `undefined`.\n   *\n   * @returns {Array|undefined} The 3x3 matrix or `undefined` if the matrix is not 3x3.\n   */\n  get mat3() {\n    if (this.#sqDimention === 3) {\n      return this.matrix;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Returns the 4x4 matrix if the dimensions are 4x4, otherwise returns `undefined`.\n   *\n   * This method returns the matrix if its dimensions are 4x4.\n   * If the matrix is not 4x4, it returns `undefined`.\n   *\n   * @returns {Array|undefined} The 4x4 matrix or `undefined` if the matrix is not 4x4.\n   */\n  get mat4() {\n    if (this.#sqDimention === 4) {\n      return this.matrix;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Adds the corresponding elements of the given matrix to this matrix, if the dimentions are the same.\n   *\n   * @param {Matrix} matrix - The matrix to add to this matrix. It must have the same dimensions as this matrix.\n   * @returns {Matrix} The resulting matrix after addition.\n   * @throws {Error} If the matrices do not have the same dimensions.\n   *\n   * @example\n   * const matrix1 = new p5.Matrix([1, 2, 3]);\n   * const matrix2 = new p5.Matrix([4, 5, 6]);\n   * matrix1.add(matrix2); // matrix1 is now [5, 7, 9]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4]);\n   *   const matrix2 = new p5.Matrix([5, 6, 7, 8]);\n   *   matrix1.add(matrix2);\n   *   console.log(matrix1.matrix); // Output: [6, 8, 10, 12]\n   * }\n   * </code></div>\n   */\n  add(matrix) {\n    if (this.matrix.length !== matrix.matrix.length) {\n      throw new Error(\"Matrices must be of the same dimension to add.\");\n    }\n    for (let i = 0; i < this.matrix.length; i++) {\n      this.matrix[i] += matrix.matrix[i];\n    }\n    return this;\n  }\n\n  /**\n   * Sets the value of a specific element in the matrix in column-major order.\n   *\n   * A matrix is stored in column-major order, meaning elements are arranged column by column.\n   * This function allows you to update or change the value of a specific element\n   * in the matrix by specifying its index in the column-major order and the new value.\n   *\n   * Parameters:\n   * - `index` (number): The position in the matrix where the value should be set.\n   *   Indices start from 0 and follow column-major order.\n   * - `value` (any): The new value you want to assign to the specified element.\n   *\n   * Example:\n   * If you have the following 3x3 matrix stored in column-major order:\n   * ```\n   * [\n   *   1, 4, 7,  // Column 1\n   *   2, 5, 8,  // Column 2\n   *   3, 6, 9   // Column 3\n   * ]\n   * ```\n   * Calling `setElement(4, 10)` will update the element at index 4\n   * (which corresponds to row 2, column 2 in row-major order) to `10`.\n   * The updated matrix will look like this:\n   * ```\n   * [\n   *   1, 4, 7,\n   *   2, 10, 8,\n   *   3, 6, 9\n   * ]\n   * ```\n   *\n   * This function is useful for modifying specific parts of the matrix without\n   * having to recreate the entire structure.\n   *\n   * @param {Number} index - The position in the matrix where the value should be set.\n   *                         Must be a non-negative integer less than the length of the matrix.\n   * @param {Number} value - The new value to be assigned to the specified position in the matrix.\n   * @returns {Matrix} The current instance of the Matrix, allowing for method chaining.\n   *\n   * @example\n   * // Assuming matrix is an instance of Matrix with initial values [1, 2, 3, 4] matrix.setElement(2, 99);\n   * // Now the matrix values are [1, 2, 99, 4]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4]);\n   *   matrix.setElement(2, 99);\n   *   console.log(matrix.matrix); // Output: [1, 2, 99, 4]\n   * }\n   * </code></div>\n   */\n  setElement(index, value) {\n    if (index >= 0 && index < this.matrix.length) {\n      this.matrix[index] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Resets the current matrix to an identity matrix.\n   *\n   * This method replaces the current matrix with an identity matrix of the same dimensions.\n   * An identity matrix is a square matrix with ones on the main diagonal and zeros elsewhere.\n   * This is useful for resetting transformations or starting fresh with a clean matrix.\n   *\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Resetting a 4x4 matrix to an identity matrix\n   * const matrix = new p5.Matrix(4);\n   * matrix.scale(2, 2, 2); // Apply some transformations\n   * console.log(matrix.matrix); // Output: Transformed matrix\n   * matrix.reset(); // Reset to identity matrix\n   * console.log(matrix.matrix); // Output: Identity matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4);\n   *   matrix.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Before reset:\", matrix.matrix);\n   *   matrix.reset(); // Reset to identity matrix\n   *   console.log(\"After reset:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  reset() {\n    this.matrix = this.#createIdentityMatrix(this.#sqDimention);\n    return this;\n  }\n\n  /**\n   * Replace the entire contents of a NxN matrix.\n   *\n   * This method allows you to replace the values of the current matrix with\n   * those from another matrix, an array, or individual arguments. The input\n   * can be a `Matrix` instance, an array of numbers, or individual numbers\n   * that match the dimensions of the current matrix. The values are copied\n   * without referencing the source object, ensuring that the original input\n   * remains unchanged.\n   *\n   * If the input dimensions do not match the current matrix, an error will\n   * be thrown to ensure consistency.\n   *\n   * @param {Matrix|Float32Array|Number[]} [inMatrix] - The input matrix, array,\n   * or individual numbers to replace the current matrix values.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for\n   * method chaining.\n   *\n   * @example\n   * // Replacing the contents of a matrix with another matrix\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4]);\n   * const matrix2 = new p5.Matrix([5, 6, 7, 8]);\n   * matrix1.set(matrix2);\n   * console.log(matrix1.matrix); // Output: [5, 6, 7, 8]\n   *\n   * // Replacing the contents of a matrix with an array\n   * const matrix = new p5.Matrix([1, 2, 3, 4]);\n   * matrix.set([9, 10, 11, 12]);\n   * console.log(matrix.matrix); // Output: [9, 10, 11, 12]\n   *\n   * // Replacing the contents of a matrix with individual numbers\n   * const matrix = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   * matrix.set(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n   * console.log(matrix.matrix); // Output: [1, 2, 3, ..., 16]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4]);\n   *   console.log(\"Before set:\", matrix.matrix);\n   *   matrix.set([5, 6, 7, 8]);\n   *   console.log(\"After set:\", matrix.matrix); // Output: [5, 6, 7, 8]\n   * }\n   * </code></div>\n   */\n  set(inMatrix) {\n    let refArray = GLMAT_ARRAY_TYPE.from([...arguments]);\n    if (inMatrix instanceof Matrix) {\n      refArray = GLMAT_ARRAY_TYPE.from(inMatrix.matrix);\n    } else if (isMatrixArray(inMatrix)) {\n      refArray = GLMAT_ARRAY_TYPE.from(inMatrix);\n    }\n    if (refArray.length !== this.matrix.length) {\n      p5._friendlyError(\n        `Expected same dimensions values but received different ${refArray.length}.`,\n        \"p5.Matrix.set\"\n      );\n      return this;\n    }\n    this.matrix = refArray;\n    return this;\n  }\n\n  /**\n   * Gets a copy of the matrix, returns a p5.Matrix object.\n   *\n   * This method creates a new instance of the `Matrix` class and copies the\n   * current matrix values into it. The returned matrix is independent of the\n   * original, meaning changes to the copy will not affect the original matrix.\n   *\n   * This is useful when you need to preserve the current state of a matrix\n   * while performing operations on a duplicate.\n   *\n   * @return {p5.Matrix} A new instance of the `Matrix` class containing the\n   *                     same values as the original matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4]);\n   *   const copiedMatrix = originalMatrix.get();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix); // Output: [1, 2, 3, 4]\n   *   console.log(\"Copied Matrix:\", copiedMatrix.matrix); // Output: [1, 2, 3, 4]\n   *\n   *   // Modify the copied matrix\n   *   copiedMatrix.setElement(2, 99);\n   *   console.log(\"Modified Copied Matrix:\", copiedMatrix.matrix); // Output: [1, 2, 99, 4]\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix); // Output: [1, 2, 3, 4]\n   * }\n   * </code></div>\n   */\n  get() {\n    return new Matrix(this.matrix); // TODO: Pass p5\n  }\n\n  /**\n   * Return a copy of this matrix.\n   * If this matrix is 4x4, a 4x4 matrix with exactly the same entries will be\n   * generated. The same is true if this matrix is 3x3 or any NxN matrix.\n   *\n   * This method is useful when you need to preserve the current state of a matrix\n   * while performing operations on a duplicate. The returned matrix is independent\n   * of the original, meaning changes to the copy will not affect the original matrix.\n   *\n   * @return {p5.Matrix}   The result matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const copiedMatrix = originalMatrix.copy();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix);\n   *   console.log(\"Copied Matrix:\", copiedMatrix.matrix);\n   *\n   *   // Modify the copied matrix\n   *   copiedMatrix.setElement(4, 99);\n   *   console.log(\"Modified Copied Matrix:\", copiedMatrix.matrix);\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix);\n   * }\n   * </code></div>\n   */\n  copy() {\n    return new Matrix(this.matrix);\n  }\n\n  /**\n   * Creates a copy of the current matrix instance.\n   * This method is useful when you need a duplicate of the matrix\n   * without modifying the original one.\n   *\n   * @returns {Matrix} A new matrix instance that is a copy of the current matrix.\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const originalMatrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const clonedMatrix = originalMatrix.clone();\n   *   console.log(\"Original Matrix:\", originalMatrix.matrix);\n   *   console.log(\"Cloned Matrix:\", clonedMatrix.matrix);\n   *\n   *   // Modify the cloned matrix\n   *   clonedMatrix.setElement(4, 99);\n   *   console.log(\"Modified Cloned Matrix:\", clonedMatrix.matrix);\n   *   console.log(\"Original Matrix remains unchanged:\", originalMatrix.matrix);\n   * }\n   * </code></div>\n   */\n  clone() {\n    return this.copy();\n  }\n\n  /**\n   * Returns the diagonal elements of the matrix in the form of an array.\n   * A NxN matrix will return an array of length N.\n   *\n   * This method extracts the diagonal elements of the matrix, which are the\n   * elements where the row index equals the column index. For example, in a\n   * 3x3 matrix:\n   * ```\n   * [\n   *   1, 2, 3,\n   *   4, 5, 6,\n   *   7, 8, 9\n   * ]\n   * ```\n   * The diagonal elements are [1, 5, 9].\n   *\n   * This is useful for operations that require the main diagonal of a matrix,\n   * such as calculating the trace of a matrix or verifying if a matrix is diagonal.\n   *\n   * @return {Number[]} An array obtained by arranging the diagonal elements\n   *                    of the matrix in ascending order of index.\n   *\n   * @example\n   * // Extracting the diagonal elements of a matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const diagonal = matrix.diagonal(); // [1, 5, 9]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const diagonal = matrix.diagonal();\n   *   console.log(\"Diagonal elements:\", diagonal); // Output: [1, 5, 9]\n   * }\n   * </code></div>\n   */\n  diagonal() {\n    const diagonal = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      diagonal.push(this.matrix[i * (this.#sqDimention + 1)]);\n    }\n    return diagonal;\n  }\n\n  /**\n   * This function is only for 3x3 matrices A function that returns a row vector of a NxN matrix.\n   *\n   * This method extracts a specific row from the matrix and returns it as a `p5.Vector`.\n   * The row is determined by the `columnIndex` parameter, which specifies the column\n   * index of the matrix. This is useful for operations that require working with\n   * individual rows of a matrix, such as row transformations or dot products.\n   *\n   * @param {Number} columnIndex - The index of the column to extract as a row vector.\n   *                               Must be a non-negative integer less than the matrix dimension.\n   * @return {p5.Vector} A `p5.Vector` representing the extracted row of the matrix.\n   *\n   * @example\n   * // Extracting a row vector from a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const rowVector = matrix.row(1); // Returns a vector [2, 5, 8]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const rowVector = matrix.row(1); // Extract the second row (index 1)\n   *   console.log(\"Row Vector:\", rowVector.toString()); // Output: Row Vector: [2, 5, 8]\n   * }\n   * </code></div>\n   */\n  row(columnIndex) {\n    const columnVector = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      columnVector.push(this.matrix[i * this.#sqDimention + columnIndex]);\n    }\n    return new Vector(...columnVector);\n  }\n\n  /**\n   * A function that returns a column vector of a NxN matrix.\n   *\n   * This method extracts a specific column from the matrix and returns it as a `p5.Vector`.\n   * The column is determined by the `rowIndex` parameter, which specifies the row index\n   * of the matrix. This is useful for operations that require working with individual\n   * columns of a matrix, such as column transformations or dot products.\n   *\n   * @param {Number} rowIndex - The index of the row to extract as a column vector.\n   *                             Must be a non-negative integer less than the matrix dimension.\n   * @return {p5.Vector} A `p5.Vector` representing the extracted column of the matrix.\n   *\n   * @example\n   * // Extracting a column vector from a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const columnVector = matrix.column(1); // Returns a vector [4, 5, 6]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const columnVector = matrix.column(1); // Extract the second column (index 1)\n   *   console.log(\"Column Vector:\", columnVector.toString()); // Output: Column Vector: [4, 5, 6]\n   * }\n   * </code></div>\n   */\n  column(rowIndex) {\n    const rowVector = [];\n    for (let i = 0; i < this.#sqDimention; i++) {\n      rowVector.push(this.matrix[rowIndex * this.#sqDimention + i]);\n    }\n    return new Vector(...rowVector);\n  }\n\n  /**\n   * Transposes the given matrix `a` based on the square dimension of the matrix.\n   *\n   * This method rearranges the elements of the matrix such that the rows become columns\n   * and the columns become rows. It handles matrices of different dimensions (4x4, 3x3, NxN)\n   * by delegating to specific transpose methods for each case.\n   *\n   * If no argument is provided, the method transposes the current matrix instance.\n   * If an argument is provided, it transposes the given matrix `a` and updates the current matrix.\n   *\n   * @param {Array} [a] - The matrix to be transposed. It should be a 2D array where each sub-array represents a row.\n   *                      If omitted, the current matrix instance is transposed.\n   * @returns {Matrix} - The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Transposing a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * matrix.transpose();\n   * console.log(matrix.matrix); // Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n   *\n   * // Transposing a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4);\n   * matrix4x4.transpose();\n   * console.log(matrix4x4.matrix); // Output: Transposed 4x4 identity matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   console.log(\"Before transpose:\", matrix.matrix);\n   *   matrix.transpose();\n   *   console.log(\"After transpose:\", matrix.matrix); // Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n   * }\n   * </code></div>\n   */\n  transpose(a) {\n    if (this.#sqDimention === 4) {\n      return this.#transpose4x4(a);\n    } else if (this.#sqDimention === 3) {\n      return this.#transpose3x3(a);\n    } else {\n      return this.#transposeNxN(a);\n    }\n  }\n\n  /**\n   * Multiplies the current matrix with another matrix or matrix-like array.\n   *\n   * This method supports several types of input:\n   * - Another Matrix instance\n   * - A matrix-like array (must be a perfect square, e.g., 4x4 or 3x3)\n   * - Multiple arguments that form a perfect square matrix\n   *\n   * If the input is the same as the current matrix, a copy is made to avoid modifying the original matrix.\n   *\n   * The method determines the appropriate multiplication strategy based on the dimensions of the current matrix\n   * and the input matrix. It supports 3x3, 4x4, and NxN matrices.\n   *\n   * @param {Matrix|Array|...number} multMatrix - The matrix or matrix-like array to multiply with.\n   * @returns {Matrix|undefined} The resulting matrix after multiplication, or undefined if the input is invalid.\n   * @chainable\n   *\n   * @example\n   * // Multiplying two 3x3 matrices\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   * matrix1.mult(matrix2);\n   * console.log(matrix1.matrix); // Output: [30, 24, 18, 84, 69, 54, 138, 114, 90]\n   *\n   * // Multiplying a 4x4 matrix with another 4x4 matrix\n   * const matrix4x4_1 = new p5.Matrix(4); // Identity matrix\n   * const matrix4x4_2 = new p5.Matrix([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 3, 1]);\n   * matrix4x4_1.mult(matrix4x4_2);\n   * console.log(matrix4x4_1.matrix); // Output: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 3, 1]\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   *   console.log(\"Before multiplication:\", matrix1.matrix);\n   *   matrix1.mult(matrix2);\n   *   console.log(\"After multiplication:\", matrix1.matrix); // Output: [30, 24, 18, 84, 69, 54, 138, 114, 90]\n   * }\n   * </code></div>\n   */\n  mult(multMatrix) {\n    let _src;\n    if (multMatrix === this || multMatrix === this.matrix) {\n      _src = this.copy().matrix; // only need to allocate in this rare case\n    } else if (multMatrix instanceof Matrix) {\n      _src = multMatrix.matrix;\n    } else if (isMatrixArray(multMatrix) && isPerfectSquare(multMatrix)) {\n      _src = multMatrix;\n    } else if (isPerfectSquare(arguments)) {\n      _src = Array.from(arguments);\n    } else ;\n    if (this.#sqDimention === 4 && _src.length === 16) {\n      return this.#mult4x4(_src);\n    } else if (this.#sqDimention === 3 && _src.length === 9) {\n      return this.#mult3x3(_src);\n    } else {\n      return this.#multNxN(_src);\n    }\n  }\n\n  /**\n   * Takes a vector and returns the vector resulting from multiplying to that vector by this matrix from left. This function is only for 3x3 matrices.\n   *\n   * This method applies the current 3x3 matrix to a given vector, effectively\n   * transforming the vector using the matrix. The resulting vector is returned\n   * as a new vector or stored in the provided target vector.\n   *\n   * @param {p5.Vector} multVector - The vector to which this matrix applies.\n   * @param {p5.Vector} [target] - The vector to receive the result. If not provided,\n   *                               a copy of the input vector will be created and returned.\n   * @return {p5.Vector} - The transformed vector after applying the matrix.\n   *\n   * @example\n   * // Multiplying a 3x3 matrix with a vector\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const vector = new p5.Vector(1, 2, 3);\n   * const result = matrix.multiplyVec(vector);\n   * console.log(result.toString()); // Output: Transformed vector\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   const result = matrix.multiplyVec(vector);\n   *   console.log(\"Original Vector:\", vector.toString()); // Output : Original Vector: [1, 2, 3]\n   *   console.log(\"Transformed Vector:\", result.toString()); // Output : Transformed Vector: [30, 36, 42]\n   * }\n   * </code></div>\n   */\n  multiplyVec(multVector, target) {\n    if (target === undefined) {\n      target = multVector.copy();\n    }\n    for (let i = 0; i < this.#sqDimention; i++) {\n      target.values[i] = this.row(i).dot(multVector);\n    }\n    return target;\n  }\n\n  /**\n   * Inverts a given matrix.\n   *\n   * This method inverts a matrix based on its dimensions. Currently, it supports\n   * 3x3 and 4x4 matrices. If the matrix dimension is greater than 4, an error is thrown.\n   *\n   * For 4x4 matrices, it uses a specialized algorithm to compute the inverse.\n   * For 3x3 matrices, it uses a different algorithm optimized for smaller matrices.\n   *\n   * If the matrix is singular (non-invertible), the method will return `null`.\n   *\n   * @param {Array} a - The matrix to be inverted. It should be a 2D array representing the matrix.\n   * @returns {Array|null} - The inverted matrix, or `null` if the matrix is singular.\n   * @throws {Error} - Throws an error if the matrix dimension is greater than 4.\n   *\n   * @example\n   * // Inverting a 3x3 matrix\n   * const matrix = new p5.Matrix([1, 2, 3, 0, 1, 4, 5, 6, 0]);\n   * const invertedMatrix = matrix.invert();\n   * console.log(invertedMatrix.matrix); // Output: Inverted 3x3 matrix\n   *\n   * // Inverting a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4); // Identity matrix\n   * matrix4x4.scale(2, 2, 2);\n   * const invertedMatrix4x4 = matrix4x4.invert();\n   * console.log(invertedMatrix4x4.matrix); // Output: Inverted 4x4 matrix\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix([1, 2, 3, 0, 1, 4, 5, 6, 0]);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *   const invertedMatrix = matrix.invert();\n   *   if (invertedMatrix) {\n   *     console.log(\"Inverted Matrix:\", invertedMatrix.matrix);\n   *   } else {\n   *     console.log(\"Matrix is singular and cannot be inverted.\");\n   *   }\n   * }\n   * </code></div>\n   */\n  invert(a) {\n    if (this.#sqDimention === 4) {\n      return this.#invert4x4(a);\n    } else if (this.#sqDimention === 3) {\n      return this.#invert3x3(a);\n    } else {\n      throw new Error(\n        \"Invert is not implemented for N>4 at the moment, we are working on it\"\n      );\n    }\n  }\n\n  /**\n   * Creates a 3x3 matrix whose entries are the top left 3x3 part and returns it. This function is only for 4x4 matrices.\n   *\n   * This method extracts the top-left 3x3 portion of a 4x4 matrix and creates a new\n   * 3x3 matrix from it. This is particularly useful in 3D graphics for operations\n   * that require only the rotational or scaling components of a transformation matrix.\n   *\n   * If the current matrix is not 4x4, an error is thrown to ensure the method is used\n   * correctly. The resulting 3x3 matrix is independent of the original matrix, meaning\n   * changes to the new matrix will not affect the original.\n   *\n   * @return {p5.Matrix} A new 3x3 matrix containing the top-left portion of the original 4x4 matrix.\n   * @throws {Error} If the current matrix is not 4x4.\n   *\n   * @example\n   * // Extracting a 3x3 submatrix from a 4x4 matrix\n   * const matrix4x4 = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   * matrix4x4.scale(2, 2, 2); // Apply scaling transformation\n   * const subMatrix3x3 = matrix4x4.createSubMatrix3x3();\n   * console.log(\"Original 4x4 Matrix:\", matrix4x4.matrix);\n   * console.log(\"Extracted 3x3 Submatrix:\", subMatrix3x3.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix4x4 = new p5.Matrix(4); // Creates a 4x4 identity matrix\n   *   matrix4x4.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Original 4x4 Matrix:\", matrix4x4.matrix);\n   *\n   *   const subMatrix3x3 = matrix4x4.createSubMatrix3x3();\n   *   console.log(\"Extracted 3x3 Submatrix:\", subMatrix3x3.matrix);\n   * }\n   * </code></div>\n   */\n  createSubMatrix3x3() {\n    if (this.#sqDimention === 4) {\n      const result = new Matrix(3);\n      result.mat3[0] = this.matrix[0];\n      result.mat3[1] = this.matrix[1];\n      result.mat3[2] = this.matrix[2];\n      result.mat3[3] = this.matrix[4];\n      result.mat3[4] = this.matrix[5];\n      result.mat3[5] = this.matrix[6];\n      result.mat3[6] = this.matrix[8];\n      result.mat3[7] = this.matrix[9];\n      result.mat3[8] = this.matrix[10];\n      return result;\n    } else {\n      throw new Error(\"Matrix dimension must be 4 to create a 3x3 submatrix.\");\n    }\n  }\n\n  /**\n   * Converts a 4×4 matrix to its 3×3 inverse transpose transform.\n   * This is commonly used in MVMatrix to NMatrix conversions, particularly\n   * in 3D graphics for transforming normal vectors.\n   *\n   * This method extracts the top-left 3×3 portion of a 4×4 matrix, inverts it,\n   * and then transposes the result. If the matrix is singular (non-invertible),\n   * the resulting matrix will be zeroed out.\n   *\n   * @param  {p5.Matrix} mat4 - The 4×4 matrix to be converted.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   * @throws {Error} If the current matrix is not 3×3.\n   *\n   * @example\n   * // Converting a 4×4 matrix to its 3×3 inverse transpose\n   * const mat4 = new p5.Matrix(4); // Create a 4×4 identity matrix\n   * mat4.scale(2, 2, 2); // Apply scaling transformation\n   * const mat3 = new p5.Matrix(3); // Create a 3×3 matrix\n   * mat3.inverseTranspose4x4(mat4);\n   * console.log(\"Converted 3×3 Matrix:\", mat3.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const mat4 = new p5.Matrix(4); // Create a 4×4 identity matrix\n   *   mat4.scale(2, 2, 2); // Apply scaling transformation\n   *   console.log(\"Original 4×4 Matrix:\", mat4.matrix);\n   *\n   *   const mat3 = new p5.Matrix(3); // Create a 3×3 matrix\n   *   mat3.inverseTranspose4x4(mat4);\n   *   console.log(\"Converted 3×3 Matrix:\", mat3.matrix);\n   * }\n   * </code></div>\n   */\n  inverseTranspose4x4({ mat4 }) {\n    if (this.#sqDimention !== 3) {\n      throw new Error(\"This function only works with 3×3 matrices.\");\n    } else {\n      // Convert mat4 -> mat3 by extracting the top-left 3×3 portion\n      this.matrix[0] = mat4[0];\n      this.matrix[1] = mat4[1];\n      this.matrix[2] = mat4[2];\n      this.matrix[3] = mat4[4];\n      this.matrix[4] = mat4[5];\n      this.matrix[5] = mat4[6];\n      this.matrix[6] = mat4[8];\n      this.matrix[7] = mat4[9];\n      this.matrix[8] = mat4[10];\n    }\n\n    const inverse = this.invert();\n    // Check if inversion succeeded\n    if (inverse) {\n      inverse.transpose(this.matrix);\n    } else {\n      // In case of singularity, zero out the matrix\n      for (let i = 0; i < 9; i++) {\n        this.matrix[i] = 0;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Applies a transformation matrix to the current matrix.\n   *\n   * This method multiplies the current matrix by another matrix, which can be provided\n   * in several forms: another Matrix instance, an array representing a matrix, or as\n   * individual arguments representing the elements of a 4x4 matrix.\n   *\n   * This operation is useful for combining transformations such as translation, rotation,\n   * scaling, and perspective projection into a single matrix. By applying a transformation\n   * matrix, you can modify the current matrix to represent a new transformation.\n   *\n   * @param {Matrix|Array|number} multMatrix - The matrix to multiply with. This can be:\n   *   - An instance of the Matrix class.\n   *   - An array of 16 numbers representing a 4x4 matrix.\n   *   - 16 individual numbers representing the elements of a 4x4 matrix.\n   * @returns {Matrix} The current matrix after applying the transformation.\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   * // Assuming `matrix` is an instance of Matrix\n   * const anotherMatrix = new p5.Matrix(4);\n   * const anotherMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n   * matrix.apply(anotherMatrix);\n   *\n   * // Applying a transformation using an array\n   * const matrixArray = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n   * matrix.apply(matrixArray);\n   *\n   * // Applying a transformation using individual arguments\n   * matrix.apply(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n   *\n   *\n   *   // Create a 4x4 identity matrix\n   *   const matrix = new p5.Matrix(4);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Create a scaling transformation matrix\n   *   const scalingMatrix = new p5.Matrix([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1]);\n   *\n   *   // Apply the scaling transformation\n   *   matrix.apply(scalingMatrix);\n   *   console.log(\"After Scaling Transformation:\", matrix.matrix);\n   *\n   *   // Apply a translation transformation using an array\n   *   const translationMatrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 5, 5, 5, 1];\n   *   matrix.apply(translationMatrix);\n   *   console.log(\"After Translation Transformation:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  apply(multMatrix) {\n    let _src;\n\n    if (multMatrix === this || multMatrix === this.matrix) {\n      _src = this.copy().matrix; // only need to allocate in this rare case\n    } else if (multMatrix instanceof Matrix) {\n      _src = multMatrix.matrix;\n    } else if (isMatrixArray(multMatrix)) {\n      _src = multMatrix;\n    } else if (arguments.length === 16) {\n      _src = arguments;\n    } else {\n      return; // nothing to do.\n    }\n\n    const mat4 = this.matrix;\n\n    // each row is used for the multiplier\n    const m0 = mat4[0];\n    const m4 = mat4[4];\n    const m8 = mat4[8];\n    const m12 = mat4[12];\n    mat4[0] = _src[0] * m0 + _src[1] * m4 + _src[2] * m8 + _src[3] * m12;\n    mat4[4] = _src[4] * m0 + _src[5] * m4 + _src[6] * m8 + _src[7] * m12;\n    mat4[8] = _src[8] * m0 + _src[9] * m4 + _src[10] * m8 + _src[11] * m12;\n    mat4[12] = _src[12] * m0 + _src[13] * m4 + _src[14] * m8 + _src[15] * m12;\n\n    const m1 = mat4[1];\n    const m5 = mat4[5];\n    const m9 = mat4[9];\n    const m13 = mat4[13];\n    mat4[1] = _src[0] * m1 + _src[1] * m5 + _src[2] * m9 + _src[3] * m13;\n    mat4[5] = _src[4] * m1 + _src[5] * m5 + _src[6] * m9 + _src[7] * m13;\n    mat4[9] = _src[8] * m1 + _src[9] * m5 + _src[10] * m9 + _src[11] * m13;\n    mat4[13] = _src[12] * m1 + _src[13] * m5 + _src[14] * m9 + _src[15] * m13;\n\n    const m2 = mat4[2];\n    const m6 = mat4[6];\n    const m10 = mat4[10];\n    const m14 = mat4[14];\n    mat4[2] = _src[0] * m2 + _src[1] * m6 + _src[2] * m10 + _src[3] * m14;\n    mat4[6] = _src[4] * m2 + _src[5] * m6 + _src[6] * m10 + _src[7] * m14;\n    mat4[10] = _src[8] * m2 + _src[9] * m6 + _src[10] * m10 + _src[11] * m14;\n    mat4[14] = _src[12] * m2 + _src[13] * m6 + _src[14] * m10 + _src[15] * m14;\n\n    const m3 = mat4[3];\n    const m7 = mat4[7];\n    const m11 = mat4[11];\n    const m15 = mat4[15];\n    mat4[3] = _src[0] * m3 + _src[1] * m7 + _src[2] * m11 + _src[3] * m15;\n    mat4[7] = _src[4] * m3 + _src[5] * m7 + _src[6] * m11 + _src[7] * m15;\n    mat4[11] = _src[8] * m3 + _src[9] * m7 + _src[10] * m11 + _src[11] * m15;\n    mat4[15] = _src[12] * m3 + _src[13] * m7 + _src[14] * m11 + _src[15] * m15;\n\n    return this;\n  }\n\n  /**\n   * Scales a p5.Matrix by scalars or a vector.\n   *\n   * This method applies a scaling transformation to the current matrix.\n   * Scaling is a transformation that enlarges or shrinks objects by a scale factor\n   * along the x, y, and z axes. The scale factors can be provided as individual\n   * numbers, an array, or a `p5.Vector`.\n   *\n   * If a `p5.Vector` or an array is provided, the x, y, and z components are extracted\n   * from it. If the z component is not provided, it defaults to 1 (no scaling along the z-axis).\n   *\n   * @param {p5.Vector|Float32Array|Number[]} s - The vector or scalars to scale by.\n   *                                              Can be a `p5.Vector`, an array, or individual numbers.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Scaling a matrix by individual scalars\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.scale(2, 3, 4); // Scale by 2 along x, 3 along y, and 4 along z\n   * console.log(matrix.matrix);\n   *\n   * // Scaling a matrix by a p5.Vector\n   * const scaleVector = new p5.Vector(2, 3, 4);\n   * matrix.scale(scaleVector);\n   * console.log(matrix.matrix);\n   *\n   * // Scaling a matrix by an array\n   * const scaleArray = [2, 3, 4];\n   * matrix.scale(scaleArray);\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Scale the matrix by individual scalars\n   *   matrix.scale(2, 3, 4);\n   *   console.log(\"Scaled Matrix (2, 3, 4):\", matrix.matrix);\n   *\n   *   // Scale the matrix by a p5.Vector\n   *   const scaleVector = new p5.Vector(1.5, 2.5, 3.5);\n   *   matrix.scale(scaleVector);\n   *   console.log(\"Scaled Matrix (Vector):\", matrix.matrix);\n   *\n   *   // Scale the matrix by an array\n   *   const scaleArray = [0.5, 0.5, 0.5];\n   *   matrix.scale(scaleArray);\n   *   console.log(\"Scaled Matrix (Array):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  scale(x, y, z) {\n    if (x instanceof Vector) {\n      // x is a vector, extract the components from it.\n      y = x.y;\n      z = x.z;\n      x = x.x; // must be last\n    } else if (x instanceof Array) {\n      // x is an array, extract the components from it.\n      y = x[1];\n      z = x[2];\n      x = x[0]; // must be last\n    }\n\n    this.matrix[0] *= x;\n    this.matrix[1] *= x;\n    this.matrix[2] *= x;\n    this.matrix[3] *= x;\n    this.matrix[4] *= y;\n    this.matrix[5] *= y;\n    this.matrix[6] *= y;\n    this.matrix[7] *= y;\n    this.matrix[8] *= z;\n    this.matrix[9] *= z;\n    this.matrix[10] *= z;\n    this.matrix[11] *= z;\n\n    return this;\n  }\n\n  /**\n   * Rotate the Matrix around a specified axis by a given angle.\n   *\n   * This method applies a rotation transformation to the matrix, modifying its orientation\n   * in 3D space. The rotation is performed around the provided axis, which can be defined\n   * as a `p5.Vector` or an array of numbers representing the x, y, and z components of the axis.\n   * Rotate our Matrix around an axis by the given angle.\n   * @param  {Number} a The angle of rotation in radians.\n   *                    Angles in radians are a measure of rotation, where 2π radians\n   *                    represent a full circle (360 degrees). For example:\n   *                    - π/2 radians = 90 degrees (quarter turn)\n   *                    - π radians = 180 degrees (half turn)\n   *                    - 2π radians = 360 degrees (full turn)\n   *                    Use `Math.PI` for π or `p5`'s `PI` constant if using p5.js.\n   * @param  {p5.Vector|Number[]} axis The axis or axes to rotate around.\n   *                                   This defines the direction of the rotation.\n   *                                   - If using a `p5.Vector`, it should represent\n   *                                     the x, y, and z components of the axis.\n   *                                   - If using an array, it should be in the form\n   *                                     [x, y, z], where x, y, and z are numbers.\n   *                                   For example:\n   *                                   - [1, 0, 0] rotates around the x-axis.\n   *                                   - [0, 1, 0] rotates around the y-axis.\n   *                                   - [0, 0, 1] rotates around the z-axis.   *\n   * @chainable\n   * inspired by Toji's gl-matrix lib, mat4 rotation\n   *\n   * @example\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]\n   *\n   *   // Translate the matrix by a 3D vector\n   *   matrix.rotate4x4(Math.PI, [1,0,0]);\n   *   console.log(\"After rotation of PI degrees on vector [1,0,0]:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,-1,1.2246468525851679e-16,0,0,-1.2246468525851679e-16,-1,0,0,0,0,1]\n   * }\n   * </code></div>\n   */\n  rotate4x4(a, x, y, z) {\n    if (x instanceof Vector) {\n      // x is a vector, extract the components from it.\n      y = x.y;\n      z = x.z;\n      x = x.x; //must be last\n    } else if (x instanceof Array) {\n      // x is an array, extract the components from it.\n      y = x[1];\n      z = x[2];\n      x = x[0]; //must be last\n    }\n\n    const len = Math.sqrt(x * x + y * y + z * z);\n    x *= 1 / len;\n    y *= 1 / len;\n    z *= 1 / len;\n\n    const a00 = this.matrix[0];\n    const a01 = this.matrix[1];\n    const a02 = this.matrix[2];\n    const a03 = this.matrix[3];\n    const a10 = this.matrix[4];\n    const a11 = this.matrix[5];\n    const a12 = this.matrix[6];\n    const a13 = this.matrix[7];\n    const a20 = this.matrix[8];\n    const a21 = this.matrix[9];\n    const a22 = this.matrix[10];\n    const a23 = this.matrix[11];\n\n    //sin,cos, and tan of respective angle\n    const sA = Math.sin(a);\n    const cA = Math.cos(a);\n    const tA = 1 - cA;\n    // Construct the elements of the rotation matrix\n    const b00 = x * x * tA + cA;\n    const b01 = y * x * tA + z * sA;\n    const b02 = z * x * tA - y * sA;\n    const b10 = x * y * tA - z * sA;\n    const b11 = y * y * tA + cA;\n    const b12 = z * y * tA + x * sA;\n    const b20 = x * z * tA + y * sA;\n    const b21 = y * z * tA - x * sA;\n    const b22 = z * z * tA + cA;\n\n    // rotation-specific matrix multiplication\n    this.matrix[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    this.matrix[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    this.matrix[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    this.matrix[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    this.matrix[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    this.matrix[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    this.matrix[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    this.matrix[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    this.matrix[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    this.matrix[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    this.matrix[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    this.matrix[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    return this;\n  }\n\n  /**\n   * Translates the current matrix by a given vector.\n   *\n   * This method applies a translation transformation to the current matrix.\n   * Translation moves the matrix by a specified amount along the x, y, and z axes.\n   * The input vector can be a 2D or 3D vector. If the z-component is not provided,\n   * it defaults to 0, meaning no translation along the z-axis.\n   *\n   * @param {Number[]} v - A vector representing the translation. It should be an array\n   *                       with two or three elements: [x, y, z]. The z-component is optional.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Translating a matrix by a 3D vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.translate([10, 20, 30]); // Translate by 10 units along x, 20 along y, and 30 along z\n   * console.log(matrix.matrix);\n   *\n   * // Translating a matrix by a 2D vector\n   * matrix.translate([5, 15]); // Translate by 5 units along x and 15 along y\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]\n   *\n   *   // Translate the matrix by a 3D vector\n   *   matrix.translate([10, 20, 30]);\n   *   console.log(\"After 3D Translation (10, 20, 30):\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,10,20,30,1]\n   *\n   *   // Translate the matrix by a 2D vector\n   *   matrix.translate([5, 15]);\n   *   console.log(\"After 2D Translation (5, 15):\", matrix.matrix.slice().toString()); // [1,0,0,0,0,1,0,0,0,0,1,0,15,35,30,1]\n   * }\n   * </code></div>\n   */\n  translate(v) {\n    const x = v[0],\n      y = v[1],\n      z = v[2] || 0;\n    this.matrix[12] +=\n      this.matrix[0] * x + this.matrix[4] * y + this.matrix[8] * z;\n    this.matrix[13] +=\n      this.matrix[1] * x + this.matrix[5] * y + this.matrix[9] * z;\n    this.matrix[14] +=\n      this.matrix[2] * x + this.matrix[6] * y + this.matrix[10] * z;\n    this.matrix[15] +=\n      this.matrix[3] * x + this.matrix[7] * y + this.matrix[11] * z;\n    return this;\n  }\n\n  /**\n   * Rotates the matrix around the X-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the X-axis. The rotation angle is specified in radians.\n   *\n   * Rotating around the X-axis means that the Y and Z coordinates of the matrix\n   * are transformed while the X coordinates remain unchanged. This is commonly\n   * used in 3D graphics to create animations or transformations along the X-axis.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by.\n   *\n   * @example\n   * // Rotating a matrix around the X-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateX(Math.PI / 4); // Rotate 45 degrees around the X-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the X-axis\n   *   matrix.rotateX(Math.PI / 4);\n   *   console.log(\"After Rotation (X-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateX(a) {\n    this.rotate4x4(a, 1, 0, 0);\n  }\n\n  /**\n   * Rotates the matrix around the Y-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the Y-axis. The rotation is performed in 3D space, and the angle\n   * is specified in radians. Rotating around the Y-axis means that the X and Z\n   * coordinates of the matrix are transformed while the Y coordinates remain\n   * unchanged. This is commonly used in 3D graphics to create animations or\n   * transformations along the Y-axis.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by. Positive\n   * values rotate the matrix counterclockwise, and negative values rotate it\n   * clockwise.\n   *\n   * @example\n   * // Rotating a matrix around the Y-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateY(Math.PI / 4); // Rotate 45 degrees around the Y-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the Y-axis\n   *   matrix.rotateY(Math.PI / 4);\n   *   console.log(\"After Rotation (Y-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateY(a) {\n    this.rotate4x4(a, 0, 1, 0);\n  }\n\n  /**\n   * Rotates the matrix around the Z-axis by a given angle.\n   *\n   * This method modifies the current matrix to apply a rotation transformation\n   * around the Z-axis. The rotation is performed in a 4x4 matrix context, which\n   * is commonly used in 3D graphics to handle transformations. Rotating around\n   * the Z-axis means that the X and Y coordinates of the matrix are transformed\n   * while the Z coordinates remain unchanged.\n   *\n   * @param {Number} a - The angle in radians to rotate the matrix by. Positive\n   * values rotate the matrix counterclockwise, and negative values rotate it\n   * clockwise.\n   *\n   * @returns {Matrix} The current instance of the Matrix class, allowing for\n   * method chaining.\n   *\n   * @example\n   * // Rotating a matrix around the Z-axis\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.rotateZ(Math.PI / 4); // Rotate 45 degrees around the Z-axis\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Rotate the matrix 45 degrees (PI/4 radians) around the Z-axis\n   *   matrix.rotateZ(Math.PI / 4);\n   *   console.log(\"After Rotation (Z-axis, 45 degrees):\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  rotateZ(a) {\n    this.rotate4x4(a, 0, 0, 1);\n  }\n\n  /**\n   * Sets the perspective projection matrix.\n   *\n   * This method modifies the current matrix to represent a perspective projection.\n   * Perspective projection is commonly used in 3D graphics to simulate the effect\n   * of objects appearing smaller as they move further away from the camera.\n   *\n   * The perspective matrix is defined by the field of view (fovy), aspect ratio,\n   * and the near and far clipping planes. The near and far clipping planes define\n   * the range of depth that will be rendered, with anything outside this range\n   * being clipped.\n   *\n   * @param {Number} fovy - The field of view in the y direction, in radians.\n   * @param {Number} aspect - The aspect ratio of the viewport (width / height).\n   * @param {Number} near - The distance to the near clipping plane. Must be greater than 0.\n   * @param {Number} far - The distance to the far clipping plane. Must be greater than the near value.\n   * @returns {Matrix} The current instance of the Matrix class, allowing for method chaining.\n   *\n   * @example\n   * // Setting a perspective projection matrix\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * matrix.perspective(Math.PI / 4, 1.5, 0.1, 100); // Set perspective projection\n   * console.log(matrix.matrix);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Set a perspective projection with a 45-degree field of view,\n   *   // an aspect ratio of 1.5, and near/far clipping planes at 0.1 and 100.\n   *   matrix.perspective(Math.PI / 4, 1.5, 0.1, 100);\n   *   console.log(\"Perspective Matrix:\", matrix.matrix);\n   * }\n   * </code></div>\n   */\n  perspective(fovy, aspect, near, far) {\n    const f = 1.0 / Math.tan(fovy / 2),\n      nf = 1 / (near - far);\n\n    this.matrix[0] = f / aspect;\n    this.matrix[1] = 0;\n    this.matrix[2] = 0;\n    this.matrix[3] = 0;\n    this.matrix[4] = 0;\n    this.matrix[5] = f;\n    this.matrix[6] = 0;\n    this.matrix[7] = 0;\n    this.matrix[8] = 0;\n    this.matrix[9] = 0;\n    this.matrix[10] = (far + near) * nf;\n    this.matrix[11] = -1;\n    this.matrix[12] = 0;\n    this.matrix[13] = 0;\n    this.matrix[14] = 2 * far * near * nf;\n    this.matrix[15] = 0;\n\n    return this;\n  }\n\n  /**\n   * Sets this matrix to an orthographic projection matrix.\n   *\n   * An orthographic projection matrix is used to create a 2D rendering\n   * of a 3D scene by projecting points onto a plane without perspective\n   * distortion. This method modifies the current matrix to represent\n   * the orthographic projection defined by the given parameters.\n   *\n   * @param {number} left - The coordinate for the left vertical clipping plane.\n   * @param {number} right - The coordinate for the right vertical clipping plane.\n   * @param {number} bottom - The coordinate for the bottom horizontal clipping plane.\n   * @param {number} top - The coordinate for the top horizontal clipping plane.\n   * @param {number} near - The distance to the near depth clipping plane. Must be positive.\n   * @param {number} far - The distance to the far depth clipping plane. Must be positive.\n   * @chainable\n   * @returns {Matrix} The current matrix instance, updated with the orthographic projection.\n   *\n   * @example\n   * <div class=\"norender\"><code>\n   * // Example using p5.js to demonstrate orthographic projection\n   * function setup() {\n   *  let orthoMatrix = new p5.Matrix(4);\n   *  console.log(orthoMatrix.matrix.toString()) // Output: 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1\n   *  orthoMatrix.ortho(-200, 200, -200, 200, 0.1, 1000);\n   *  console.log(orthoMatrix.matrix.toString()) // Output: [24 0.004999999888241291,0,0,0,0,0.004999999888241291,0,0,0,0,-0.0020002000965178013,0,0,0,-1.0002000331878662,1]\n   *  applyMatrix(\n   *     orthoMatrix.mat4[0], orthoMatrix.mat4[1], orthoMatrix.mat4[2], orthoMatrix.mat4[3],\n   *     orthoMatrix.mat4[4], orthoMatrix.mat4[5], orthoMatrix.mat4[6], orthoMatrix.mat4[7],\n   *     orthoMatrix.mat4[8], orthoMatrix.mat4[9], orthoMatrix.mat4[10], orthoMatrix.mat4[11],\n   *     orthoMatrix.mat4[12], orthoMatrix.mat4[13], orthoMatrix.mat4[14], orthoMatrix.mat4[15]\n   *  );\n   *  console.log(orthoMatrix.matrix.toString()) // Output: [31 0.004999999888241291,0,0,0,0,0.004999999888241291,0,0,0,0,-0.0020002000965178013,0,0,0,-1.0002000331878662,1]\n   *   }\n   * </code></div>\n   *\n   */\n  ortho(left, right, bottom, top, near, far) {\n    const lr = 1 / (left - right),\n      bt = 1 / (bottom - top),\n      nf = 1 / (near - far);\n    this.matrix[0] = -2 * lr;\n    this.matrix[1] = 0;\n    this.matrix[2] = 0;\n    this.matrix[3] = 0;\n    this.matrix[4] = 0;\n    this.matrix[5] = -2 * bt;\n    this.matrix[6] = 0;\n    this.matrix[7] = 0;\n    this.matrix[8] = 0;\n    this.matrix[9] = 0;\n    this.matrix[10] = 2 * nf;\n    this.matrix[11] = 0;\n    this.matrix[12] = (left + right) * lr;\n    this.matrix[13] = (top + bottom) * bt;\n    this.matrix[14] = (far + near) * nf;\n    this.matrix[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Applies a matrix to a vector with x, y, z, w components and returns the result as an array.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, w) and computes the resulting vector.\n   * It is commonly used in 3D graphics for transformations such as translation, rotation, scaling, and perspective projection.\n   *\n   * The resulting vector is returned as an array of four numbers, representing the transformed x, y, z, and w components.\n   *\n   * @param {Number} x - The x component of the vector.\n   * @param {Number} y - The y component of the vector.\n   * @param {Number} z - The z component of the vector.\n   * @param {Number} w - The w component of the vector.\n   * @returns {Number[]} An array containing the transformed [x, y, z, w] components.\n   *\n   * @example\n   * // Applying a matrix to a 4D vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const result = matrix.multiplyVec4(1, 2, 3, 1); // Transform the vector [1, 2, 3, 1]\n   * console.log(result); // Output: [1, 2, 3, 1] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Apply the matrix to a 4D vector\n   *   const result = matrix.multiplyVec4(1, 2, 3, 1);\n   *   console.log(\"Transformed Vector:\", result); // Output: [1, 2, 3, 1]\n   *\n   *   // Modify the matrix (e.g., apply a translation)\n   *   matrix.translate([5, 5, 5]);\n   *   console.log(\"Modified Matrix:\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same vector\n   *   const transformedResult = matrix.multiplyVec4(1, 2, 3, 1);\n   *   console.log(\"Transformed Vector after Translation:\", transformedResult); // Output: [6, 7, 8, 1]\n   * }\n   * </code></div>\n   */\n  multiplyVec4(x, y, z, w) {\n    const result = new Array(4);\n    const m = this.matrix;\n\n    result[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    result[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    result[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    result[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\n    return result;\n  }\n\n  /**\n   * Applies a matrix to a vector. The fourth component is set to 1.\n   * Returns a vector consisting of the first\n   * through third components of the result.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 1),\n   * effectively transforming the vector using the matrix. The resulting\n   * vector is returned as a new `p5.Vector` instance.\n   *\n   * This is useful for applying transformations such as translation,\n   * rotation, scaling, or perspective projection to a point in 3D space.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed point.\n   *\n   * @example\n   * // Applying a matrix to a 3D point\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const point = new p5.Vector(1, 2, 3); // Define a 3D point\n   * const transformedPoint = matrix.multiplyPoint(point);\n   * console.log(transformedPoint.toString()); // Output: [1, 2, 3] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a 3D point\n   *   const point = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Point:\", point.toString());\n   *\n   *   // Apply the matrix to the point\n   *   const transformedPoint = matrix.multiplyPoint(point);\n   *   console.log(\"Transformed Point:\", transformedPoint.toString());\n   *\n   *   // Modify the matrix (e.g., apply a translation)\n   *   matrix.translate([5, 5, 5]);\n   *   console.log(\"Modified Matrix:\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same point\n   *   const translatedPoint = matrix.multiplyPoint(point);\n   *   console.log(\"Translated Point:\", translatedPoint.toString()); // Output: [6, 7, 8]\n   * }\n   * </code></div>\n   */\n  multiplyPoint({ x, y, z }) {\n    const array = this.multiplyVec4(x, y, z, 1);\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Applies a matrix to a vector.\n   * The fourth component is set to 1.\n   * Returns the result of dividing the 1st to 3rd components\n   * of the result by the 4th component as a vector.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 1),\n   * effectively transforming the vector using the matrix. The resulting\n   * vector is normalized by dividing its x, y, and z components by the w component.\n   * This is useful for applying transformations such as perspective projection\n   * to a point in 3D space.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed and normalized point.\n   *\n   * @example\n   * // Applying a matrix to a 3D point and normalizing it\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const point = new p5.Vector(1, 2, 3); // Define a 3D point\n   * const transformedPoint = matrix.multiplyAndNormalizePoint(point);\n   * console.log(transformedPoint.toString()); // Output: [1, 2, 3] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a 3D point\n   *   const point = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Point:\", point.toString());\n   *\n   *   // Apply the matrix to the point and normalize it\n   *   const transformedPoint = matrix.multiplyAndNormalizePoint(point);\n   *   console.log(\"Transformed and Normalized Point:\", transformedPoint.toString());\n   *\n   *   // Modify the matrix (e.g., apply a perspective transformation)\n   *   matrix.perspective(Math.PI / 4, 1.5, 0.1, 100);\n   *   console.log(\"Modified Matrix (Perspective):\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same point\n   *   const perspectivePoint = matrix.multiplyAndNormalizePoint(point);\n   *   console.log(\"Point after Perspective Transformation:\", perspectivePoint.toString());\n   * }\n   * </code></div>\n   */\n  multiplyAndNormalizePoint({ x, y, z }) {\n    const array = this.multiplyVec4(x, y, z, 1);\n    array[0] /= array[3];\n    array[1] /= array[3];\n    array[2] /= array[3];\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Applies a matrix to a vector.\n   * The fourth component is set to 0.\n   * Returns a vector consisting of the first\n   * through third components of the result.\n   *\n   * This method multiplies the current matrix by a 4D vector (x, y, z, 0),\n   * effectively transforming the direction vector using the matrix. The resulting\n   * vector is returned as a new `p5.Vector` instance. This is particularly useful\n   * for transforming direction vectors (e.g., normals) without applying translation.\n   *\n   * @param {p5.Vector} vector - The input vector to transform. It should\n   *                              have x, y, and z components.\n   * @return {p5.Vector} A new `p5.Vector` instance representing the transformed direction.\n   *\n   * @example\n   * // Applying a matrix to a direction vector\n   * const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   * const direction = new p5.Vector(1, 0, 0); // Define a direction vector\n   * const transformedDirection = matrix.multiplyDirection(direction);\n   * console.log(transformedDirection.toString()); // Output: [1, 0, 0] (unchanged for identity matrix)\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   const matrix = new p5.Matrix(4); // Create a 4x4 identity matrix\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a direction vector\n   *   const direction = new p5.Vector(1, 0, 0);\n   *   console.log(\"Original Direction:\", direction.toString());\n   *\n   *   // Apply the matrix to the direction vector\n   *   const transformedDirection = matrix.multiplyDirection(direction);\n   *   console.log(\"Transformed Direction:\", transformedDirection.toString());\n   *\n   *   // Modify the matrix (e.g., apply a rotation)\n   *   matrix.rotateY(Math.PI / 4); // Rotate 45 degrees around the Y-axis\n   *   console.log(\"Modified Matrix (Rotation):\", matrix.matrix);\n   *\n   *   // Apply the modified matrix to the same direction vector\n   *   const rotatedDirection = matrix.multiplyDirection(direction);\n   *   console.log(\"Rotated Direction:\", rotatedDirection.toString()); // Output: Rotated vector\n   * }\n   * </code></div>\n   */\n  multiplyDirection({ x, y, z }) {\n    const array = this.multiplyVec4(x, y, z, 0);\n    return new Vector(array[0], array[1], array[2]);\n  }\n\n  /**\n   * Takes a vector and returns the vector resulting from multiplying. This function is only for 3x3 matrices.\n   * that vector by this matrix from the left.\n   *\n   * This method applies the current 3x3 matrix to a given vector, effectively\n   * transforming the vector using the matrix. The resulting vector is returned\n   * as a new vector or stored in the provided target vector.\n   *\n   * This is useful for operations such as transforming points or directions\n   * in 2D or 3D space using a 3x3 transformation matrix.\n   *\n   * @param {p5.Vector} multVector - The vector to which this matrix applies.\n   * @param {p5.Vector} [target] - The vector to receive the result. If not provided,\n   *                               a copy of the input vector will be created and returned.\n   * @return {p5.Vector} - The transformed vector after applying the matrix.\n   *\n   * @example\n   * // Multiplying a 3x3 matrix with a vector\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const vector = new p5.Vector(1, 2, 3);\n   * const result = matrix.multiplyVec3(vector);\n   * console.log(result.toString()); // Output: Transformed vector\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   // Create a 3x3 matrix\n   *   const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   console.log(\"Original Matrix:\", matrix.matrix);\n   *\n   *   // Define a vector\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   console.log(\"Original Vector:\", vector.toString()); // Output: [1, 2, 3]\n   *\n   *   // Apply the matrix to the vector\n   *   const transformedVector = matrix.multiplyVec3(vector);\n   *   console.log(\"Transformed Vector:\", transformedVector.toString()); // Output: [30, 36, 42]\n   *\n   *   // Modify the matrix (e.g., apply a scaling transformation)\n   *   matrix.scale(2, 2, 2);\n   *   console.log(\"Modified Matrix (Scaling):\", matrix.matrix); // Output: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n   *\n   *   // Apply the modified matrix to the same vector\n   *   const scaledVector = matrix.multiplyVec3(vector);\n   *   console.log(\"Scaled Vector:\", scaledVector.toString()); // Output: [60, 72, 84]\n   * }\n   * </code></div>\n   */\n  multiplyVec3(multVector, target) {\n    if (target === undefined) {\n      target = multVector.copy();\n    }\n    target.x = this.row(0).dot(multVector);\n    target.y = this.row(1).dot(multVector);\n    target.z = this.row(2).dot(multVector);\n    return target;\n  }\n\n  // ====================\n  // PRIVATE\n  /**\n   * Creates identity matrix\n   * This method updates the current matrix with the result of the multiplication.\n   *\n   * @private\n   */\n  #createIdentityMatrix(dimension) {\n    // This it to prevent loops in the most common 3x3 and 4x4 cases\n    // TODO: check performance if it actually helps\n    if (dimension === 3)\n      return new GLMAT_ARRAY_TYPE([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n    if (dimension === 4)\n      return new GLMAT_ARRAY_TYPE([\n        1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n      ]);\n    const identityMatrix = new GLMAT_ARRAY_TYPE(dimension * dimension).fill(0);\n    for (let i = 0; i < dimension; i++) {\n      identityMatrix[i * dimension + i] = 1;\n    }\n    return identityMatrix;\n  }\n\n  /**\n   * Multiplies the current 4x4 matrix with another 4x4 matrix.\n   * This method updates the current matrix with the result of the multiplication.\n   *\n   * @private\n   * @param {number[]} _src - A 16-element array representing the 4x4 matrix to multiply with.\n   *\n   * @returns {this} The current instance with the updated matrix.\n   *\n   * @example\n   * // Assuming `matrix` is an instance of the Matrix class\n   * const srcMatrix = [\n   *   1, 0, 0, 0,\n   *   0, 1, 0, 0,\n   *   0, 0, 1, 0,\n   *   0, 0, 0, 1\n   * ];\n   * matrix.#mult4x4(srcMatrix);\n   */\n  #mult4x4(_src) {\n    // each row is used for the multiplier\n    let b0 = this.matrix[0],\n      b1 = this.matrix[1],\n      b2 = this.matrix[2],\n      b3 = this.matrix[3];\n    this.matrix[0] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[1] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[2] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[3] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    b0 = this.matrix[4];\n    b1 = this.matrix[5];\n    b2 = this.matrix[6];\n    b3 = this.matrix[7];\n    this.matrix[4] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[5] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[6] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[7] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    b0 = this.matrix[8];\n    b1 = this.matrix[9];\n    b2 = this.matrix[10];\n    b3 = this.matrix[11];\n    this.matrix[8] = b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[9] = b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[10] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[11] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    b0 = this.matrix[12];\n    b1 = this.matrix[13];\n    b2 = this.matrix[14];\n    b3 = this.matrix[15];\n    this.matrix[12] =\n      b0 * _src[0] + b1 * _src[4] + b2 * _src[8] + b3 * _src[12];\n    this.matrix[13] =\n      b0 * _src[1] + b1 * _src[5] + b2 * _src[9] + b3 * _src[13];\n    this.matrix[14] =\n      b0 * _src[2] + b1 * _src[6] + b2 * _src[10] + b3 * _src[14];\n    this.matrix[15] =\n      b0 * _src[3] + b1 * _src[7] + b2 * _src[11] + b3 * _src[15];\n\n    return this;\n  }\n\n  /**\n   * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n   *                                                we want to multiply by\n   * @private\n   * @chainable\n   */\n  #multNxN(multMatrix) {\n    if (multMatrix.length !== this.matrix.length) {\n      throw new Error(\"Matrices must be of the same dimension to multiply.\");\n    }\n    const result = new GLMAT_ARRAY_TYPE(this.matrix.length).fill(0);\n    for (let i = 0; i < this.#sqDimention; i++) {\n      for (let j = 0; j < this.#sqDimention; j++) {\n        for (let k = 0; k < this.#sqDimention; k++) {\n          result[i * this.#sqDimention + j] +=\n            this.matrix[i * this.#sqDimention + k] *\n            multMatrix[k * this.#sqDimention + j];\n        }\n      }\n    }\n    this.matrix = result;\n    return this;\n  }\n\n  /**\n   * This function is only for 3x3 matrices.\n   * multiply two mat3s. It is an operation to multiply the 3x3 matrix of\n   * the argument from the right. Arguments can be a 3x3 p5.Matrix,\n   * a Float32Array of length 9, or a javascript array of length 9.\n   * In addition, it can also be done by enumerating 9 numbers.\n   *\n   * @param {p5.Matrix|Float32Array|Number[]} multMatrix The matrix\n   *                                                we want to multiply by\n   * @private\n   * @chainable\n   */\n  #mult3x3(_src) {\n    // each row is used for the multiplier\n    let b0 = this.mat3[0];\n    let b1 = this.mat3[1];\n    let b2 = this.mat3[2];\n    this.mat3[0] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[1] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[2] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n\n    b0 = this.mat3[3];\n    b1 = this.mat3[4];\n    b2 = this.mat3[5];\n    this.mat3[3] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[4] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[5] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n\n    b0 = this.mat3[6];\n    b1 = this.mat3[7];\n    b2 = this.mat3[8];\n    this.mat3[6] = b0 * _src[0] + b1 * _src[3] + b2 * _src[6];\n    this.mat3[7] = b0 * _src[1] + b1 * _src[4] + b2 * _src[7];\n    this.mat3[8] = b0 * _src[2] + b1 * _src[5] + b2 * _src[8];\n\n    return this;\n  }\n\n  /**\n   * Transposes a square matrix in place.\n   * This method swaps the rows and columns of the matrix, effectively flipping it over its diagonal.\n   *\n   * @private\n   * @returns {Matrix} The current instance of the Matrix, with the transposed values.\n   */\n  #transposeNxN() {\n    const n = this.#sqDimention;\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        this.matrix[i * n + j] = this.matrix[j * n + i];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * transpose according to a given matrix\n   * @param  {p5.Matrix|Float32Array|Number[]} a  the matrix to be\n   *                                               based on to transpose\n   * @private\n   * @chainable\n   */\n  #transpose4x4(a) {\n    console.log(\"====> 4x4\");\n    let a01, a02, a03, a12, a13, a23;\n    if (a instanceof Matrix) {\n      a01 = a.matrix[1];\n      a02 = a.matrix[2];\n      a03 = a.matrix[3];\n      a12 = a.matrix[6];\n      a13 = a.matrix[7];\n      a23 = a.matrix[11];\n\n      this.matrix[0] = a.matrix[0];\n      this.matrix[1] = a.matrix[4];\n      this.matrix[2] = a.matrix[8];\n      this.matrix[3] = a.matrix[12];\n      this.matrix[4] = a01;\n      this.matrix[5] = a.matrix[5];\n      this.matrix[6] = a.matrix[9];\n      this.matrix[7] = a.matrix[13];\n      this.matrix[8] = a02;\n      this.matrix[9] = a12;\n      this.matrix[10] = a.matrix[10];\n      this.matrix[11] = a.matrix[14];\n      this.matrix[12] = a03;\n      this.matrix[13] = a13;\n      this.matrix[14] = a23;\n      this.matrix[15] = a.matrix[15];\n    } else if (isMatrixArray(a)) {\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a12 = a[6];\n      a13 = a[7];\n      a23 = a[11];\n\n      this.matrix[0] = a[0];\n      this.matrix[1] = a[4];\n      this.matrix[2] = a[8];\n      this.matrix[3] = a[12];\n      this.matrix[4] = a01;\n      this.matrix[5] = a[5];\n      this.matrix[6] = a[9];\n      this.matrix[7] = a[13];\n      this.matrix[8] = a02;\n      this.matrix[9] = a12;\n      this.matrix[10] = a[10];\n      this.matrix[11] = a[14];\n      this.matrix[12] = a03;\n      this.matrix[13] = a13;\n      this.matrix[14] = a23;\n      this.matrix[15] = a[15];\n    }\n    return this;\n  }\n\n  /**\n   * This function is only for 3x3 matrices.\n   * transposes a 3×3 p5.Matrix by a mat3\n   * If there is an array of arguments, the matrix obtained by transposing\n   * the 3x3 matrix generated based on that array is set.\n   * If no arguments, it transposes itself and returns it.\n   *\n   * @param  {Number[]} mat3 1-dimensional array\n   * @private\n   * @chainable\n   */\n  #transpose3x3(mat3) {\n    if (mat3 === undefined) {\n      mat3 = this.mat3;\n    }\n    const a01 = mat3[1];\n    const a02 = mat3[2];\n    const a12 = mat3[5];\n    this.mat3[0] = mat3[0];\n    this.mat3[1] = mat3[3];\n    this.mat3[2] = mat3[6];\n    this.mat3[3] = a01;\n    this.mat3[4] = mat3[4];\n    this.mat3[5] = mat3[7];\n    this.mat3[6] = a02;\n    this.mat3[7] = a12;\n    this.mat3[8] = mat3[8];\n\n    return this;\n  }\n\n  /**\n   * Only 4x4 becasuse determinant is only 4x4 currently\n   * invert  matrix according to a give matrix\n   * @param  {p5.Matrix|Float32Array|Number[]} a   the matrix to be\n   *                                                based on to invert\n   * @private\n   * @chainable\n   */\n  #invert4x4(a) {\n    let a00, a01, a02, a03, a10, a11, a12, a13;\n    let a20, a21, a22, a23, a30, a31, a32, a33;\n    if (a instanceof Matrix) {\n      a00 = a.matrix[0];\n      a01 = a.matrix[1];\n      a02 = a.matrix[2];\n      a03 = a.matrix[3];\n      a10 = a.matrix[4];\n      a11 = a.matrix[5];\n      a12 = a.matrix[6];\n      a13 = a.matrix[7];\n      a20 = a.matrix[8];\n      a21 = a.matrix[9];\n      a22 = a.matrix[10];\n      a23 = a.matrix[11];\n      a30 = a.matrix[12];\n      a31 = a.matrix[13];\n      a32 = a.matrix[14];\n      a33 = a.matrix[15];\n    } else if (isMatrixArray(a)) {\n      a00 = a[0];\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a10 = a[4];\n      a11 = a[5];\n      a12 = a[6];\n      a13 = a[7];\n      a20 = a[8];\n      a21 = a[9];\n      a22 = a[10];\n      a23 = a[11];\n      a30 = a[12];\n      a31 = a[13];\n      a32 = a[14];\n      a33 = a[15];\n    }\n    const b00 = a00 * a11 - a01 * a10;\n    const b01 = a00 * a12 - a02 * a10;\n    const b02 = a00 * a13 - a03 * a10;\n    const b03 = a01 * a12 - a02 * a11;\n    const b04 = a01 * a13 - a03 * a11;\n    const b05 = a02 * a13 - a03 * a12;\n    const b06 = a20 * a31 - a21 * a30;\n    const b07 = a20 * a32 - a22 * a30;\n    const b08 = a20 * a33 - a23 * a30;\n    const b09 = a21 * a32 - a22 * a31;\n    const b10 = a21 * a33 - a23 * a31;\n    const b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det =\n      b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    this.matrix[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    this.matrix[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    this.matrix[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    this.matrix[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    this.matrix[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    this.matrix[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    this.matrix[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    this.matrix[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    this.matrix[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    this.matrix[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    this.matrix[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    this.matrix[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    this.matrix[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    this.matrix[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    this.matrix[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    this.matrix[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return this;\n  }\n\n  /**\n   * Inverts a 3×3 matrix\n   * @chainable\n   * @private\n   */\n  #invert3x3() {\n    const a00 = this.mat3[0];\n    const a01 = this.mat3[1];\n    const a02 = this.mat3[2];\n    const a10 = this.mat3[3];\n    const a11 = this.mat3[4];\n    const a12 = this.mat3[5];\n    const a20 = this.mat3[6];\n    const a21 = this.mat3[7];\n    const a22 = this.mat3[8];\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n    this.mat3[0] = b01 * det;\n    this.mat3[1] = (-a22 * a01 + a02 * a21) * det;\n    this.mat3[2] = (a12 * a01 - a02 * a11) * det;\n    this.mat3[3] = b11 * det;\n    this.mat3[4] = (a22 * a00 - a02 * a20) * det;\n    this.mat3[5] = (-a12 * a00 + a02 * a10) * det;\n    this.mat3[6] = b21 * det;\n    this.mat3[7] = (-a21 * a00 + a01 * a20) * det;\n    this.mat3[8] = (a11 * a00 - a01 * a10) * det;\n    return this;\n  }\n\n  /**\n   * inspired by Toji's mat4 determinant\n   * @return {Number} Determinant of our 4×4 matrix\n   * @private\n   */\n  #determinant4x4() {\n    if (this.#sqDimention !== 4) {\n      throw new Error(\n        \"Determinant is only implemented for 4x4 matrices. We are working on it.\"\n      );\n    }\n\n    const d00 =\n        this.matrix[0] * this.matrix[5] - this.matrix[1] * this.matrix[4],\n      d01 = this.matrix[0] * this.matrix[6] - this.matrix[2] * this.matrix[4],\n      d02 = this.matrix[0] * this.matrix[7] - this.matrix[3] * this.matrix[4],\n      d03 = this.matrix[1] * this.matrix[6] - this.matrix[2] * this.matrix[5],\n      d04 = this.matrix[1] * this.matrix[7] - this.matrix[3] * this.matrix[5],\n      d05 = this.matrix[2] * this.matrix[7] - this.matrix[3] * this.matrix[6],\n      d06 = this.matrix[8] * this.matrix[13] - this.matrix[9] * this.matrix[12],\n      d07 =\n        this.matrix[8] * this.matrix[14] - this.matrix[10] * this.matrix[12],\n      d08 =\n        this.matrix[8] * this.matrix[15] - this.matrix[11] * this.matrix[12],\n      d09 =\n        this.matrix[9] * this.matrix[14] - this.matrix[10] * this.matrix[13],\n      d10 =\n        this.matrix[9] * this.matrix[15] - this.matrix[11] * this.matrix[13],\n      d11 =\n        this.matrix[10] * this.matrix[15] - this.matrix[11] * this.matrix[14];\n\n    // Calculate the determinant\n    return (\n      d00 * d11 - d01 * d10 + d02 * d09 + d03 * d08 - d04 * d07 + d05 * d06\n    );\n  }\n\n  /**\n   * PRIVATE\n   */\n  // matrix methods adapted from:\n  // https://developer.mozilla.org/en-US/docs/Web/WebGL/\n  // gluPerspective\n  //\n  // function _makePerspective(fovy, aspect, znear, zfar){\n  //    const ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n  //    const ymin = -ymax;\n  //    const xmin = ymin * aspect;\n  //    const xmax = ymax * aspect;\n  //    return _makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n  //  }\n\n  ////\n  //// glFrustum\n  ////\n  //function _makeFrustum(left, right, bottom, top, znear, zfar){\n  //  const X = 2*znear/(right-left);\n  //  const Y = 2*znear/(top-bottom);\n  //  const A = (right+left)/(right-left);\n  //  const B = (top+bottom)/(top-bottom);\n  //  const C = -(zfar+znear)/(zfar-znear);\n  //  const D = -2*zfar*znear/(zfar-znear);\n  //  const frustrumMatrix =[\n  //  X, 0, A, 0,\n  //  0, Y, B, 0,\n  //  0, 0, C, D,\n  //  0, 0, -1, 0\n  //];\n  //return frustrumMatrix;\n  // }\n\n  // function _setMVPMatrices(){\n  ////an identity matrix\n  ////@TODO use the p5.Matrix class to abstract away our MV matrices and\n  ///other math\n  //const _mvMatrix =\n  //[\n  //  1.0,0.0,0.0,0.0,\n  //  0.0,1.0,0.0,0.0,\n  //  0.0,0.0,1.0,0.0,\n  //  0.0,0.0,0.0,1.0\n  //];\n}\n\nexport { GLMAT_ARRAY_TYPE, Matrix, isMatrixArray };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5695, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/p5.Matrix.js"],"sourcesContent":["import { Matrix } from './Matrices/Matrix.js';\nimport './p5.Vector.js';\nimport '../constants-C-g_eAdC.js';\nimport './Matrices/MatrixInterface.js';\n\n/**\n * @module Math\n * @requires constants\n * @todo see methods below needing further implementation.\n * future consideration: implement SIMD optimizations\n * when browser compatibility becomes available\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/\n *   Reference/Global_Objects/SIMD\n */\n// import { MatrixNumjs as Matrix } from './Matrices/MatrixNumjs'\n\nfunction matrix(p5, fn) {\n  /**\n   * A class to describe a matrix\n   * for model and view matrix manipulation in the p5js webgl renderer.\n   * The `Matrix` class represents a mathematical matrix and provides various methods for matrix operations.\n   *\n   * The `Matrix` class represents a mathematical matrix and provides various methods for matrix operations.\n   * This class extends the `MatrixInterface` and includes methods for creating, manipulating, and performing\n   * operations on matrices. It supports both 3x3 and 4x4 matrices, as well as general NxN matrices.\n   * @private\n   * @class p5.Matrix\n   * @param {Array} [mat4] column-major array literal of our 4×4 matrix\n   * @example\n   * // Creating a 3x3 matrix from an array using column major arrangement\n   * const matrix = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *\n   * // Creating a 4x4 identity matrix\n   * const identityMatrix = new p5.Matrix(4);\n   *\n   * // Adding two matrices\n   * const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   * matrix1.add(matrix2); // matrix1 is now [10, 10, 10, 10, 10, 10, 10, 10, 10]\n   *\n   * // Setting an element in the matrix\n   * matrix.setElement(0, 10); // matrix is now [10, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * // Resetting the matrix to an identity matrix\n   * matrix.reset();\n   *\n   * // Getting the diagonal elements of the matrix\n   * const diagonal = matrix.diagonal(); // [1, 1, 1]\n   *\n   * // Transposing the matrix\n   * matrix.transpose();\n   *\n   * // Multiplying two matrices\n   * matrix1.mult(matrix2);\n   *\n   * // Inverting the matrix\n   * matrix.invert();\n   *\n   * // Scaling the matrix\n   * matrix.scale(2, 2, 2);\n   *\n   * // Rotating the matrix around an axis\n   * matrix.rotate4x4(Math.PI / 4, 1, 0, 0);\n   *\n   * // Applying a perspective transformation\n   * matrix.perspective(Math.PI / 4, 1, 0.1, 100);\n   *\n   * // Applying an orthographic transformation\n   * matrix.ortho(-1, 1, -1, 1, 0.1, 100);\n   *\n   * // Multiplying a vector by the matrix\n   * const vector = new Vector(1, 2, 3);\n   * const result = matrix.multiplyPoint(vector);\n   *\n   * // p5.js script example\n   * <div class=\"norender\"><code>\n   * function setup() {\n   *\n   *   // Create a 4x4 identity matrix\n   *   const matrix = new p5.Matrix(4);\n   *   console.log(\"Original p5.Matrix:\", matrix.matrix.toString()); // Output: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n   *\n   *   // Add two matrices\n   *   const matrix1 = new p5.Matrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   *   const matrix2 = new p5.Matrix([9, 8, 7, 6, 5, 4, 3, 2, 1]);\n   *   matrix1.add(matrix2);\n   *   console.log(\"After Addition:\", matrix1.matrix.toString()); // Output: [10, 10, 10, 10, 10, 10, 10, 10, 10]\n   *\n   *   // Reset the matrix to an identity matrix\n   *   matrix.reset();\n   *   console.log(\"Reset p5.Matrix:\", matrix.matrix.toString()); // [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a scaling transformation\n   *   matrix.scale(2, 2, 2);\n   *   console.log(\"Scaled p5.Matrix:\", matrix.matrix.toString()); // [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a rotation around the X-axis\n   *   matrix.rotate4x4(Math.PI / 4, 1, 0, 0);\n   *   console.log(\"Rotated p5.Matrix (X-axis):\", matrix.matrix.toString()); // [2, 0, 0, 0, 0, 1.4142135381698608, 1.4142135381698608, 0, 0, -1.4142135381698608, 1.4142135381698608, 0, 0, 0, 0, 1]\n   *\n   *   // Apply a perspective transformation\n   *   matrix.perspective(Math.PI / 4, 1, 0.1, 100);\n   *   console.log(\"Perspective p5.Matrix:\", matrix.matrix.toString());// [2.4142136573791504, 0, 0, 0, 0, 2.4142136573791504, 0, 0, 0, 0, -1.0020020008087158, -1, 0, 0, -0.20020020008087158, 0]\n   *\n   *   // Multiply a vector by the matrix\n   *   const vector = new p5.Vector(1, 2, 3);\n   *   const transformedVector = matrix.multiplyPoint(vector);\n   *   console.log(\"Transformed Vector:\", transformedVector.toString());\n   * }\n   * </code></div>\n   */\n  p5.Matrix = Matrix;\n}\n\nif (typeof p5 !== \"undefined\") {\n  matrix(p5, p5.prototype);\n}\n\nexport { Matrix, matrix as default };\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA;;;;;;;;CAQC,GACD,iEAAiE;AAEjE,SAAS,OAAO,GAAE,EAAE,EAAE;IACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6FC,GACD,IAAG,MAAM,GAAG,2JAAA,CAAA,SAAM;AACpB;AAEA,IAAI,OAAO,OAAO,aAAa;IAC7B,OAAO,IAAI,GAAG,SAAS;AACzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5833, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/trigonometry.js"],"sourcesContent":["import { x as RAD_TO_DEG, D as DEG_TO_RAD } from '../constants-C-g_eAdC.js';\n\n/**\n * @module Math\n * @submodule Trigonometry\n * @for p5\n * @requires core\n * @requires constants\n */\n\n\nfunction trigonometry(p5, fn){\n  const DEGREES = fn.DEGREES = 'degrees';\n  const RADIANS = fn.RADIANS = 'radians';\n\n  /*\n   * all DEGREES/RADIANS conversion should be done in the p5 instance\n   * if possible, using the p5._toRadians(), p5._fromRadians() methods.\n   */\n  fn._angleMode = RADIANS;\n\n  /**\n   * Calculates the arc cosine of a number.\n   *\n   * `acos()` is the inverse of <a href=\"#/p5/cos\">cos()</a>. It expects\n   * arguments in the range -1 to 1. By default, `acos()` returns values in the\n   * range 0 to &pi; (about 3.14). If the\n   * <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`, then values are\n   * returned in the range 0 to 180.\n   *\n   * @method acos\n   * @param  {Number} value value whose arc cosine is to be returned.\n   * @return {Number}       arc cosine of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate cos() and acos() values.\n   *   let a = PI;\n   *   let c = cos(a);\n   *   let ac = acos(c);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(c, 3)}`, 35, 50);\n   *   text(`${round(ac, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 3.142, -1, and 3.142 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate cos() and acos() values.\n   *   let a = PI + QUARTER_PI;\n   *   let c = cos(a);\n   *   let ac = acos(c);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(c, 3)}`, 35, 50);\n   *   text(`${round(ac, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 3.927, -0.707, and 2.356 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.acos = function(ratio) {\n    return this._fromRadians(Math.acos(ratio));\n  };\n\n  /**\n   * Calculates the arc sine of a number.\n   *\n   * `asin()` is the inverse of <a href=\"#/p5/sin\">sin()</a>. It expects input\n   * values in the range of -1 to 1. By default, `asin()` returns values in the\n   * range -&pi; &divide; 2 (about -1.57) to &pi; &divide; 2 (about 1.57). If\n   * the <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES` then values are\n   * returned in the range -90 to 90.\n   *\n   * @method asin\n   * @param  {Number} value value whose arc sine is to be returned.\n   * @return {Number}       arc sine of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate sin() and asin() values.\n   *   let a = PI / 3;\n   *   let s = sin(a);\n   *   let as = asin(s);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(s, 3)}`, 35, 50);\n   *   text(`${round(as, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 1.047, 0.866, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate sin() and asin() values.\n   *   let a = PI + PI / 3;\n   *   let s = sin(a);\n   *   let as = asin(s);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(s, 3)}`, 35, 50);\n   *   text(`${round(as, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 4.189, -0.866, and -1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.asin = function(ratio) {\n    return this._fromRadians(Math.asin(ratio));\n  };\n\n  /**\n   * Calculates the arc tangent of a number.\n   *\n   * `atan()` is the inverse of <a href=\"#/p5/tan\">tan()</a>. It expects input\n   * values in the range of -Infinity to Infinity. By default, `atan()` returns\n   * values in the range -&pi; &divide; 2 (about -1.57) to &pi; &divide; 2\n   * (about 1.57). If the <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`\n   * then values are returned in the range -90 to 90.\n   *\n   * @method atan\n   * @param  {Number} value value whose arc tangent is to be returned.\n   * @return {Number}       arc tangent of the given value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate tan() and atan() values.\n   *   let a = PI / 3;\n   *   let t = tan(a);\n   *   let at = atan(t);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(t, 3)}`, 35, 50);\n   *   text(`${round(at, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 1.047, 1.732, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate tan() and atan() values.\n   *   let a = PI + PI / 3;\n   *   let t = tan(a);\n   *   let at = atan(t);\n   *\n   *   // Display the values.\n   *   text(`${round(a, 3)}`, 35, 25);\n   *   text(`${round(t, 3)}`, 35, 50);\n   *   text(`${round(at, 3)}`, 35, 75);\n   *\n   *   describe('The numbers 4.189, 1.732, and 1.047 written on separate rows.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.atan = function(ratio) {\n    return this._fromRadians(Math.atan(ratio));\n  };\n\n  /**\n   * Calculates the angle formed by a point, the origin, and the positive\n   * x-axis.\n   *\n   * `atan2()` is most often used for orienting geometry to the mouse's\n   * position, as in `atan2(mouseY, mouseX)`. The first parameter is the point's\n   * y-coordinate and the second parameter is its x-coordinate.\n   *\n   * By default, `atan2()` returns values in the range\n   * -&pi; (about -3.14) to &pi; (3.14). If the\n   * <a href=\"#/p5/angleMode\">angleMode()</a> is `DEGREES`, then values are\n   * returned in the range -180 to 180.\n   *\n   * @method atan2\n   * @param  {Number} y y-coordinate of the point.\n   * @param  {Number} x x-coordinate of the point.\n   * @return {Number}   arc tangent of the given point.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle at the top-left of the canvas rotates with mouse movements.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the angle between the mouse\n   *   // and the origin.\n   *   let a = atan2(mouseY, mouseX);\n   *\n   *   // Rotate.\n   *   rotate(a);\n   *\n   *   // Draw the shape.\n   *   rect(0, 0, 60, 10);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A rectangle at the center of the canvas rotates with mouse movements.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Translate the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Get the mouse's coordinates relative to the origin.\n   *   let x = mouseX - 50;\n   *   let y = mouseY - 50;\n   *\n   *   // Calculate the angle between the mouse and the origin.\n   *   let a = atan2(y, x);\n   *\n   *   // Rotate.\n   *   rotate(a);\n   *\n   *   // Draw the shape.\n   *   rect(-30, -5, 60, 10);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.atan2 = function(y, x) {\n    return this._fromRadians(Math.atan2(y, x));\n  };\n\n  /**\n   * Calculates the cosine of an angle.\n   *\n   * `cos()` is useful for many geometric tasks in creative coding. The values\n   * returned oscillate between -1 and 1 as the input angle increases. `cos()`\n   * calculates the cosine of an angle, using radians by default, or according\n   * to if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method cos\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       cosine of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.05) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form a wave pattern.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 30 * cos(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form an infinity symbol.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.1) + 50;\n   *   let y = 10 * sin(frameCount * 0.2) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.cos = function(angle) {\n    return Math.cos(this._toRadians(angle));\n  };\n\n  /**\n   * Calculates the sine of an angle.\n   *\n   * `sin()` is useful for many geometric tasks in creative coding. The values\n   * returned oscillate between -1 and 1 as the input angle increases. `sin()`\n   * calculates the sine of an angle, using radians by default, or according to\n   * if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method sin\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       sine of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates up and down.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 50;\n   *   let y = 30 * sin(frameCount * 0.05) + 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form a wave pattern.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 30 * sin(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots form an infinity symbol.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.1) + 50;\n   *   let y = 10 * sin(frameCount * 0.2) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.sin = function(angle) {\n    return Math.sin(this._toRadians(angle));\n  };\n\n  /**\n   * Calculates the tangent of an angle.\n   *\n   * `tan()` is useful for many geometric tasks in creative coding. The values\n   * returned range from -Infinity to Infinity and repeat periodically as the\n   * input angle increases. `tan()` calculates the tan of an angle, using radians\n   * by default, or according to\n   * if <a href=\"#/p5/angleMode\">angleMode()</a> setting (RADIANS or DEGREES).\n   *\n   * @method tan\n   * @param  {Number} angle the angle, in radians by default, or according to if <a href=\"/reference/p5/angleMode/\">angleMode()</a> setting (RADIANS or DEGREES).\n   * @return {Number}       tangent of the angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of identical curves drawn with black dots. Each curve starts from the top of the canvas, continues down at a slight angle, flattens out at the middle of the canvas, then continues to the bottom.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 5 * tan(x * 0.1) + 50;\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.tan = function(angle) {\n    return Math.tan(this._toRadians(angle));\n  };\n\n  /**\n   * Converts an angle measured in radians to its value in degrees.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * The same angle can be expressed in with either unit. For example, 90° is a\n   * quarter of a full rotation. The same angle is 2 &times; &pi; &divide; 4\n   * (about 1.57) radians.\n   *\n   * @method degrees\n   * @param  {Number} radians radians value to convert to degrees.\n   * @return {Number}         converted angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate the angle conversion.\n   *   let rad = QUARTER_PI;\n   *   let deg = degrees(rad);\n   *\n   *   // Display the conversion.\n   *   text(`${round(rad, 2)} rad = ${deg}˚`, 10, 50);\n   *\n   *   describe('The text \"0.79 rad = 45˚\".');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.degrees = angle => angle * RAD_TO_DEG;\n\n  /**\n   * Converts an angle measured in degrees to its value in radians.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * The same angle can be expressed in with either unit. For example, 90° is a\n   * quarter of a full rotation. The same angle is 2 &times; &pi; &divide; 4\n   * (about 1.57) radians.\n   *\n   * @method radians\n   * @param  {Number} degrees degree value to convert to radians.\n   * @return {Number}         converted angle.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Caclulate the angle conversion.\n   *   let deg = 45;\n   *   let rad = radians(deg);\n   *\n   *   // Display the angle conversion.\n   *   text(`${deg}˚ = ${round(rad, 3)} rad`, 10, 50);\n   *\n   *   describe('The text \"45˚ = 0.785 rad\".');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.radians = angle => angle * DEG_TO_RAD;\n\n  /**\n   * Changes the unit system used to measure angles.\n   *\n   * Degrees and radians are both units for measuring angles. There are 360˚ in\n   * one full rotation. A full rotation is 2 &times; &pi; (about 6.28) radians.\n   *\n   * Functions such as <a href=\"#/p5/rotate\">rotate()</a> and\n   * <a href=\"#/p5/sin\">sin()</a> expect angles measured radians by default.\n   * Calling `angleMode(DEGREES)` switches to degrees. Calling\n   * `angleMode(RADIANS)` switches back to radians.\n   *\n   * Calling `angleMode()` with no arguments returns current angle mode, which\n   * is either `RADIANS` or `DEGREES`.\n   *\n   * @method angleMode\n   * @param {(RADIANS|DEGREES)} mode either RADIANS or DEGREES.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Rotate 1/8 turn.\n   *   rotate(QUARTER_PI);\n   *\n   *   // Draw a line.\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('A diagonal line radiating from the top-left corner of a square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Rotate 1/8 turn.\n   *   rotate(45);\n   *\n   *   // Draw a line.\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('A diagonal line radiating from the top-left corner of a square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(50);\n   *\n   *   // Calculate the angle to rotate.\n   *   let angle = TWO_PI / 7;\n   *\n   *   // Move the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the flower.\n   *   noStroke();\n   *   fill(255, 50);\n   *\n   *   // Draw the flower.\n   *   for (let i = 0; i < 7; i += 1) {\n   *     ellipse(0, 0, 80, 20);\n   *     rotate(angle);\n   *   }\n   *\n   *   describe('A translucent white flower on a dark background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(50);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Calculate the angle to rotate.\n   *   let angle = 360 / 7;\n   *\n   *   // Move the origin to the center.\n   *   translate(50, 50);\n   *\n   *   // Style the flower.\n   *   noStroke();\n   *   fill(255, 50);\n   *\n   *   // Draw the flower.\n   *   for (let i = 0; i < 7; i += 1) {\n   *     ellipse(0, 0, 80, 20);\n   *     rotate(angle);\n   *   }\n   *\n   *   describe('A translucent white flower on a dark background.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 0.05) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   describe('A white ball on a string oscillates left and right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 30 * cos(frameCount * 2.86) + 50;\n   *   let y = 50;\n   *\n   *   // Draw the oscillator.\n   *   line(50, y, x, y);\n   *   circle(x, y, 20);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Draw the upper line.\n   *   rotate(PI / 6);\n   *   line(0, 0, 80, 0);\n   *\n   *   // Use degrees.\n   *   angleMode(DEGREES);\n   *\n   *   // Draw the lower line.\n   *   rotate(30);\n   *   line(0, 0, 80, 0);\n   *\n   *   describe('Two diagonal lines radiating from the top-left corner of a square. The lines are oriented 30 degrees from the edges of the square and 30 degrees apart from each other.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method angleMode\n   * @return {(RADIANS|DEGREES)} mode either RADIANS or DEGREES\n   */\n  fn.angleMode = function(mode) {\n    // p5._validateParameters('angleMode', arguments);\n    if (typeof mode === 'undefined') {\n      return this._angleMode;\n    } else if (mode === DEGREES || mode === RADIANS) {\n      const prevMode = this._angleMode;\n\n      // No change\n      if(mode === prevMode) return;\n\n      // Otherwise adjust pRotation according to new mode\n      // This is necessary for acceleration events to work properly\n      if(mode === RADIANS) {\n        // Change pRotation to radians\n        this.pRotationX = this.pRotationX * DEG_TO_RAD;\n        this.pRotationY = this.pRotationY * DEG_TO_RAD;\n        this.pRotationZ = this.pRotationZ * DEG_TO_RAD;\n      } else {\n        // Change pRotation to degrees\n        this.pRotationX = this.pRotationX * RAD_TO_DEG;\n        this.pRotationY = this.pRotationY * RAD_TO_DEG;\n        this.pRotationZ = this.pRotationZ * RAD_TO_DEG;\n      }\n\n      this._angleMode = mode;\n    }\n  };\n\n  /**\n   * converts angles from the current angleMode to RADIANS\n   *\n   * @method _toRadians\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._toRadians = function(angle) {\n    if (this._angleMode === DEGREES) {\n      return angle * DEG_TO_RAD;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from the current angleMode to DEGREES\n   *\n   * @method _toDegrees\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._toDegrees = function(angle) {\n    if (this._angleMode === RADIANS) {\n      return angle * RAD_TO_DEG;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from RADIANS into the current angleMode\n   *\n   * @method _fromRadians\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._fromRadians = function(angle) {\n    if (this._angleMode === DEGREES) {\n      return angle * RAD_TO_DEG;\n    }\n    return angle;\n  };\n\n  /**\n   * converts angles from DEGREES into the current angleMode\n   *\n   * @method _fromDegrees\n   * @private\n   * @param {Number} angle\n   * @returns {Number}\n   */\n  fn._fromDegrees = function(angle) {\n    if (this._angleMode === RADIANS) {\n      return angle * DEG_TO_RAD;\n    }\n    return angle;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  trigonometry(p5, p5.prototype);\n}\n\nexport { trigonometry as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6643, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/calculation.js"],"sourcesContent":["/**\n * @module Math\n * @submodule Calculation\n * @for p5\n * @requires core\n */\n\nfunction calculation(p5, fn){\n  /**\n   * Calculates the absolute value of a number.\n   *\n   * A number's absolute value is its distance from zero on the number line.\n   * -5 and 5 are both five units away from zero, so calling `abs(-5)` and\n   * `abs(5)` both return 5. The absolute value of a number is always positive.\n   *\n   * @method abs\n   * @param  {Number} n number to compute.\n   * @return {Number}   absolute value of given number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A gray square with a vertical black line that divides it in half. A white rectangle gets taller when the user moves the mouse away from the line.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Divide the canvas.\n   *   line(50, 0, 50, 100);\n   *\n   *   // Calculate the mouse's distance from the middle.\n   *   let h = abs(mouseX - 50);\n   *\n   *   // Draw a rectangle based on the mouse's distance\n   *   // from the middle.\n   *   rect(0, 100 - h, 100, h);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.abs = Math.abs;\n\n  /**\n   * Calculates the closest integer value that is greater than or equal to a\n   * number.\n   *\n   * For example, calling `ceil(9.03)` and `ceil(9.97)` both return the value\n   * 10.\n   *\n   * @method ceil\n   * @param  {Number} n number to round up.\n   * @return {Integer}   rounded up number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Use RGB color with values from 0 to 1.\n   *   colorMode(RGB, 1);\n   *\n   *   noStroke();\n   *\n   *   // Draw the left rectangle.\n   *   let r = 0.3;\n   *   fill(r, 0, 0);\n   *   rect(0, 0, 50, 100);\n   *\n   *   // Round r up to 1.\n   *   r = ceil(r);\n   *\n   *   // Draw the right rectangle.\n   *   fill(r, 0, 0);\n   *   rect(50, 0, 50, 100);\n   *\n   *   describe('Two rectangles. The one on the left is dark red and the one on the right is bright red.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.ceil = Math.ceil;\n\n  /**\n   * Constrains a number between a minimum and maximum value.\n   *\n   * @method constrain\n   * @param  {Number} n    number to constrain.\n   * @param  {Number} low  minimum limit.\n   * @param  {Number} high maximum limit.\n   * @return {Number}      constrained number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black dot drawn on a gray square follows the mouse from left to right. Its movement is constrained to the middle third of the square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   let x = constrain(mouseX, 33, 67);\n   *   let y = 50;\n   *\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two vertical lines. Two circles move horizontally with the mouse. One circle stops at the vertical lines.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set boundaries and draw them.\n   *   let leftWall = 25;\n   *   let rightWall = 75;\n   *   line(leftWall, 0, leftWall, 100);\n   *   line(rightWall, 0, rightWall, 100);\n   *\n   *   // Draw a circle that follows the mouse freely.\n   *   fill(255);\n   *   circle(mouseX, 33, 9);\n   *\n   *   // Draw a circle that's constrained.\n   *   let xc = constrain(mouseX, leftWall, rightWall);\n   *   fill(0);\n   *   circle(xc, 67, 9);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.constrain = function(n, low, high) {\n    // p5._validateParameters('constrain', arguments);\n    return Math.max(Math.min(n, high), low);\n  };\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * The version of `dist()` with four parameters calculates distance in two\n   * dimensions.\n   *\n   * The version of `dist()` with six parameters calculates distance in three\n   * dimensions.\n   *\n   * Use <a href=\"#/p5.Vector/dist\">p5.Vector.dist()</a> to calculate the\n   * distance between two <a href=\"#/p5.Vector\">p5.Vector</a> objects.\n   *\n   * @method dist\n   * @param  {Number} x1 x-coordinate of the first point.\n   * @param  {Number} y1 y-coordinate of the first point.\n   * @param  {Number} x2 x-coordinate of the second point.\n   * @param  {Number} y2 y-coordinate of the second point.\n   * @return {Number}    distance between the two points.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the coordinates.\n   *   let x1 = 10;\n   *   let y1 = 50;\n   *   let x2 = 90;\n   *   let y2 = 50;\n   *\n   *   // Draw the points and a line connecting them.\n   *   line(x1, y1, x2, y2);\n   *   strokeWeight(5);\n   *   point(x1, y1);\n   *   point(x2, y2);\n   *\n   *   // Calculate the distance.\n   *   let d = dist(x1, y1, x2, y2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the distance.\n   *   text(d, 43, 40);\n   *\n   *   describe('Two dots connected by a horizontal line. The number 80 is written above the center of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method dist\n   * @param  {Number} x1\n   * @param  {Number} y1\n   * @param  {Number} z1 z-coordinate of the first point.\n   * @param  {Number} x2\n   * @param  {Number} y2\n   * @param  {Number} z2 z-coordinate of the second point.\n   * @return {Number}    distance between the two points.\n   */\n  fn.dist = function(...args) {\n    // p5._validateParameters('dist', args);\n    if (args.length === 4) {\n      //2D\n      return Math.hypot(args[2] - args[0], args[3] - args[1]);\n    } else if (args.length === 6) {\n      //3D\n      return Math.hypot(\n        args[3] - args[0], args[4] - args[1], args[5] - args[2]\n      );\n    }\n  };\n\n  /**\n   * Calculates the value of Euler's number e (2.71828...) raised to the power\n   * of a number.\n   *\n   * @method exp\n   * @param  {Number} n exponent to raise.\n   * @return {Number}   e^n\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top-left.\n   *   let d = exp(1);\n   *   circle(10, 10, d);\n   *\n   *   // Left-center.\n   *   d = exp(2);\n   *   circle(20, 20, d);\n   *\n   *   // Right-center.\n   *   d = exp(3);\n   *   circle(40, 40, d);\n   *\n   *   // Bottom-right.\n   *   d = exp(4);\n   *   circle(80, 80, d);\n   *\n   *   describe('A series of circles that grow exponentially from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots that grow exponentially from left to right.');\n   * }\n   *\n   * function draw() {\n   *   // Invert the y-axis.\n   *   scale(1, -1);\n   *   translate(0, -100);\n   *\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 0.005 * exp(x * 0.1);\n   *\n   *   // Draw a point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.exp = Math.exp;\n\n  /**\n   * Calculates the closest integer value that is less than or equal to the\n   * value of a number.\n   *\n   * @method floor\n   * @param  {Number} n number to round down.\n   * @return {Integer}  rounded down number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use RGB color with values from 0 to 1.\n   *   colorMode(RGB, 1);\n   *\n   *   noStroke();\n   *\n   *   // Draw the left rectangle.\n   *   let r = 0.8;\n   *   fill(r, 0, 0);\n   *   rect(0, 0, 50, 100);\n   *\n   *   // Round r down to 0.\n   *   r = floor(r);\n   *\n   *   // Draw the right rectangle.\n   *   fill(r, 0, 0);\n   *   rect(50, 0, 50, 100);\n   *\n   *   describe('Two rectangles. The one on the left is bright red and the one on the right is black.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.floor = Math.floor;\n\n  /**\n   * Calculates a number between two numbers at a specific increment.\n   *\n   * The `amt` parameter is the amount to interpolate between the two numbers.\n   * 0.0 is equal to the first number, 0.1 is very near the first number, 0.5 is\n   * half-way in between, and 1.0 is equal to the second number. The `lerp()`\n   * function is convenient for creating motion along a straight path and for\n   * drawing dotted lines.\n   *\n   * If the value of `amt` is less than 0 or more than 1, `lerp()` will return a\n   * number outside of the original interval. For example, calling\n   * `lerp(0, 10, 1.5)` will return 15.\n   *\n   * @method lerp\n   * @param  {Number} start first value.\n   * @param  {Number} stop  second value.\n   * @param  {Number} amt   number.\n   * @return {Number}       lerped value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Declare variables for coordinates.\n   *   let a = 20;\n   *   let b = 80;\n   *   let c = lerp(a, b, 0.2);\n   *   let d = lerp(a, b, 0.5);\n   *   let e = lerp(a, b, 0.8);\n   *\n   *   strokeWeight(5);\n   *\n   *   // Draw the original points in black.\n   *   stroke(0);\n   *   point(a, 50);\n   *   point(b, 50);\n   *\n   *   // Draw the lerped points in gray.\n   *   stroke(100);\n   *   point(c, 50);\n   *   point(d, 50);\n   *   point(e, 50);\n   *\n   *   describe('Five points in a horizontal line. The outer points are black and the inner points are gray.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let x = 50;\n   * let y = 50;\n   * let targetX = 50;\n   * let targetY = 50;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A white circle at the center of a gray canvas. The circle moves to where the user clicks, then moves smoothly back to the center.');\n   * }\n   *\n   * function draw() {\n   *   background(220);\n   *\n   *   // Move x and y toward the target.\n   *   x = lerp(x, targetX, 0.05);\n   *   y = lerp(y, targetY, 0.05);\n   *\n   *   // Draw the circle.\n   *   circle(x, y, 20);\n   * }\n   *\n   * // Set x and y when the user clicks the mouse.\n   * function mouseClicked() {\n   *   x = mouseX;\n   *   y = mouseY;\n   * }\n   * </code>\n   * </div>\n   */\n  fn.lerp = function(start, stop, amt) {\n    // p5._validateParameters('lerp', arguments);\n    return amt * (stop - start) + start;\n  };\n\n  /**\n   * Calculates the natural logarithm (the base-e logarithm) of a number.\n   *\n   * `log()` expects the `n` parameter to be a value greater than 0 because\n   * the natural logarithm is defined that way.\n   *\n   * @method log\n   * @param  {Number} n number greater than 0.\n   * @return {Number}   natural logarithm of n.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top-left.\n   *   let d = log(50);\n   *   circle(33, 33, d);\n   *\n   *   // Bottom-right.\n   *   d = log(500000000);\n   *   circle(67, 67, d);\n   *\n   *   describe('Two white circles. The circle at the top-left is small. The circle at the bottom-right is about five times larger.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots that get higher slowly from left to right.');\n   * }\n   *\n   * function draw() {\n   *   // Invert the y-axis.\n   *   scale(1, -1);\n   *   translate(0, -100);\n   *\n   *   // Calculate coordinates.\n   *   let x = frameCount;\n   *   let y = 15 * log(x);\n   *\n   *   // Draw a point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.log = Math.log;\n\n  /**\n   * Calculates the magnitude, or length, of a vector.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is a\n   * point in space. The vector's components, `x` and `y`, are the point's\n   * coordinates `(x, y)`. A vector's magnitude is the distance from the origin\n   * `(0, 0)` to `(x, y)`. `mag(x, y)` is a shortcut for calling\n   * `dist(0, 0, x, y)`.\n   *\n   * A vector can also be thought of as an arrow pointing in space. This view is\n   * helpful for programming motion. See <a href=\"#/p5.Vector\">p5.Vector</a> for\n   * more details.\n   *\n   * Use <a href=\"#/p5.Vector/mag\">p5.Vector.mag()</a> to calculate the\n   * magnitude of a <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @method mag\n   * @param  {Number} x first component.\n   * @param  {Number} y second component.\n   * @return {Number}   magnitude of vector.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the vector's components.\n   *   let x = 30;\n   *   let y = 40;\n   *\n   *   // Calculate the magnitude.\n   *   let m = mag(x, y);\n   *\n   *   // Style the text.\n   *   textSize(16);\n   *\n   *   // Display the vector and its magnitude.\n   *   line(0, 0, x, y);\n   *   text(m, x, y);\n   *\n   *   describe('A diagonal line is drawn from the top left of the canvas. The number 50 is written at the end of the line.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.mag = function(x, y) {\n    // p5._validateParameters('mag', arguments);\n    return Math.hypot(x, y);\n  };\n\n  /**\n   * Re-maps a number from one range to another.\n   *\n   * For example, calling `map(2, 0, 10, 0, 100)` returns 20. The first three\n   * arguments set the original value to 2 and the original range from 0 to 10.\n   * The last two arguments set the target range from 0 to 100. 20's position\n   * in the target range [0, 100] is proportional to 2's position in the\n   * original range [0, 10].\n   *\n   * The sixth parameter, `withinBounds`, is optional. By default, `map()` can\n   * return values outside of the target range. For example,\n   * `map(11, 0, 10, 0, 100)` returns 110. Passing `true` as the sixth parameter\n   * constrains the remapped value to the target range. For example,\n   * `map(11, 0, 10, 0, 100, true)` returns 100.\n   *\n   * @method map\n   * @param  {Number} value  the value to be remapped.\n   * @param  {Number} start1 lower bound of the value's current range.\n   * @param  {Number} stop1  upper bound of the value's current range.\n   * @param  {Number} start2 lower bound of the value's target range.\n   * @param  {Number} stop2  upper bound of the value's target range.\n   * @param  {Boolean} [withinBounds] constrain the value to the newly mapped range.\n   * @return {Number}        remapped number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('Two horizontal lines. The top line grows horizontally as the mouse moves to the right. The bottom line also grows horizontally but is scaled to stay on the left half of the canvas.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Draw the top line.\n   *   line(0, 25, mouseX, 25);\n   *\n   *   // Remap mouseX from [0, 100] to [0, 50].\n   *   let x = map(mouseX, 0, 100, 0, 50);\n   *\n   *   // Draw the bottom line.\n   *   line(0, 75, 0, x);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A circle changes color from black to white as the mouse moves from left to right.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Remap mouseX from [0, 100] to [0, 255]\n   *   let c = map(mouseX, 0, 100, 0, 255);\n   *\n   *   // Style the circle.\n   *   fill(c);\n   *\n   *   // Draw the circle.\n   *   circle(50, 50, 20);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.map = function(n, start1, stop1, start2, stop2, withinBounds) {\n    // p5._validateParameters('map', arguments);\n    const newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n    if (!withinBounds) {\n      return newval;\n    }\n    if (start2 < stop2) {\n      return this.constrain(newval, start2, stop2);\n    } else {\n      return this.constrain(newval, stop2, start2);\n    }\n  };\n\n  /**\n   * Returns the largest value in a sequence of numbers.\n   *\n   * The version of `max()` with one parameter interprets it as an array of\n   * numbers and returns the largest number.\n   *\n   * The version of `max()` with two or more parameters interprets them as\n   * individual numbers and returns the largest number.\n   *\n   * @method max\n   * @param  {Number} n0 first number to compare.\n   * @param  {Number} n1 second number to compare.\n   * @return {Number}             maximum number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate the maximum of 10, 5, and 20.\n   *   let m = max(10, 5, 20);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the max.\n   *   text(m, 50, 50);\n   *\n   *   describe('The number 20 written in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let numbers = [10, 5, 20];\n   *\n   *   // Calculate the maximum of the array.\n   *   let m = max(numbers);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the max.\n   *   text(m, 50, 50);\n   *\n   *   describe('The number 20 written in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method max\n   * @param  {Number[]} nums numbers to compare.\n   * @return {Number}\n   */\n  fn.max = function(...args) {\n    const findMax = arr => {\n      let max = -Infinity;\n      for (let x of arr) {\n        max = Math.max(max, x);\n      }\n      return max;\n    };\n\n    if (args[0] instanceof Array) {\n      return findMax(args[0]);\n    } else {\n      return findMax(args);\n    }\n  };\n\n  /**\n   * Returns the smallest value in a sequence of numbers.\n   *\n   * The version of `min()` with one parameter interprets it as an array of\n   * numbers and returns the smallest number.\n   *\n   * The version of `min()` with two or more parameters interprets them as\n   * individual numbers and returns the smallest number.\n   *\n   * @method min\n   * @param  {Number} n0 first number to compare.\n   * @param  {Number} n1 second number to compare.\n   * @return {Number}             minimum number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Calculate the minimum of 10, 5, and 20.\n   *   let m = min(10, 5, 20);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the min.\n   *   text(m, 50, 50);\n   *\n   *   describe('The number 5 written in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of numbers.\n   *   let numbers = [10, 5, 20];\n   *\n   *   // Calculate the minimum of the array.\n   *   let m = min(numbers);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the min.\n   *   text(m, 50, 50);\n   *\n   *   describe('The number 5 written in the middle of a gray square.');\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method min\n   * @param  {Number[]} nums numbers to compare.\n   * @return {Number}\n   */\n  fn.min = function(...args) {\n    const findMin = arr => {\n      let min = Infinity;\n      for (let x of arr) {\n        min = Math.min(min, x);\n      }\n      return min;\n    };\n\n    if (args[0] instanceof Array) {\n      return findMin(args[0]);\n    } else {\n      return findMin(args);\n    }\n  };\n\n  /**\n   * Maps a number from one range to a value between 0 and 1.\n   *\n   * For example, `norm(2, 0, 10)` returns 0.2. 2's position in the original\n   * range [0, 10] is proportional to 0.2's position in the range [0, 1]. This\n   * is the same as calling `map(2, 0, 10, 0, 1)`.\n   *\n   * Numbers outside of the original range are not constrained between 0 and 1.\n   * Out-of-range values are often intentional and useful.\n   *\n   * @method norm\n   * @param  {Number} value incoming value to be normalized.\n   * @param  {Number} start lower bound of the value's current range.\n   * @param  {Number} stop  upper bound of the value's current range.\n   * @return {Number}       normalized number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Use RGB color with values from 0 to 1.\n   *   colorMode(RGB, 1);\n   *\n   *   describe('A square changes color from black to red as the mouse moves from left to right.');\n   * }\n   *\n   * function draw() {\n   *   // Calculate the redValue.\n   *   let redValue = norm(mouseX, 0, 100);\n   *\n   *   // Paint the background.\n   *   background(redValue, 0, 0);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.norm = function(n, start, stop) {\n    // p5._validateParameters('norm', arguments);\n    return this.map(n, start, stop, 0, 1);\n  };\n\n  /**\n   * Calculates exponential expressions such as <var>2<sup>3</sup></var>.\n   *\n   * For example, `pow(2, 3)` evaluates the expression\n   * 2 &times; 2 &times; 2. `pow(2, -3)` evaluates 1 &#247;\n   * (2 &times; 2 &times; 2).\n   *\n   * @method pow\n   * @param  {Number} n base of the exponential expression.\n   * @param  {Number} e power by which to raise the base.\n   * @return {Number}   n^e.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the base of the exponent.\n   *   let base = 3;\n   *\n   *   // Top-left.\n   *   let d = pow(base, 1);\n   *   circle(10, 10, d);\n   *\n   *   // Left-center.\n   *   d = pow(base, 2);\n   *   circle(20, 20, d);\n   *\n   *   // Right-center.\n   *   d = pow(base, 3);\n   *   circle(40, 40, d);\n   *\n   *   // Bottom-right.\n   *   d = pow(base, 4);\n   *   circle(80, 80, d);\n   *\n   *   describe('A series of circles that grow exponentially from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.pow = Math.pow;\n\n  /**\n   * Calculates the integer closest to a number.\n   *\n   * For example, `round(133.8)` returns the value 134.\n   *\n   * The second parameter, `decimals`, is optional. It sets the number of\n   * decimal places to use when rounding. For example, `round(12.34, 1)` returns\n   * 12.3. `decimals` is 0 by default.\n   *\n   * @method round\n   * @param  {Number} n number to round.\n   * @param  {Number} [decimals] number of decimal places to round to, default is 0.\n   * @return {Integer}  rounded number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Round a number.\n   *   let x = round(4.2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the rounded number.\n   *   text(x, 50, 50);\n   *\n   *   describe('The number 4 written in middle of the canvas.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Round a number to 2 decimal places.\n   *   let x = round(12.782383, 2);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Display the rounded number.\n   *   text(x, 50, 50);\n   *\n   *   describe('The number 12.78 written in middle of canvas.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.round = function(n, decimals) {\n    if (!decimals) {\n      return Math.round(n);\n    }\n    const multiplier = Math.pow(10, decimals);\n    return Math.round(n * multiplier) / multiplier;\n  };\n\n  /**\n   * Calculates the square of a number.\n   *\n   * Squaring a number means multiplying the number by itself. For example,\n   * `sq(3)` evaluates 3 &times; 3 which is 9. `sq(-3)` evaluates -3 &times; -3\n   * which is also 9. Multiplying two negative numbers produces a positive\n   * number. The value returned by `sq()` is always positive.\n   *\n   * @method sq\n   * @param  {Number} n number to square.\n   * @return {Number}   squared number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top-left.\n   *   let d = sq(3);\n   *   circle(33, 33, d);\n   *\n   *   // Bottom-right.\n   *   d = sq(6);\n   *   circle(67, 67, d);\n   *\n   *   describe('Two white circles. The circle at the top-left is small. The circle at the bottom-right is four times larger.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots that get higher quickly from left to right.');\n   * }\n   *\n   * function draw() {\n   *   // Invert the y-axis.\n   *   scale(1, -1);\n   *   translate(0, -100);\n   *\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 0.01 * sq(x);\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.sq = n => n * n;\n\n  /**\n   * Calculates the square root of a number.\n   *\n   * A number's square root can be multiplied by itself to produce the original\n   * number. For example, `sqrt(9)` returns 3 because 3 &times; 3 = 9. `sqrt()`\n   * always returns a positive value. `sqrt()` doesn't work with negative arguments\n   * such as `sqrt(-9)`.\n   *\n   * @method sqrt\n   * @param  {Number} n non-negative number to square root.\n   * @return {Number}   square root of number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Top-left.\n   *   let d = sqrt(16);\n   *   circle(33, 33, d);\n   *\n   *   // Bottom-right.\n   *   d = sqrt(1600);\n   *   circle(67, 67, d);\n   *\n   *   describe('Two white circles. The circle at the top-left is small. The circle at the bottom-right is ten times larger.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A series of black dots that get higher slowly from left to right.');\n   * }\n   *\n   * function draw() {\n   *   // Invert the y-axis.\n   *   scale(1, -1);\n   *   translate(0, -100);\n   *\n   *   // Calculate the coordinates.\n   *   let x = frameCount;\n   *   let y = 5 * sqrt(x);\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.sqrt = Math.sqrt;\n\n  /**\n   * Calculates the fractional part of a number.\n   *\n   * A number's fractional part includes its decimal values. For example,\n   * `fract(12.34)` returns 0.34.\n   *\n   * @method fract\n   * @param {Number} n number whose fractional part will be found.\n   * @returns {Number} fractional part of n.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(16);\n   *\n   *   // Original number.\n   *   let n = 56.78;\n   *   text(n, 50, 33);\n   *\n   *   // Fractional part.\n   *   let f = fract(n);\n   *   text(f, 50, 67);\n   *\n   *   describe('The number 56.78 written above the number 0.78.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.fract = function(toConvert) {\n    // p5._validateParameters('fract', arguments);\n    let sign = 0;\n    let num = Number(toConvert);\n    if (isNaN(num) || Math.abs(num) === Infinity) {\n      return num;\n    } else if (num < 0) {\n      num = -num;\n      sign = 1;\n    }\n    if (String(num).includes('.') && !String(num).includes('e')) {\n      let toFract = String(num);\n      toFract = Number('0' + toFract.slice(toFract.indexOf('.')));\n      return Math.abs(sign - toFract);\n    } else if (num < 1) {\n      return Math.abs(sign - num);\n    } else {\n      return 0;\n    }\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  calculation(p5, p5.prototype);\n}\n\nexport { calculation as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7728, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/noise.js"],"sourcesContent":["//////////////////////////////////////////////////////////////\n\n// http://mrl.nyu.edu/~perlin/noise/\n// Adapting from PApplet.java\n// which was adapted from toxi\n// which was adapted from the german demo group farbrausch\n// as used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n\n// someday we might consider using \"improved noise\"\n// http://mrl.nyu.edu/~perlin/paper445.pdf\n// See: https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/\n//      blob/main/introduction/Noise1D/noise.js\n\n/**\n * @module Math\n * @submodule Noise\n * @for p5\n * @requires core\n */\nfunction noise(p5, fn){\n  const PERLIN_YWRAPB = 4;\n  const PERLIN_YWRAP = 1 << PERLIN_YWRAPB;\n  const PERLIN_ZWRAPB = 8;\n  const PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB;\n  const PERLIN_SIZE = 4095;\n\n  let perlin_octaves = 4; // default to medium smooth\n  let perlin_amp_falloff = 0.5; // 50% reduction/octave\n\n  const scaled_cosine = i => 0.5 * (1.0 - Math.cos(i * Math.PI));\n\n  let perlin; // will be initialized lazily by noise() or noiseSeed()\n\n  /**\n   * Returns random numbers that can be tuned to feel organic.\n   *\n   * Values returned by <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> can change by large\n   * amounts between function calls. By contrast, values returned by `noise()`\n   * can be made \"smooth\". Calls to `noise()` with similar inputs will produce\n   * similar outputs. `noise()` is used to create textures, motion, shapes,\n   * terrains, and so on. Ken Perlin invented `noise()` while animating the\n   * original <em>Tron</em> film in the 1980s.\n   *\n   * `noise()` always returns values between 0 and 1. It returns the same value\n   * for a given input while a sketch is running. `noise()` produces different\n   * results each time a sketch runs. The\n   * <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function can be used to generate\n   * the same sequence of Perlin noise values each time a sketch runs.\n   *\n   * The character of the noise can be adjusted in two ways. The first way is to\n   * scale the inputs. `noise()` interprets inputs as coordinates. The sequence\n   * of noise values will be smoother when the input coordinates are closer. The\n   * second way is to use the <a href=\"#/p5/noiseDetail\">noiseDetail()</a>\n   * function.\n   *\n   * The version of `noise()` with one parameter computes noise values in one\n   * dimension. This dimension can be thought of as space, as in `noise(x)`, or\n   * time, as in `noise(t)`.\n   *\n   * The version of `noise()` with two parameters computes noise values in two\n   * dimensions. These dimensions can be thought of as space, as in\n   * `noise(x, y)`, or space and time, as in `noise(x, t)`.\n   *\n   * The version of `noise()` with three parameters computes noise values in\n   * three dimensions. These dimensions can be thought of as space, as in\n   * `noise(x, y, z)`, or space and time, as in `noise(x, y, t)`.\n   *\n   * @method noise\n   * @param  {Number} x   x-coordinate in noise space.\n   * @param  {Number} [y] y-coordinate in noise space.\n   * @param  {Number} [z] z-coordinate in noise space.\n   * @return {Number}     Perlin noise value at specified coordinates.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black dot moves randomly on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Calculate the coordinates.\n   *   let x = 100 * noise(0.005 * frameCount);\n   *   let y = 100 * noise(0.005 * frameCount + 10000);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A black dot moves randomly on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 100;\n   *   let noiseScale = 0.005;\n   *\n   *   // Scale the input coordinate.\n   *   let nt = noiseScale * frameCount;\n   *\n   *   // Compute the noise values.\n   *   let x = noiseLevel * noise(nt);\n   *   let y = noiseLevel * noise(nt + 10000);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A hilly terrain drawn in gray against a black sky.');\n   * }\n   *\n   * function draw() {\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 100;\n   *   let noiseScale = 0.02;\n   *\n   *   // Scale the input coordinate.\n   *   let x = frameCount;\n   *   let nx = noiseScale * x;\n   *\n   *   // Compute the noise value.\n   *   let y = noiseLevel * noise(nx);\n   *\n   *   // Draw the line.\n   *   line(x, 0, x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A calm sea drawn in gray against a black sky.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 100;\n   *   let noiseScale = 0.002;\n   *\n   *   // Iterate from left to right.\n   *   for (let x = 0; x < 100; x += 1) {\n   *     // Scale the input coordinates.\n   *     let nx = noiseScale * x;\n   *     let nt = noiseScale * frameCount;\n   *\n   *     // Compute the noise value.\n   *     let y = noiseLevel * noise(nx, nt);\n   *\n   *     // Draw the line.\n   *     line(x, 0, x, y);\n   *   }\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 255;\n   *   let noiseScale = 0.01;\n   *\n   *   // Iterate from top to bottom.\n   *   for (let y = 0; y < 100; y += 1) {\n   *     // Iterate from left to right.\n   *     for (let x = 0; x < 100; x += 1) {\n   *       // Scale the input coordinates.\n   *       let nx = noiseScale * x;\n   *       let ny = noiseScale * y;\n   *\n   *       // Compute the noise value.\n   *       let c = noiseLevel * noise(nx, ny);\n   *\n   *       // Draw the point.\n   *       stroke(c);\n   *       point(x, y);\n   *     }\n   *   }\n   *\n   *   describe('A gray cloudy pattern.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   describe('A gray cloudy pattern that changes.');\n   * }\n   *\n   * function draw() {\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 255;\n   *   let noiseScale = 0.009;\n   *\n   *   // Iterate from top to bottom.\n   *   for (let y = 0; y < 100; y += 1) {\n   *     // Iterate from left to right.\n   *     for (let x = 0; x < width; x += 1) {\n   *       // Scale the input coordinates.\n   *       let nx = noiseScale * x;\n   *       let ny = noiseScale * y;\n   *       let nt = noiseScale * frameCount;\n   *\n   *       // Compute the noise value.\n   *       let c = noiseLevel * noise(nx, ny, nt);\n   *\n   *       // Draw the point.\n   *       stroke(c);\n   *       point(x, y);\n   *     }\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noise = function(x, y = 0, z = 0) {\n    if (perlin == null) {\n      perlin = new Array(PERLIN_SIZE + 1);\n      for (let i = 0; i < PERLIN_SIZE + 1; i++) {\n        perlin[i] = Math.random();\n      }\n    }\n\n    if (x < 0) {\n      x = -x;\n    }\n    if (y < 0) {\n      y = -y;\n    }\n    if (z < 0) {\n      z = -z;\n    }\n\n    let xi = Math.floor(x),\n      yi = Math.floor(y),\n      zi = Math.floor(z);\n    let xf = x - xi;\n    let yf = y - yi;\n    let zf = z - zi;\n    let rxf, ryf;\n    let r = 0;\n    let ampl = 0.5;\n    let n1, n2, n3;\n\n    for (let o = 0; o < perlin_octaves; o++) {\n      let of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);\n\n      rxf = scaled_cosine(xf);\n      ryf = scaled_cosine(yf);\n\n      n1 = perlin[of & PERLIN_SIZE];\n      n1 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1);\n      n2 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n      n2 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2);\n      n1 += ryf * (n2 - n1);\n\n      of += PERLIN_ZWRAP;\n      n2 = perlin[of & PERLIN_SIZE];\n      n2 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2);\n      n3 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE];\n      n3 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3);\n      n2 += ryf * (n3 - n2);\n\n      n1 += scaled_cosine(zf) * (n2 - n1);\n\n      r += n1 * ampl;\n      ampl *= perlin_amp_falloff;\n      xi <<= 1;\n      xf *= 2;\n      yi <<= 1;\n      yf *= 2;\n      zi <<= 1;\n      zf *= 2;\n\n      if (xf >= 1.0) {\n        xi++;\n        xf--;\n      }\n      if (yf >= 1.0) {\n        yi++;\n        yf--;\n      }\n      if (zf >= 1.0) {\n        zi++;\n        zf--;\n      }\n    }\n    return r;\n  };\n\n  /**\n   * Adjusts the character of the noise produced by the\n   * <a href=\"#/p5/noise\">noise()</a> function.\n   *\n   * Perlin noise values are created by adding layers of noise together. The\n   * noise layers, called octaves, are similar to harmonics in music. Lower\n   * octaves contribute more to the output signal. They define the overall\n   * intensity of the noise. Higher octaves create finer-grained details.\n   *\n   * By default, noise values are created by combining four octaves. Each higher\n   * octave contributes half as much (50% less) compared to its predecessor.\n   * `noiseDetail()` changes the number of octaves and the falloff amount. For\n   * example, calling `noiseDetail(6, 0.25)` ensures that\n   * <a href=\"#/p5/noise\">noise()</a> will use six octaves. Each higher octave\n   * will contribute 25% as much (75% less) compared to its predecessor. Falloff\n   * values between 0 and 1 are valid. However, falloff values greater than 0.5\n   * might result in noise values greater than 1.\n   *\n   * @method noiseDetail\n   * @param {Number} lod number of octaves to be used by the noise.\n   * @param {Number} falloff falloff factor for each octave.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 255;\n   *   let noiseScale = 0.02;\n   *\n   *   // Iterate from top to bottom.\n   *   for (let y = 0; y < 100; y += 1) {\n   *     // Iterate from left to right.\n   *     for (let x = 0; x < 50; x += 1) {\n   *       // Scale the input coordinates.\n   *       let nx = noiseScale * x;\n   *       let ny = noiseScale * y;\n   *\n   *       // Compute the noise value with six octaves\n   *       // and a low falloff factor.\n   *       noiseDetail(6, 0.25);\n   *       let c = noiseLevel * noise(nx, ny);\n   *\n   *       // Draw the left side.\n   *       stroke(c);\n   *       point(x, y);\n   *\n   *       // Compute the noise value with four octaves\n   *       // and a high falloff factor.\n   *       noiseDetail(4, 0.5);\n   *       c = noiseLevel * noise(nx, ny);\n   *\n   *       // Draw the right side.\n   *       stroke(c);\n   *       point(x + 50, y);\n   *     }\n   *   }\n   *\n   *   describe('Two gray cloudy patterns. The pattern on the right is cloudier than the pattern on the left.');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noiseDetail = function(lod, falloff) {\n    if (lod > 0) {\n      perlin_octaves = lod;\n    }\n    if (falloff > 0) {\n      perlin_amp_falloff = falloff;\n    }\n  };\n\n  /**\n   * Sets the seed value for the <a href=\"#/p5/noise\">noise()</a> function.\n   *\n   * By default, <a href=\"#/p5/noise\">noise()</a> produces different results\n   * each time a sketch is run. Calling `noiseSeed()` with a constant argument,\n   * such as `noiseSeed(99)`, makes <a href=\"#/p5/noise\">noise()</a> produce the\n   * same results each time a sketch is run.\n   *\n   * @method noiseSeed\n   * @param {Number} seed   seed value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Set the noise seed for consistent results.\n   *   noiseSeed(99);\n   *\n   *   describe('A black rectangle that grows randomly, first to the right and then to the left.');\n   * }\n   *\n   * function draw() {\n   *   // Set the noise level and scale.\n   *   let noiseLevel = 100;\n   *   let noiseScale = 0.005;\n   *\n   *   // Scale the input coordinate.\n   *   let nt = noiseScale * frameCount;\n   *\n   *   // Compute the noise value.\n   *   let x = noiseLevel * noise(nt);\n   *\n   *   // Draw the line.\n   *   line(x, 0, x, height);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.noiseSeed = function(seed) {\n    // Linear Congruential Generator\n    // Variant of a Lehman Generator\n    const lcg = (() => {\n      // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n      // m is basically chosen to be large (as it is the max period)\n      // and for its relationships to a and c\n      const m = 4294967296;\n      // a - 1 should be divisible by m's prime factors\n      const a = 1664525;\n      // c and m should be co-prime\n      const c = 1013904223;\n      let seed, z;\n      return {\n        setSeed(val) {\n          // pick a random seed if val is undefined or null\n          // the >>> 0 casts the seed to an unsigned 32-bit integer\n          z = seed = (val == null ? Math.random() * m : val) >>> 0;\n        },\n        getSeed() {\n          return seed;\n        },\n        rand() {\n          // define the recurrence relationship\n          z = (a * z + c) % m;\n          // return a float in [0, 1)\n          // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n          return z / m;\n        }\n      };\n    })();\n\n    lcg.setSeed(seed);\n    perlin = new Array(PERLIN_SIZE + 1);\n    for (let i = 0; i < PERLIN_SIZE + 1; i++) {\n      perlin[i] = lcg.rand();\n    }\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  noise(p5, p5.prototype);\n}\n\nexport { noise as default };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8196, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/random.js"],"sourcesContent":["/**\n * @module Math\n * @submodule Random\n * @for p5\n * @requires core\n */\n\nfunction random(p5, fn){\n  // variables used for random number generators\n  const randomStateProp = '_lcg_random_state';\n  // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n  // m is basically chosen to be large (as it is the max period)\n  // and for its relationships to a and c\n  const m = 4294967296;\n  // a - 1 should be divisible by m's prime factors\n  const a = 1664525;\n  // c and m should be co-prime\n  const c = 1013904223;\n  let y2 = 0;\n\n  // Linear Congruential Generator that stores its state at instance[stateProperty]\n  fn._lcg = function(stateProperty) {\n    // define the recurrence relationship\n    this[stateProperty] = (a * this[stateProperty] + c) % m;\n    // return a float in [0, 1)\n    // we've just used % m, so / m is always < 1\n    return this[stateProperty] / m;\n  };\n\n  fn._lcgSetSeed = function(stateProperty, val) {\n    // pick a random seed if val is undefined or null\n    // the >>> 0 casts the seed to an unsigned 32-bit integer\n    this[stateProperty] = (val == null ? Math.random() * m : val) >>> 0;\n  };\n\n  /**\n   * Sets the seed value for the <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> functions.\n   *\n   * By default, <a href=\"#/p5/random\">random()</a> and\n   * <a href=\"#/p5/randomGaussian\">randomGaussian()</a> produce different\n   * results each time a sketch is run. Calling `randomSeed()` with a constant\n   * argument, such as `randomSeed(99)`, makes these functions produce the same\n   * results each time a sketch is run.\n   *\n   * @method randomSeed\n   * @param {Number} seed   seed value.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw the white circle.\n   *   circle(x, y, 10);\n   *\n   *   // Set a random seed for consistency.\n   *   randomSeed(99);\n   *\n   *   // Get random coordinates.\n   *   x = random(0, 100);\n   *   y = random(0, 100);\n   *\n   *   // Draw the black circle.\n   *   fill(0);\n   *   circle(x, y, 10);\n   *\n   *   describe('A white circle appears at a random position. A black circle appears at (27.4, 25.8).');\n   * }\n   * </code>\n   * </div>\n   */\n  fn.randomSeed = function(seed) {\n    this._lcgSetSeed(randomStateProp, seed);\n    this._gaussian_previous = false;\n  };\n\n  /**\n   * Returns a random number or a random element from an array.\n   *\n   * `random()` follows uniform distribution, which means that all outcomes are\n   * equally likely. When `random()` is used to generate numbers, all\n   * numbers in the output range are equally likely to be returned. When\n   * `random()` is used to select elements from an array, all elements are\n   * equally likely to be chosen.\n   *\n   * By default, `random()` produces different results each time a sketch runs.\n   * The <a href=\"#/p5/randomSeed\">randomSeed()</a> function can be used to\n   * generate the same sequence of numbers or choices each time a sketch runs.\n   *\n   * The version of `random()` with no parameters returns a random number from 0\n   * up to but not including 1.\n   *\n   * The version of `random()` with one parameter works one of two ways. If the\n   * argument passed is a number, `random()` returns a random number from 0 up\n   * to but not including the number. For example, calling `random(5)` returns\n   * values between 0 and 5. If the argument passed is an array, `random()`\n   * returns a random element from that array. For example, calling\n   * `random(['🦁', '🐯', '🐻'])` returns either a lion, tiger, or bear emoji.\n   *\n   * The version of `random()` with two parameters returns a random number from\n   * a given range. The arguments passed set the range's lower and upper bounds.\n   * For example, calling `random(-5, 10.2)` returns values from -5 up to but\n   * not including 10.2.\n   *\n   * @method random\n   * @param  {Number} [min]   lower bound (inclusive).\n   * @param  {Number} [max]   upper bound (exclusive).\n   * @return {Number} random number.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(0, 100);\n   *   let y = random(0, 100);\n   *\n   *   // Draw a point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   *\n   *   describe('A black dot appears in a random position on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(100);\n   *   let y = random(100);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   *\n   *   describe('A black dot appears in a random position on a gray square.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create an array of emoji strings.\n   *   let animals = ['🦁', '🐯', '🐻'];\n   *\n   *   // Choose a random element from the array.\n   *   let choice = random(animals);\n   *\n   *   // Style the text.\n   *   textAlign(CENTER);\n   *   textSize(20);\n   *\n   *   // Display the emoji.\n   *   text(choice, 50, 50);\n   *\n   *   describe('An animal face is displayed at random. Either a lion, tiger, or bear.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A black dot moves around randomly on a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get random coordinates between 0 and 100.\n   *   let x = random(100);\n   *   let y = random(100);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Slow the frame rate.\n   *   frameRate(5);\n   *\n   *   describe('A black dot moves around randomly in the middle of a gray square.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Get random coordinates between 45 and 55.\n   *   let x = random(45, 55);\n   *   let y = random(45, 55);\n   *\n   *   // Draw the point.\n   *   strokeWeight(5);\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let x = 50;\n   * let y = 50;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('A black dot moves around randomly leaving a trail.');\n   * }\n   *\n   * function draw() {\n   *   // Update x and y randomly.\n   *   x += random(-1, 1);\n   *   y += random(-1, 1);\n   *\n   *   // Draw the point.\n   *   point(x, y);\n   * }\n   * </code>\n   * </div>\n   */\n  /**\n   * @method random\n   * @param  {Array} choices   array to choose from.\n   * @return {*} random element from the array.\n   */\n  fn.random = function(min, max) {\n    // p5._validateParameters('random', arguments);\n    let rand;\n\n    if (this[randomStateProp] != null) {\n      rand = this._lcg(randomStateProp);\n    } else {\n      rand = Math.random();\n    }\n    if (typeof min === 'undefined') {\n      return rand;\n    } else if (typeof max === 'undefined') {\n      if (min instanceof Array) {\n        return min[Math.floor(rand * min.length)];\n      } else {\n        return rand * min;\n      }\n    } else {\n      if (min > max) {\n        const tmp = min;\n        min = max;\n        max = tmp;\n      }\n\n      return rand * (max - min) + min;\n    }\n  };\n\n  /**\n   * Returns a random number fitting a Gaussian, or normal, distribution.\n   *\n   * Normal distributions look like bell curves when plotted. Values from a\n   * normal distribution cluster around a central value called the mean. The\n   * cluster's standard deviation describes its spread.\n   *\n   * By default, `randomGaussian()` produces different results each time a\n   * sketch runs. The <a href=\"#/p5/randomSeed\">randomSeed()</a> function can be\n   * used to generate the same sequence of numbers each time a sketch runs.\n   *\n   * There's no minimum or maximum value that `randomGaussian()` might return.\n   * Values far from the mean are very unlikely and values near the mean are\n   * very likely.\n   *\n   * The version of `randomGaussian()` with no parameters returns values with a\n   * mean of 0 and standard deviation of 1.\n   *\n   * The version of `randomGaussian()` with one parameter interprets the\n   * argument passed as the mean. The standard deviation is 1.\n   *\n   * The version of `randomGaussian()` with two parameters interprets the first\n   * argument passed as the mean and the second as the standard deviation.\n   *\n   * @method randomGaussian\n   * @param  {Number} [mean]  mean.\n   * @param  {Number} [sd]    standard deviation.\n   * @return {Number} random number.\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   describe('Three horizontal black lines are filled in randomly. The top line spans entire canvas. The middle line is very short. The bottom line spans two-thirds of the canvas.');\n   * }\n   *\n   * function draw() {\n   *   // Style the circles.\n   *   noStroke();\n   *   fill(0, 10);\n   *\n   *   // Uniform distribution between 0 and 100.\n   *   let x = random(100);\n   *   let y = 25;\n   *   circle(x, y, 5);\n   *\n   *   // Gaussian distribution with a mean of 50 and sd of 1.\n   *   x = randomGaussian(50);\n   *   y = 50;\n   *   circle(x, y, 5);\n   *\n   *   // Gaussian distribution with a mean of 50 and sd of 10.\n   *   x = randomGaussian(50, 10);\n   *   y = 75;\n   *   circle(x, y, 5);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.randomGaussian = function(mean, sd = 1) {\n    let y1, x1, x2, w;\n    if (this._gaussian_previous) {\n      y1 = y2;\n      this._gaussian_previous = false;\n    } else {\n      do {\n        x1 = this.random(2) - 1;\n        x2 = this.random(2) - 1;\n        w = x1 * x1 + x2 * x2;\n      } while (w >= 1);\n      w = Math.sqrt(-2 * Math.log(w) / w);\n      y1 = x1 * w;\n      y2 = x2 * w;\n      this._gaussian_previous = true;\n    }\n\n    const m = mean || 0;\n    return y1 * sd + m;\n  };\n}\n\nif(typeof p5 !== 'undefined'){\n  random(p5, p5.prototype);\n}\n\nexport { random as default };\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AAED,SAAS,OAAO,GAAE,EAAE,EAAE;IACpB,8CAA8C;IAC9C,MAAM,kBAAkB;IACxB,oEAAoE;IACpE,8DAA8D;IAC9D,uCAAuC;IACvC,MAAM,IAAI;IACV,iDAAiD;IACjD,MAAM,IAAI;IACV,6BAA6B;IAC7B,MAAM,IAAI;IACV,IAAI,KAAK;IAET,iFAAiF;IACjF,GAAG,IAAI,GAAG,SAAS,aAAa;QAC9B,qCAAqC;QACrC,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI;QACtD,2BAA2B;QAC3B,4CAA4C;QAC5C,OAAO,IAAI,CAAC,cAAc,GAAG;IAC/B;IAEA,GAAG,WAAW,GAAG,SAAS,aAAa,EAAE,GAAG;QAC1C,iDAAiD;QACjD,yDAAyD;QACzD,IAAI,CAAC,cAAc,GAAG,CAAC,OAAO,OAAO,KAAK,MAAM,KAAK,IAAI,GAAG,MAAM;IACpE;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CC,GACD,GAAG,UAAU,GAAG,SAAS,IAAI;QAC3B,IAAI,CAAC,WAAW,CAAC,iBAAiB;QAClC,IAAI,CAAC,kBAAkB,GAAG;IAC5B;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4KC,GACD;;;;GAIC,GACD,GAAG,MAAM,GAAG,SAAS,GAAG,EAAE,GAAG;QAC3B,+CAA+C;QAC/C,IAAI;QAEJ,IAAI,IAAI,CAAC,gBAAgB,IAAI,MAAM;YACjC,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,OAAO;YACL,OAAO,KAAK,MAAM;QACpB;QACA,IAAI,OAAO,QAAQ,aAAa;YAC9B,OAAO;QACT,OAAO,IAAI,OAAO,QAAQ,aAAa;YACrC,IAAI,eAAe,OAAO;gBACxB,OAAO,GAAG,CAAC,KAAK,KAAK,CAAC,OAAO,IAAI,MAAM,EAAE;YAC3C,OAAO;gBACL,OAAO,OAAO;YAChB;QACF,OAAO;YACL,IAAI,MAAM,KAAK;gBACb,MAAM,MAAM;gBACZ,MAAM;gBACN,MAAM;YACR;YAEA,OAAO,OAAO,CAAC,MAAM,GAAG,IAAI;QAC9B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6DC,GACD,GAAG,cAAc,GAAG,SAAS,IAAI,EAAE,KAAK,CAAC;QACvC,IAAI,IAAI,IAAI,IAAI;QAChB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,KAAK;YACL,IAAI,CAAC,kBAAkB,GAAG;QAC5B,OAAO;YACL,GAAG;gBACD,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK;gBACtB,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK;gBACtB,IAAI,KAAK,KAAK,KAAK;YACrB,QAAS,KAAK,EAAG;YACjB,IAAI,KAAK,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,KAAK;YACjC,KAAK,KAAK;YACV,KAAK,KAAK;YACV,IAAI,CAAC,kBAAkB,GAAG;QAC5B;QAEA,MAAM,IAAI,QAAQ;QAClB,OAAO,KAAK,KAAK;IACnB;AACF;AAEA,IAAG,OAAO,OAAO,aAAY;IAC3B,OAAO,IAAI,GAAG,SAAS;AACzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8568, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/math.js"],"sourcesContent":["/**\n * @module Math\n * @for p5\n * @requires core\n */\n\nfunction math(p5, fn) {\n  /**\n   * Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * A vector can be thought of in different ways. In one view, a vector is like\n   * an arrow pointing in space. Vectors have both magnitude (length) and\n   * direction. This view is helpful for programming motion.\n   *\n   * A vector's components determine its magnitude and direction. For example,\n   * calling `createVector(3, 4)` creates a new\n   * <a href=\"#/p5.Vector\">p5.Vector</a> object with an x-component of 3 and a\n   * y-component of 4. From the origin, this vector's tip is 3 units to the\n   * right and 4 units down.\n   *\n   * You can also pass N dimensions to the `createVector` function. For example,\n   * calling `createVector(1, 2, 3, 4)` creates a vector with four components.\n   * This allows for flexibility in representing vectors in higher-dimensional\n   * spaces.\n   *\n   * <a href=\"#/p5.Vector\">p5.Vector</a> objects are often used to program\n   * motion because they simplify the math. For example, a moving ball has a\n   * position and a velocity. Position describes where the ball is in space. The\n   * ball's position vector extends from the origin to the ball's center.\n   * Velocity describes the ball's speed and the direction it's moving. If the\n   * ball is moving straight up, its velocity vector points straight up. Adding\n   * the ball's velocity vector to its position vector moves it, as in\n   * `pos.add(vel)`. Vector math relies on methods inside the\n   * <a href=\"#/p5.Vector\">p5.Vector</a> class.\n   *\n   * @method createVector\n   * @param {...Number} components Components of the vector.\n   * @return {p5.Vector} new <a href=\"#/p5.Vector\">p5.Vector</a> object.\n   *\n   * @example\n   * <div>\n   * <code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   background(200);\n   *\n   *   // Create p5.Vector objects.\n   *   let p1 = createVector(25, 25);\n   *   let p2 = createVector(50, 50);\n   *   let p3 = createVector(75, 75);\n   *\n   *   // Draw the dots.\n   *   strokeWeight(5);\n   *   point(p1);\n   *   point(p2);\n   *   point(p3);\n   *\n   *   describe('Three black dots form a diagonal line from top left to bottom right.');\n   * }\n   * </code>\n   * </div>\n   *\n   * <div>\n   * <code>\n   * let pos;\n   * let vel;\n   *\n   * function setup() {\n   *   createCanvas(100, 100);\n   *\n   *   // Create p5.Vector objects.\n   *   pos = createVector(50, 100);\n   *   vel = createVector(0, -1);\n   *\n   *   describe('A black dot moves from bottom to top on a gray square. The dot reappears at the bottom when it reaches the top.');\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *\n   *   // Add velocity to position.\n   *   pos.add(vel);\n   *\n   *   // If the dot reaches the top of the canvas,\n   *   // restart from the bottom.\n   *   if (pos.y < 0) {\n   *     pos.y = 100;\n   *   }\n   *\n   *   // Draw the dot.\n   *   strokeWeight(5);\n   *   point(pos);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createVector = function (x, y, z) {\n    if (this instanceof p5) {\n      return new p5.Vector(\n        this._fromRadians.bind(this),\n        this._toRadians.bind(this),\n        ...arguments\n      );\n    } else {\n      return new p5.Vector(x, y, z);\n    }\n  };\n\n  /**\n   * Creates a new <a href=\"#/p5.Matrix\">p5.Matrix</a> object.\n   *\n   * A matrix is a mathematical concept that is useful in many fields, including\n   * computer graphics. In p5.js, matrices are used to perform transformations\n   * on shapes and images. The `createMatrix` method can take a column-major\n   * array representation of a square matrix as an argument. In the current implementation we only use squared matrices.\n   *\n   * @private\n   * @method createMatrix\n   * @param {Array<Number>} components Column-major array representation of the square matrix.\n   *\n   * @return {p5.Matrix} new <a href=\"#/p5.Matrix\">p5.Matrix</a> object.\n   *\n   * @example\n   * <div class=\"norender\">\n   * <code>\n   * function setup() {\n   *   let matrix = createMatrix([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   * }\n   * </code>\n   * </div>\n   */\n  fn.createMatrix = function (...args) {\n    return new p5.Matrix(...args);\n  };\n}\n\nif (typeof p5 !== \"undefined\") {\n  math(p5, p5.prototype);\n}\n\nexport { math as default };\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;AAED,SAAS,KAAK,GAAE,EAAE,EAAE;IAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyFC,GACD,GAAG,YAAY,GAAG,SAAU,CAAC,EAAE,CAAC,EAAE,CAAC;QACjC,IAAI,IAAI,YAAY,KAAI;YACtB,OAAO,IAAI,IAAG,MAAM,CAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,GAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,MACtB;QAEP,OAAO;YACL,OAAO,IAAI,IAAG,MAAM,CAAC,GAAG,GAAG;QAC7B;IACF;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,GAAG,YAAY,GAAG,SAAU,GAAG,IAAI;QACjC,OAAO,IAAI,IAAG,MAAM,IAAI;IAC1B;AACF;AAEA,IAAI,OAAO,OAAO,aAAa;IAC7B,KAAK,IAAI,GAAG,SAAS;AACvB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8708, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ryan%20Purnomo/Bahasa-Pemrograman/Website/Javascript/NextJS/CG-GAMES/node_modules/p5/dist/math/index.js"],"sourcesContent":["import calculation from './calculation.js';\nimport noise from './noise.js';\nimport random from './random.js';\nimport trigonometry from './trigonometry.js';\nimport math$1 from './math.js';\nimport vector from './p5.Vector.js';\nimport '../constants-C-g_eAdC.js';\n\nfunction math(p5){\n  p5.registerAddon(calculation);\n  p5.registerAddon(noise);\n  p5.registerAddon(random);\n  p5.registerAddon(trigonometry);\n  p5.registerAddon(math$1);\n  p5.registerAddon(vector);\n}\n\nexport { math as default };\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,SAAS,KAAK,EAAE;IACd,GAAG,aAAa,CAAC,oJAAA,CAAA,UAAW;IAC5B,GAAG,aAAa,CAAC,8IAAA,CAAA,UAAK;IACtB,GAAG,aAAa,CAAC,+IAAA,CAAA,UAAM;IACvB,GAAG,aAAa,CAAC,qJAAA,CAAA,UAAY;IAC7B,GAAG,aAAa,CAAC,6IAAA,CAAA,UAAM;IACvB,GAAG,aAAa,CAAC,qJAAA,CAAA,UAAM;AACzB","ignoreList":[0],"debugId":null}}]
}