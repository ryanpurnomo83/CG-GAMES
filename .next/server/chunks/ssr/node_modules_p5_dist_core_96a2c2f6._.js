module.exports = {

"[project]/node_modules/p5/dist/core/transform.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @module Transform
 * @submodule Transform
 * @for p5
 * @requires core
 * @requires constants
 */ __turbopack_context__.s({
    "default": (()=>transform)
});
function transform(p51, fn) {
    /**
   * Applies a transformation matrix to the coordinate system.
   *
   * Transformations such as
   * <a href="#/p5/translate">translate()</a>,
   * <a href="#/p5/rotate">rotate()</a>, and
   * <a href="#/p5/scale">scale()</a>
   * use matrix-vector multiplication behind the scenes. A table of numbers,
   * called a matrix, encodes each transformation. The values in the matrix
   * then multiply each point on the canvas, which is represented by a vector.
   *
   * `applyMatrix()` allows for many transformations to be applied at once. See
   * <a href="https://en.wikipedia.org/wiki/Transformation_matrix" target="_blank">Wikipedia</a>
   * and <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web" target="_blank">MDN</a>
   * for more details about transformations.
   *
   * There are two ways to call `applyMatrix()` in two and three dimensions.
   *
   * In 2D mode, the parameters `a`, `b`, `c`, `d`, `e`, and `f`, correspond to
   * elements in the following transformation matrix:
   *
   * > <img style="max-width: 150px" src="assets/transformation-matrix.png"
   * alt="The transformation matrix used when applyMatrix is called in 2D mode."/>
   *
   * The numbers can be passed individually, as in
   * `applyMatrix(2, 0, 0, 0, 2, 0)`. They can also be passed in an array, as in
   * `applyMatrix([2, 0, 0, 0, 2, 0])`.
   *
   * In 3D mode, the parameters `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`,
   * `j`, `k`, `l`, `m`, `n`, `o`, and `p` correspond to elements in the
   * following transformation matrix:
   *
   * <img style="max-width: 300px" src="assets/transformation-matrix-4-4.png"
   * alt="The transformation matrix used when applyMatrix is called in 3D mode."/>
   *
   * The numbers can be passed individually, as in
   * `applyMatrix(2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1)`. They can
   * also be passed in an array, as in
   * `applyMatrix([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1])`.
   *
   * By default, transformations accumulate. The
   * <a href="#/p5/push">push()</a> and <a href="#/p5/pop">pop()</a> functions
   * can be used to isolate transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `applyMatrix()` inside the <a href="#/p5/draw">draw()</a> function won't
   * cause shapes to transform continuously.
   *
   * @method applyMatrix
   * @param  {Array} arr an array containing the elements of the transformation matrix. Its length should be either 6 (2D) or 16 (3D).
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Translate the origin to the center.
   *   applyMatrix(1, 0, 0, 1, 50, 50);
   *
   *   // Draw the circle at coordinates (0, 0).
   *   circle(0, 0, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Translate the origin to the center.
   *   let m = [1, 0, 0, 1, 50, 50];
   *   applyMatrix(m);
   *
   *   // Draw the circle at coordinates (0, 0).
   *   circle(0, 0, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe("A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right.");
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   let angle = QUARTER_PI;
   *   let ca = cos(angle);
   *   let sa = sin(angle);
   *   applyMatrix(ca, sa, -sa, ca, 0, 0);
   *
   *   // Draw a rectangle at coordinates (50, 0).
   *   rect(50, 0, 40, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     'Two white squares on a gray background. The larger square appears at the top-center. The smaller square appears at the top-left.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw a square at (30, 20).
   *   square(30, 20, 40);
   *
   *   // Scale the coordinate system by a factor of 0.5.
   *   applyMatrix(0.5, 0, 0, 0.5, 0, 0);
   *
   *   // Draw a square at (30, 20).
   *   // It appears at (15, 10) after scaling.
   *   square(30, 20, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white quadrilateral on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the shear factor.
   *   let angle = QUARTER_PI;
   *   let shearFactor = 1 / tan(HALF_PI - angle);
   *
   *   // Shear the coordinate system along the x-axis.
   *   applyMatrix(1, 0, shearFactor, 1, 0, 0);
   *
   *   // Draw the square.
   *   square(0, 0, 50);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube rotates slowly against a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system a little more each frame.
   *   let angle = frameCount * 0.01;
   *   let ca = cos(angle);
   *   let sa = sin(angle);
   *   applyMatrix(ca, 0, sa, 0, 0, 1, 0, 0, -sa, 0, ca, 0, 0, 0, 0, 1);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   */ /**
   * @method applyMatrix
   * @param  {Number} a an element of the transformation matrix.
   * @param  {Number} b an element of the transformation matrix.
   * @param  {Number} c an element of the transformation matrix.
   * @param  {Number} d an element of the transformation matrix.
   * @param  {Number} e an element of the transformation matrix.
   * @param  {Number} f an element of the transformation matrix.
   * @chainable
   */ /**
   * @method applyMatrix
   * @param  {Number} a
   * @param  {Number} b
   * @param  {Number} c
   * @param  {Number} d
   * @param  {Number} e
   * @param  {Number} f
   * @param  {Number} g an element of the transformation matrix.
   * @param  {Number} h an element of the transformation matrix.
   * @param  {Number} i an element of the transformation matrix.
   * @param  {Number} j an element of the transformation matrix.
   * @param  {Number} k an element of the transformation matrix.
   * @param  {Number} l an element of the transformation matrix.
   * @param  {Number} m an element of the transformation matrix.
   * @param  {Number} n an element of the transformation matrix.
   * @param  {Number} o an element of the transformation matrix.
   * @param  {Number} p an element of the transformation matrix.
   * @chainable
   */ fn.applyMatrix = function(...args) {
        let isTypedArray = args[0] instanceof Object.getPrototypeOf(Uint8Array);
        if (Array.isArray(args[0]) || isTypedArray) {
            this._renderer.applyMatrix(...args[0]);
        } else {
            this._renderer.applyMatrix(...args);
        }
        return this;
    };
    /**
   * Clears all transformations applied to the coordinate system.
   *
   * @method resetMatrix
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     'Two circles drawn on a gray background. A blue circle is at the top-left and a red circle is at the bottom-right.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Translate the origin to the center.
   *   translate(50, 50);
   *
   *   // Draw a blue circle at the coordinates (25, 25).
   *   fill('blue');
   *   circle(25, 25, 20);
   *
   *   // Clear all transformations.
   *   // The origin is now at the top-left corner.
   *   resetMatrix();
   *
   *   // Draw a red circle at the coordinates (25, 25).
   *   fill('red');
   *   circle(25, 25, 20);
   * }
   * </code>
   * </div>
   */ fn.resetMatrix = function() {
        this._renderer.resetMatrix();
        return this;
    };
    /**
   * Rotates the coordinate system.
   *
   * By default, the positive x-axis points to the right and the positive y-axis
   * points downward. The `rotate()` function changes this orientation by
   * rotating the coordinate system about the origin. Everything drawn after
   * `rotate()` is called will appear to be rotated.
   *
   * The first parameter, `angle`, is the amount to rotate. For example, calling
   * `rotate(1)` rotates the coordinate system clockwise 1 radian which is
   * nearly 57˚. `rotate()` interprets angle values using the current
   * <a href="#/p5/angleMode">angleMode()</a>.
   *
   * The second parameter, `axis`, is optional. It's used to orient 3D rotations
   * in WebGL mode. If a <a href="#/p5.Vector">p5.Vector</a> is passed, as in
   * `rotate(QUARTER_PI, myVector)`, then the coordinate system will rotate
   * `QUARTER_PI` radians about `myVector`. If an array of vector components is
   * passed, as in `rotate(QUARTER_PI, [1, 0, 0])`, then the coordinate system
   * will rotate `QUARTER_PI` radians about a vector with the components
   * `[1, 0, 0]`.
   *
   * By default, transformations accumulate. For example, calling `rotate(1)`
   * twice has the same effect as calling `rotate(2)` once. The
   * <a href="#/p5/push">push()</a> and <a href="#/p5/pop">pop()</a> functions
   * can be used to isolate transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `rotate(1)` inside the <a href="#/p5/draw">draw()</a> function won't cause
   * shapes to spin.
   *
   * @method rotate
   * @param  {Number} angle angle of rotation in the current <a href="#/p5/angleMode">angleMode()</a>.
   * @param  {p5.Vector|Number[]} [axis] axis to rotate about in 3D.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     "A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right."
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotate(QUARTER_PI);
   *
   *   // Draw a rectangle at coordinates (50, 0).
   *   rect(50, 0, 40, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     "A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right."
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotate(QUARTER_PI / 2);
   *
   *   // Rotate the coordinate system another 1/16 turn.
   *   rotate(QUARTER_PI / 2);
   *
   *   // Draw a rectangle at coordinates (50, 0).
   *   rect(50, 0, 40, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Use degrees.
   *   angleMode(DEGREES);
   *
   *   describe(
   *     "A white rectangle on a gray background. The rectangle's long axis runs from top-left to bottom-right."
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotate(45);
   *
   *   // Draw a rectangle at coordinates (50, 0).
   *   rect(50, 0, 40, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     'A white rectangle on a gray background. The rectangle rotates slowly about the top-left corner. It disappears and reappears periodically.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system a little more each frame.
   *   let angle = frameCount * 0.01;
   *   rotate(angle);
   *
   *   // Draw a rectangle at coordinates (50, 0).
   *   rect(50, 0, 40, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe("A cube on a gray background. The cube's front face points to the top-right.");
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system 1/8 turn about
   *   // the axis [1, 1, 0].
   *   let axis = createVector(1, 1, 0);
   *   rotate(QUARTER_PI, axis);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe("A cube on a gray background. The cube's front face points to the top-right.");
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Rotate the coordinate system 1/8 turn about
   *   // the axis [1, 1, 0].
   *   let axis = [1, 1, 0];
   *   rotate(QUARTER_PI, axis);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   */ fn.rotate = function(angle, axis) {
        // p5._validateParameters('rotate', arguments);
        this._renderer.rotate(this._toRadians(angle), axis);
        return this;
    };
    /**
   * Rotates the coordinate system about the x-axis in WebGL mode.
   *
   * The parameter, `angle`, is the amount to rotate. For example, calling
   * `rotateX(1)` rotates the coordinate system about the x-axis by 1 radian.
   * `rotateX()` interprets angle values using the current
   * <a href="#/p5/angleMode">angleMode()</a>.
   *
   * By default, transformations accumulate. For example, calling `rotateX(1)`
   * twice has the same effect as calling `rotateX(2)` once. The
   * <a href="#/p5/push">push()</a> and <a href="#/p5/pop">pop()</a> functions
   * can be used to isolate transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `rotateX(1)` inside the <a href="#/p5/draw">draw()</a> function won't cause
   * shapes to spin.
   *
   * @method  rotateX
   * @param  {Number} angle angle of rotation in the current <a href="#/p5/angleMode">angleMode()</a>.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotateX(QUARTER_PI);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotateX(QUARTER_PI / 2);
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotateX(QUARTER_PI / 2);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   // Use degrees.
   *   angleMode(DEGREES);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotateX(45);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube rotates slowly against a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system a little more each frame.
   *   let angle = frameCount * 0.01;
   *   rotateX(angle);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   */ fn.rotateX = function(angle) {
        this._assert3d('rotateX');
        // p5._validateParameters('rotateX', arguments);
        this._renderer.rotateX(this._toRadians(angle));
        return this;
    };
    /**
   * Rotates the coordinate system about the y-axis in WebGL mode.
   *
   * The parameter, `angle`, is the amount to rotate. For example, calling
   * `rotateY(1)` rotates the coordinate system about the y-axis by 1 radian.
   * `rotateY()` interprets angle values using the current
   * <a href="#/p5/angleMode">angleMode()</a>.
   *
   * By default, transformations accumulate. For example, calling `rotateY(1)`
   * twice has the same effect as calling `rotateY(2)` once. The
   * <a href="#/p5/push">push()</a> and <a href="#/p5/pop">pop()</a> functions
   * can be used to isolate transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `rotateY(1)` inside the <a href="#/p5/draw">draw()</a> function won't cause
   * shapes to spin.
   *
   * @method rotateY
   * @param  {Number} angle angle of rotation in the current <a href="#/p5/angleMode">angleMode()</a>.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotateY(QUARTER_PI);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotateY(QUARTER_PI / 2);
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotateY(QUARTER_PI / 2);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   // Use degrees.
   *   angleMode(DEGREES);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotateY(45);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube rotates slowly against a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system a little more each frame.
   *   let angle = frameCount * 0.01;
   *   rotateY(angle);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   */ fn.rotateY = function(angle) {
        this._assert3d('rotateY');
        // p5._validateParameters('rotateY', arguments);
        this._renderer.rotateY(this._toRadians(angle));
        return this;
    };
    /**
   * Rotates the coordinate system about the z-axis in WebGL mode.
   *
   * The parameter, `angle`, is the amount to rotate. For example, calling
   * `rotateZ(1)` rotates the coordinate system about the z-axis by 1 radian.
   * `rotateZ()` interprets angle values using the current
   * <a href="#/p5/angleMode">angleMode()</a>.
   *
   * By default, transformations accumulate. For example, calling `rotateZ(1)`
   * twice has the same effect as calling `rotateZ(2)` once. The
   * <a href="#/p5/push">push()</a> and <a href="#/p5/pop">pop()</a> functions
   * can be used to isolate transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `rotateZ(1)` inside the <a href="#/p5/draw">draw()</a> function won't cause
   * shapes to spin.
   *
   * @method rotateZ
   * @param  {Number} angle angle of rotation in the current <a href="#/p5/angleMode">angleMode()</a>.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotateZ(QUARTER_PI);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotateZ(QUARTER_PI / 2);
   *
   *   // Rotate the coordinate system 1/16 turn.
   *   rotateZ(QUARTER_PI / 2);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   // Use degrees.
   *   angleMode(DEGREES);
   *
   *   describe('A white cube on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system 1/8 turn.
   *   rotateZ(45);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe('A white cube rotates slowly against a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Rotate the coordinate system a little more each frame.
   *   let angle = frameCount * 0.01;
   *   rotateZ(angle);
   *
   *   // Draw a box.
   *   box();
   * }
   * </code>
   * </div>
   */ fn.rotateZ = function(angle) {
        this._assert3d('rotateZ');
        // p5._validateParameters('rotateZ', arguments);
        this._renderer.rotateZ(this._toRadians(angle));
        return this;
    };
    /**
   * Scales the coordinate system.
   *
   * By default, shapes are drawn at their original scale. A rectangle that's 50
   * pixels wide appears to take up half the width of a 100 pixel-wide canvas.
   * The `scale()` function can shrink or stretch the coordinate system so that
   * shapes appear at different sizes. There are two ways to call `scale()` with
   * parameters that set the scale factor(s).
   *
   * The first way to call `scale()` uses numbers to set the amount of scaling.
   * The first parameter, `s`, sets the amount to scale each axis. For example,
   * calling `scale(2)` stretches the x-, y-, and z-axes by a factor of 2. The
   * next two parameters, `y` and `z`, are optional. They set the amount to
   * scale the y- and z-axes. For example, calling `scale(2, 0.5, 1)` stretches
   * the x-axis by a factor of 2, shrinks the y-axis by a factor of 0.5, and
   * leaves the z-axis unchanged.
   *
   * The second way to call `scale()` uses a <a href="#/p5.Vector">p5.Vector</a>
   * object to set the scale factors. For example, calling `scale(myVector)`
   * uses the x-, y-, and z-components of `myVector` to set the amount of
   * scaling along the x-, y-, and z-axes. Doing so is the same as calling
   * `scale(myVector.x, myVector.y, myVector.z)`.
   *
   * By default, transformations accumulate. For example, calling `scale(1)`
   * twice has the same effect as calling `scale(2)` once. The
   * <a href="#/p5/push">push()</a> and <a href="#/p5/pop">pop()</a> functions
   * can be used to isolate transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `scale(2)` inside the <a href="#/p5/draw">draw()</a> function won't cause
   * shapes to grow continuously.
   *
   * @method scale
   * @param  {Number|p5.Vector|Number[]} s amount to scale along the positive x-axis.
   * @param  {Number} [y] amount to scale along the positive y-axis. Defaults to `s`.
   * @param  {Number} [z] amount to scale along the positive z-axis. Defaults to `y`.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     'Two white squares on a gray background. The larger square appears at the top-center. The smaller square appears at the top-left.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw a square at (30, 20).
   *   square(30, 20, 40);
   *
   *   // Scale the coordinate system by a factor of 0.5.
   *   scale(0.5);
   *
   *   // Draw a square at (30, 20).
   *   // It appears at (15, 10) after scaling.
   *   square(30, 20, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A rectangle and a square drawn in white on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw a square at (30, 20).
   *   square(30, 20, 40);
   *
   *   // Scale the coordinate system by factors of
   *   // 0.5 along the x-axis and
   *   // 1.3 along the y-axis.
   *   scale(0.5, 1.3);
   *
   *   // Draw a square at (30, 20).
   *   // It appears as a rectangle at (15, 26) after scaling.
   *   square(30, 20, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A rectangle and a square drawn in white on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw a square at (30, 20).
   *   square(30, 20, 40);
   *
   *   // Create a p5.Vector object.
   *   let v = createVector(0.5, 1.3);
   *
   *   // Scale the coordinate system by factors of
   *   // 0.5 along the x-axis and
   *   // 1.3 along the y-axis.
   *   scale(v);
   *
   *   // Draw a square at (30, 20).
   *   // It appears as a rectangle at (15, 26) after scaling.
   *   square(30, 20, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe(
   *     'A red box and a blue box drawn on a gray background. The red box appears embedded in the blue box.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Turn on the lights.
   *   lights();
   *
   *   // Style the spheres.
   *   noStroke();
   *
   *   // Draw the red sphere.
   *   fill('red');
   *   box();
   *
   *   // Scale the coordinate system by factors of
   *   // 0.5 along the x-axis and
   *   // 1.3 along the y-axis and
   *   // 2 along the z-axis.
   *   scale(0.5, 1.3, 2);
   *
   *   // Draw the blue sphere.
   *   fill('blue');
   *   box();
   * }
   * </code>
   * </div>
   */ /**
   * @method scale
   * @param  {p5.Vector|Number[]} scales vector whose components should be used to scale.
   * @chainable
   */ fn.scale = function(x, y, z) {
        // p5._validateParameters('scale', arguments);
        // Only check for Vector argument type if Vector is available
        if (x instanceof p51.Vector) {
            const v = x;
            x = v.x;
            y = v.y;
            z = v.z;
        } else if (Array.isArray(x)) {
            const rg = x;
            x = rg[0];
            y = rg[1];
            z = rg[2] || 1;
        }
        if (isNaN(y)) {
            y = z = x;
        } else if (isNaN(z)) {
            z = 1;
        }
        this._renderer.scale(x, y, z);
        return this;
    };
    /**
   * Shears the x-axis so that shapes appear skewed.
   *
   * By default, the x- and y-axes are perpendicular. The `shearX()` function
   * transforms the coordinate system so that x-coordinates are translated while
   * y-coordinates are fixed.
   *
   * The first parameter, `angle`, is the amount to shear. For example, calling
   * `shearX(1)` transforms all x-coordinates using the formula
   * `x = x + y * tan(angle)`. `shearX()` interprets angle values using the
   * current <a href="#/p5/angleMode">angleMode()</a>.
   *
   * By default, transformations accumulate. For example, calling
   * `shearX(1)` twice has the same effect as calling `shearX(2)` once. The
   * <a href="#/p5/push">push()</a> and
   * <a href="#/p5/pop">pop()</a> functions can be used to isolate
   * transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `shearX(1)` inside the <a href="#/p5/draw">draw()</a> function won't
   * cause shapes to shear continuously.
   *
   * @method shearX
   * @param  {Number} angle angle to shear by in the current <a href="#/p5/angleMode">angleMode()</a>.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white quadrilateral on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Shear the coordinate system along the x-axis.
   *   shearX(QUARTER_PI);
   *
   *   // Draw the square.
   *   square(0, 0, 50);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Use degrees.
   *   angleMode(DEGREES);
   *
   *   describe('A white quadrilateral on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Shear the coordinate system along the x-axis.
   *   shearX(45);
   *
   *   // Draw the square.
   *   square(0, 0, 50);
   * }
   * </code>
   * </div>
   */ fn.shearX = function(angle) {
        // p5._validateParameters('shearX', arguments);
        const rad = this._toRadians(angle);
        this._renderer.applyMatrix(1, 0, Math.tan(rad), 1, 0, 0);
        return this;
    };
    /**
   * Shears the y-axis so that shapes appear skewed.
   *
   * By default, the x- and y-axes are perpendicular. The `shearY()` function
   * transforms the coordinate system so that y-coordinates are translated while
   * x-coordinates are fixed.
   *
   * The first parameter, `angle`, is the amount to shear. For example, calling
   * `shearY(1)` transforms all y-coordinates using the formula
   * `y = y + x * tan(angle)`. `shearY()` interprets angle values using the
   * current <a href="#/p5/angleMode">angleMode()</a>.
   *
   * By default, transformations accumulate. For example, calling
   * `shearY(1)` twice has the same effect as calling `shearY(2)` once. The
   * <a href="#/p5/push">push()</a> and
   * <a href="#/p5/pop">pop()</a> functions can be used to isolate
   * transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `shearY(1)` inside the <a href="#/p5/draw">draw()</a> function won't
   * cause shapes to shear continuously.
   *
   * @method shearY
   * @param  {Number} angle angle to shear by in the current <a href="#/p5/angleMode">angleMode()</a>.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white quadrilateral on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Shear the coordinate system along the x-axis.
   *   shearY(QUARTER_PI);
   *
   *   // Draw the square.
   *   square(0, 0, 50);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Use degrees.
   *   angleMode(DEGREES);
   *
   *   describe('A white quadrilateral on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Shear the coordinate system along the x-axis.
   *   shearY(45);
   *
   *   // Draw the square.
   *   square(0, 0, 50);
   * }
   * </code>
   * </div>
   */ fn.shearY = function(angle) {
        // p5._validateParameters('shearY', arguments);
        const rad = this._toRadians(angle);
        this._renderer.applyMatrix(1, Math.tan(rad), 0, 1, 0, 0);
        return this;
    };
    /**
   * Translates the coordinate system.
   *
   * By default, the origin `(0, 0)` is at the sketch's top-left corner in 2D
   * mode and center in WebGL mode. The `translate()` function shifts the origin
   * to a different position. Everything drawn after `translate()` is called
   * will appear to be shifted. There are two ways to call `translate()` with
   * parameters that set the origin's position.
   *
   * The first way to call `translate()` uses numbers to set the amount of
   * translation. The first two parameters, `x` and `y`, set the amount to
   * translate along the positive x- and y-axes. For example, calling
   * `translate(20, 30)` translates the origin 20 pixels along the x-axis and 30
   * pixels along the y-axis. The third parameter, `z`, is optional. It sets the
   * amount to translate along the positive z-axis. For example, calling
   * `translate(20, 30, 40)` translates the origin 20 pixels along the x-axis,
   * 30 pixels along the y-axis, and 40 pixels along the z-axis.
   *
   * The second way to call `translate()` uses a
   * <a href="#/p5.Vector">p5.Vector</a> object to set the amount of
   * translation. For example, calling `translate(myVector)` uses the x-, y-,
   * and z-components of `myVector` to set the amount to translate along the x-,
   * y-, and z-axes. Doing so is the same as calling
   * `translate(myVector.x, myVector.y, myVector.z)`.
   *
   * By default, transformations accumulate. For example, calling
   * `translate(10, 0)` twice has the same effect as calling
   * `translate(20, 0)` once. The <a href="#/p5/push">push()</a> and
   * <a href="#/p5/pop">pop()</a> functions can be used to isolate
   * transformations within distinct drawing groups.
   *
   * Note: Transformations are reset at the beginning of the draw loop. Calling
   * `translate(10, 0)` inside the <a href="#/p5/draw">draw()</a> function won't
   * cause shapes to move continuously.
   *
   * @method translate
   * @param  {Number} x amount to translate along the positive x-axis.
   * @param  {Number} y amount to translate along the positive y-axis.
   * @param  {Number} [z] amount to translate along the positive z-axis.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Translate the origin to the center.
   *   translate(50, 50);
   *
   *   // Draw a circle at coordinates (0, 0).
   *   circle(0, 0, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe(
   *     'Two circles drawn on a gray background. The blue circle on the right overlaps the red circle at the center.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Translate the origin to the center.
   *   translate(50, 50);
   *
   *   // Draw the red circle.
   *   fill('red');
   *   circle(0, 0, 40);
   *
   *   // Translate the origin to the right.
   *   translate(25, 0);
   *
   *   // Draw the blue circle.
   *   fill('blue');
   *   circle(0, 0, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle moves slowly from left to right on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the x-coordinate.
   *   let x = frameCount * 0.2;
   *
   *   // Translate the origin.
   *   translate(x, 50);
   *
   *   // Draw a circle at coordinates (0, 0).
   *   circle(0, 0, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Create a p5.Vector object.
   *   let v = createVector(50, 50);
   *
   *   // Translate the origin by the vector.
   *   translate(v);
   *
   *   // Draw a circle at coordinates (0, 0).
   *   circle(0, 0, 40);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe(
   *     'Two spheres sitting side-by-side on gray background. The sphere at the center is red. The sphere on the right is blue.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Turn on the lights.
   *   lights();
   *
   *   // Style the spheres.
   *   noStroke();
   *
   *   // Draw the red sphere.
   *   fill('red');
   *   sphere(10);
   *
   *   // Translate the origin to the right.
   *   translate(30, 0, 0);
   *
   *   // Draw the blue sphere.
   *   fill('blue');
   *   sphere(10);
   * }
   * </code>
   * </div>
   */ /**
   * @method translate
   * @param  {p5.Vector} vector vector by which to translate.
   * @chainable
   */ fn.translate = function(x, y, z) {
        // p5._validateParameters('translate', arguments);
        if (this._renderer.isP3D) {
            this._renderer.translate(x, y, z);
        } else {
            this._renderer.translate(x, y);
        }
        return this;
    };
    /**
   * Begins a drawing group that contains its own styles and transformations.
   *
   * By default, styles such as <a href="#/p5/fill">fill()</a> and
   * transformations such as <a href="#/p5/rotate">rotate()</a> are applied to
   * all drawing that follows. The `push()` and <a href="#/p5/pop">pop()</a>
   * functions can limit the effect of styles and transformations to a specific
   * group of shapes, images, and text. For example, a group of shapes could be
   * translated to follow the mouse without affecting the rest of the sketch:
   *
   * ```js
   * // Begin the drawing group.
   * push();
   *
   * // Translate the origin to the mouse's position.
   * translate(mouseX, mouseY);
   *
   * // Style the face.
   * noStroke();
   * fill('green');
   *
   * // Draw the face.
   * circle(0, 0, 60);
   *
   * // Style the eyes.
   * fill('white');
   *
   * // Draw the left eye.
   * ellipse(-20, -20, 30, 20);
   *
   * // Draw the right eye.
   * ellipse(20, -20, 30, 20);
   *
   * // End the drawing group.
   * pop();
   *
   * // Draw a bug.
   * let x = random(0, 100);
   * let y = random(0, 100);
   * text('🦟', x, y);
   * ```
   *
   * In the code snippet above, the bug's position isn't affected by
   * `translate(mouseX, mouseY)` because that transformation is contained
   * between `push()` and <a href="#/p5/pop">pop()</a>. The bug moves around
   * the entire canvas as expected.
   *
   * Note: `push()` and <a href="#/p5/pop">pop()</a> are always called as a
   * pair. Both functions are required to begin and end a drawing group.
   *
   * `push()` and <a href="#/p5/pop">pop()</a> can also be nested to create
   * subgroups. For example, the code snippet above could be changed to give
   * more detail to the frog’s eyes:
   *
   * ```js
   * // Begin the drawing group.
   * push();
   *
   * // Translate the origin to the mouse's position.
   * translate(mouseX, mouseY);
   *
   * // Style the face.
   * noStroke();
   * fill('green');
   *
   * // Draw a face.
   * circle(0, 0, 60);
   *
   * // Style the eyes.
   * fill('white');
   *
   * // Draw the left eye.
   * push();
   * translate(-20, -20);
   * ellipse(0, 0, 30, 20);
   * fill('black');
   * circle(0, 0, 8);
   * pop();
   *
   * // Draw the right eye.
   * push();
   * translate(20, -20);
   * ellipse(0, 0, 30, 20);
   * fill('black');
   * circle(0, 0, 8);
   * pop();
   *
   * // End the drawing group.
   * pop();
   *
   * // Draw a bug.
   * let x = random(0, 100);
   * let y = random(0, 100);
   * text('🦟', x, y);
   * ```
   *
   * In this version, the code to draw each eye is contained between its own
   * `push()` and <a href="#/p5/pop">pop()</a> functions. Doing so makes it
   * easier to add details in the correct part of a drawing.
   *
   * `push()` and <a href="#/p5/pop">pop()</a> contain the effects of the
   * following functions:
   *
   * - <a href="#/p5/fill">fill()</a>
   * - <a href="#/p5/noFill">noFill()</a>
   * - <a href="#/p5/noStroke">noStroke()</a>
   * - <a href="#/p5/stroke">stroke()</a>
   * - <a href="#/p5/tint">tint()</a>
   * - <a href="#/p5/noTint">noTint()</a>
   * - <a href="#/p5/strokeWeight">strokeWeight()</a>
   * - <a href="#/p5/strokeCap">strokeCap()</a>
   * - <a href="#/p5/strokeJoin">strokeJoin()</a>
   * - <a href="#/p5/imageMode">imageMode()</a>
   * - <a href="#/p5/rectMode">rectMode()</a>
   * - <a href="#/p5/ellipseMode">ellipseMode()</a>
   * - <a href="#/p5/colorMode">colorMode()</a>
   * - <a href="#/p5/textAlign">textAlign()</a>
   * - <a href="#/p5/textFont">textFont()</a>
   * - <a href="#/p5/textSize">textSize()</a>
   * - <a href="#/p5/textLeading">textLeading()</a>
   * - <a href="#/p5/applyMatrix">applyMatrix()</a>
   * - <a href="#/p5/resetMatrix">resetMatrix()</a>
   * - <a href="#/p5/rotate">rotate()</a>
   * - <a href="#/p5/scale">scale()</a>
   * - <a href="#/p5/shearX">shearX()</a>
   * - <a href="#/p5/shearY">shearY()</a>
   * - <a href="#/p5/translate">translate()</a>
   *
   * In WebGL mode, `push()` and <a href="#/p5/pop">pop()</a> contain the
   * effects of a few additional styles:
   *
   * - <a href="#/p5/setCamera">setCamera()</a>
   * - <a href="#/p5/ambientLight">ambientLight()</a>
   * - <a href="#/p5/directionalLight">directionalLight()</a>
   * - <a href="#/p5/pointLight">pointLight()</a> <a href="#/p5/texture">texture()</a>
   * - <a href="#/p5/specularMaterial">specularMaterial()</a>
   * - <a href="#/p5/shininess">shininess()</a>
   * - <a href="#/p5/normalMaterial">normalMaterial()</a>
   * - <a href="#/p5/shader">shader()</a>
   *
   * @method push
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   background(200);
   *
   *   // Draw the left circle.
   *   circle(25, 50, 20);
   *
   *   // Begin the drawing group.
   *   push();
   *
   *   // Translate the origin to the center.
   *   translate(50, 50);
   *
   *   // Style the circle.
   *   strokeWeight(5);
   *   stroke('royalblue');
   *   fill('orange');
   *
   *   // Draw the circle.
   *   circle(0, 0, 20);
   *
   *   // End the drawing group.
   *   pop();
   *
   *   // Draw the right circle.
   *   circle(75, 50, 20);
   *
   *   describe(
   *     'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'
   *   );
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Slow the frame rate.
   *   frameRate(24);
   *
   *   describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Begin the drawing group.
   *   push();
   *
   *   // Translate the origin to the mouse's position.
   *   translate(mouseX, mouseY);
   *
   *   // Style the face.
   *   noStroke();
   *   fill('green');
   *
   *   // Draw a face.
   *   circle(0, 0, 60);
   *
   *   // Style the eyes.
   *   fill('white');
   *
   *   // Draw the left eye.
   *   push();
   *   translate(-20, -20);
   *   ellipse(0, 0, 30, 20);
   *   fill('black');
   *   circle(0, 0, 8);
   *   pop();
   *
   *   // Draw the right eye.
   *   push();
   *   translate(20, -20);
   *   ellipse(0, 0, 30, 20);
   *   fill('black');
   *   circle(0, 0, 8);
   *   pop();
   *
   *   // End the drawing group.
   *   pop();
   *
   *   // Draw a bug.
   *   let x = random(0, 100);
   *   let y = random(0, 100);
   *   text('🦟', x, y);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe(
   *     'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Draw the red sphere.
   *   push();
   *   translate(-25, 0, 0);
   *   noStroke();
   *   directionalLight(255, 0, 0, 0, 0, -1);
   *   sphere(20);
   *   pop();
   *
   *   // Draw the blue sphere.
   *   push();
   *   translate(25, 0, 0);
   *   strokeWeight(0.3);
   *   stroke(0, 0, 255);
   *   noFill();
   *   sphere(20);
   *   pop();
   * }
   * </code>
   * </div>
   */ fn.push = function() {
        this._renderer.push();
    };
    /**
   * Ends a drawing group that contains its own styles and transformations.
   *
   * By default, styles such as <a href="#/p5/fill">fill()</a> and
   * transformations such as <a href="#/p5/rotate">rotate()</a> are applied to
   * all drawing that follows. The <a href="#/p5/push">push()</a> and `pop()`
   * functions can limit the effect of styles and transformations to a specific
   * group of shapes, images, and text. For example, a group of shapes could be
   * translated to follow the mouse without affecting the rest of the sketch:
   *
   * ```js
   * // Begin the drawing group.
   * push();
   *
   * // Translate the origin to the mouse's position.
   * translate(mouseX, mouseY);
   *
   * // Style the face.
   * noStroke();
   * fill('green');
   *
   * // Draw the face.
   * circle(0, 0, 60);
   *
   * // Style the eyes.
   * fill('white');
   *
   * // Draw the left eye.
   * ellipse(-20, -20, 30, 20);
   *
   * // Draw the right eye.
   * ellipse(20, -20, 30, 20);
   *
   * // End the drawing group.
   * pop();
   *
   * // Draw a bug.
   * let x = random(0, 100);
   * let y = random(0, 100);
   * text('🦟', x, y);
   * ```
   *
   * In the code snippet above, the bug's position isn't affected by
   * `translate(mouseX, mouseY)` because that transformation is contained
   * between <a href="#/p5/push">push()</a> and `pop()`. The bug moves around
   * the entire canvas as expected.
   *
   * Note: <a href="#/p5/push">push()</a> and `pop()` are always called as a
   * pair. Both functions are required to begin and end a drawing group.
   *
   * <a href="#/p5/push">push()</a> and `pop()` can also be nested to create
   * subgroups. For example, the code snippet above could be changed to give
   * more detail to the frog’s eyes:
   *
   * ```js
   * // Begin the drawing group.
   * push();
   *
   * // Translate the origin to the mouse's position.
   * translate(mouseX, mouseY);
   *
   * // Style the face.
   * noStroke();
   * fill('green');
   *
   * // Draw a face.
   * circle(0, 0, 60);
   *
   * // Style the eyes.
   * fill('white');
   *
   * // Draw the left eye.
   * push();
   * translate(-20, -20);
   * ellipse(0, 0, 30, 20);
   * fill('black');
   * circle(0, 0, 8);
   * pop();
   *
   * // Draw the right eye.
   * push();
   * translate(20, -20);
   * ellipse(0, 0, 30, 20);
   * fill('black');
   * circle(0, 0, 8);
   * pop();
   *
   * // End the drawing group.
   * pop();
   *
   * // Draw a bug.
   * let x = random(0, 100);
   * let y = random(0, 100);
   * text('🦟', x, y);
   * ```
   *
   * In this version, the code to draw each eye is contained between its own
   * <a href="#/p5/push">push()</a> and `pop()` functions. Doing so makes it
   * easier to add details in the correct part of a drawing.
   *
   * <a href="#/p5/push">push()</a> and `pop()` contain the effects of the
   * following functions:
   *
   * - <a href="#/p5/fill">fill()</a>
   * - <a href="#/p5/noFill">noFill()</a>
   * - <a href="#/p5/noStroke">noStroke()</a>
   * - <a href="#/p5/stroke">stroke()</a>
   * - <a href="#/p5/tint">tint()</a>
   * - <a href="#/p5/noTint">noTint()</a>
   * - <a href="#/p5/strokeWeight">strokeWeight()</a>
   * - <a href="#/p5/strokeCap">strokeCap()</a>
   * - <a href="#/p5/strokeJoin">strokeJoin()</a>
   * - <a href="#/p5/imageMode">imageMode()</a>
   * - <a href="#/p5/rectMode">rectMode()</a>
   * - <a href="#/p5/ellipseMode">ellipseMode()</a>
   * - <a href="#/p5/colorMode">colorMode()</a>
   * - <a href="#/p5/textAlign">textAlign()</a>
   * - <a href="#/p5/textFont">textFont()</a>
   * - <a href="#/p5/textSize">textSize()</a>
   * - <a href="#/p5/textLeading">textLeading()</a>
   * - <a href="#/p5/applyMatrix">applyMatrix()</a>
   * - <a href="#/p5/resetMatrix">resetMatrix()</a>
   * - <a href="#/p5/rotate">rotate()</a>
   * - <a href="#/p5/scale">scale()</a>
   * - <a href="#/p5/shearX">shearX()</a>
   * - <a href="#/p5/shearY">shearY()</a>
   * - <a href="#/p5/translate">translate()</a>
   *
   * In WebGL mode, <a href="#/p5/push">push()</a> and `pop()` contain the
   * effects of a few additional styles:
   *
   * - <a href="#/p5/setCamera">setCamera()</a>
   * - <a href="#/p5/ambientLight">ambientLight()</a>
   * - <a href="#/p5/directionalLight">directionalLight()</a>
   * - <a href="#/p5/pointLight">pointLight()</a> <a href="#/p5/texture">texture()</a>
   * - <a href="#/p5/specularMaterial">specularMaterial()</a>
   * - <a href="#/p5/shininess">shininess()</a>
   * - <a href="#/p5/normalMaterial">normalMaterial()</a>
   * - <a href="#/p5/shader">shader()</a>
   *
   * @method pop
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   background(200);
   *
   *   // Draw the left circle.
   *   circle(25, 50, 20);
   *
   *   // Begin the drawing group.
   *   push();
   *
   *   // Translate the origin to the center.
   *   translate(50, 50);
   *
   *   // Style the circle.
   *   strokeWeight(5);
   *   stroke('royalblue');
   *   fill('orange');
   *
   *   // Draw the circle.
   *   circle(0, 0, 20);
   *
   *   // End the drawing group.
   *   pop();
   *
   *   // Draw the right circle.
   *   circle(75, 50, 20);
   *
   *   describe(
   *     'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'
   *   );
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Slow the frame rate.
   *   frameRate(24);
   *
   *   describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Begin the drawing group.
   *   push();
   *
   *   // Translate the origin to the mouse's position.
   *   translate(mouseX, mouseY);
   *
   *   // Style the face.
   *   noStroke();
   *   fill('green');
   *
   *   // Draw a face.
   *   circle(0, 0, 60);
   *
   *   // Style the eyes.
   *   fill('white');
   *
   *   // Draw the left eye.
   *   push();
   *   translate(-20, -20);
   *   ellipse(0, 0, 30, 20);
   *   fill('black');
   *   circle(0, 0, 8);
   *   pop();
   *
   *   // Draw the right eye.
   *   push();
   *   translate(20, -20);
   *   ellipse(0, 0, 30, 20);
   *   fill('black');
   *   circle(0, 0, 8);
   *   pop();
   *
   *   // End the drawing group.
   *   pop();
   *
   *   // Draw a bug.
   *   let x = random(0, 100);
   *   let y = random(0, 100);
   *   text('🦟', x, y);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Click and drag the mouse to view the scene from different angles.
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *
   *   describe(
   *     'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Enable orbiting with the mouse.
   *   orbitControl();
   *
   *   // Draw the red sphere.
   *   push();
   *   translate(-25, 0, 0);
   *   noStroke();
   *   directionalLight(255, 0, 0, 0, 0, -1);
   *   sphere(20);
   *   pop();
   *
   *   // Draw the blue sphere.
   *   push();
   *   translate(25, 0, 0);
   *   strokeWeight(0.3);
   *   stroke(0, 0, 255);
   *   noFill();
   *   sphere(20);
   *   pop();
   * }
   * </code>
   * </div>
   */ fn.pop = function() {
        this._renderer.pop();
    };
}
if (typeof p5 !== 'undefined') {
    transform(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/structure.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @module Structure
 * @submodule Structure
 * @for p5
 * @requires core
 */ __turbopack_context__.s({
    "default": (()=>structure)
});
function structure(p51, fn) {
    /**
   * Stops the code in <a href="#/p5/draw">draw()</a> from running repeatedly.
   *
   * By default, <a href="#/p5/draw">draw()</a> tries to run 60 times per
   * second. Calling `noLoop()` stops <a href="#/p5/draw">draw()</a> from
   * repeating. The draw loop can be restarted by calling
   * <a href="#/p5/loop">loop()</a>. <a href="#/p5/draw">draw()</a> can be run
   * once by calling <a href="#/p5/redraw">redraw()</a>.
   *
   * The <a href="#/p5/isLooping">isLooping()</a> function can be used to check
   * whether a sketch is looping, as in `isLooping() === true`.
   *
   * @method noLoop
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Turn off the draw loop.
   *   noLoop();
   *
   *   describe('A white half-circle on the left edge of a gray square.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the circle's x-coordinate.
   *   let x = frameCount;
   *
   *   // Draw the circle.
   *   // Normally, the circle would move from left to right.
   *   circle(x, 50, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Double-click to stop the draw loop.
   *
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Slow the frame rate.
   *   frameRate(5);
   *
   *   describe('A white circle moves randomly on a gray background. It stops moving when the user double-clicks.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the circle's coordinates.
   *   let x = random(0, 100);
   *   let y = random(0, 100);
   *
   *   // Draw the circle.
   *   // Normally, the circle would move from left to right.
   *   circle(x, y, 20);
   * }
   *
   * // Stop the draw loop when the user double-clicks.
   * function doubleClicked() {
   *   noLoop();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * let startButton;
   * let stopButton;
   *
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Create the button elements and place them
   *   // beneath the canvas.
   *   startButton = createButton('▶');
   *   startButton.position(0, 100);
   *   startButton.size(50, 20);
   *   stopButton = createButton('◾');
   *   stopButton.position(50, 100);
   *   stopButton.size(50, 20);
   *
   *   // Set functions to call when the buttons are pressed.
   *   startButton.mousePressed(loop);
   *   stopButton.mousePressed(noLoop);
   *
   *   // Slow the frame rate.
   *   frameRate(5);
   *
   *   describe(
   *     'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the circle's coordinates.
   *   let x = random(0, 100);
   *   let y = random(0, 100);
   *
   *   // Draw the circle.
   *   // Normally, the circle would move from left to right.
   *   circle(x, y, 20);
   * }
   * </code>
   * </div>
   */ fn.noLoop = function() {
        this._loop = false;
    };
    /**
   * Resumes the draw loop after <a href="#/p5/noLoop">noLoop()</a> has been
   * called.
   *
   * By default, <a href="#/p5/draw">draw()</a> tries to run 60 times per
   * second. Calling <a href="#/p5/noLoop">noLoop()</a> stops
   * <a href="#/p5/draw">draw()</a> from repeating. The draw loop can be
   * restarted by calling `loop()`.
   *
   * The <a href="#/p5/isLooping">isLooping()</a> function can be used to check
   * whether a sketch is looping, as in `isLooping() === true`.
   *
   * @method loop
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Turn off the draw loop.
   *   noLoop();
   *
   *   describe(
   *     'A white half-circle on the left edge of a gray square. The circle starts moving to the right when the user double-clicks.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the circle's x-coordinate.
   *   let x = frameCount;
   *
   *   // Draw the circle.
   *   circle(x, 50, 20);
   * }
   *
   * // Resume the draw loop when the user double-clicks.
   * function doubleClicked() {
   *   loop();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * let startButton;
   * let stopButton;
   *
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Create the button elements and place them
   *   // beneath the canvas.
   *   startButton = createButton('▶');
   *   startButton.position(0, 100);
   *   startButton.size(50, 20);
   *   stopButton = createButton('◾');
   *   stopButton.position(50, 100);
   *   stopButton.size(50, 20);
   *
   *   // Set functions to call when the buttons are pressed.
   *   startButton.mousePressed(loop);
   *   stopButton.mousePressed(noLoop);
   *
   *   // Slow the frame rate.
   *   frameRate(5);
   *
   *   describe(
   *     'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Calculate the circle's coordinates.
   *   let x = random(0, 100);
   *   let y = random(0, 100);
   *
   *   // Draw the circle.
   *   // Normally, the circle would move from left to right.
   *   circle(x, y, 20);
   * }
   * </code>
   * </div>
   */ fn.loop = function() {
        if (!this._loop) {
            this._loop = true;
            if (this._setupDone) {
                this._draw();
            }
        }
    };
    /**
   * Returns `true` if the draw loop is running and `false` if not.
   *
   * By default, <a href="#/p5/draw">draw()</a> tries to run 60 times per
   * second. Calling <a href="#/p5/noLoop">noLoop()</a> stops
   * <a href="#/p5/draw">draw()</a> from repeating. The draw loop can be
   * restarted by calling <a href="#/p5/loop">loop()</a>.
   *
   * The `isLooping()` function can be used to check whether a sketch is
   * looping, as in `isLooping() === true`.
   *
   * @method isLooping
   * @returns {boolean}
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle drawn against a gray background. When the user double-clicks, the circle stops or resumes following the mouse.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw the circle at the mouse's position.
   *   circle(mouseX, mouseY, 20);
   * }
   *
   * // Toggle the draw loop when the user double-clicks.
   * function doubleClicked() {
   *   if (isLooping() === true) {
   *     noLoop();
   *   } else {
   *     loop();
   *   }
   * }
   * </code>
   * </div>
   */ fn.isLooping = function() {
        return this._loop;
    };
    /**
   * Runs the code in <a href="#/p5/draw">draw()</a> once.
   *
   * By default, <a href="#/p5/draw">draw()</a> tries to run 60 times per
   * second. Calling <a href="#/p5/noLoop">noLoop()</a> stops
   * <a href="#/p5/draw">draw()</a> from repeating. Calling `redraw()` will
   * execute the code in the <a href="#/p5/draw">draw()</a> function a set
   * number of times.
   *
   * The parameter, `n`, is optional. If a number is passed, as in `redraw(5)`,
   * then the draw loop will run the given number of times. By default, `n` is
   * 1.
   *
   * @method redraw
   * @param  {Integer} [n] number of times to run <a href="#/p5/draw">draw()</a>. Defaults to 1.
   *
   * @example
   * <div>
   * <code>
   * // Double-click the canvas to move the circle.
   *
   * let x = 0;
   *
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Turn off the draw loop.
   *   noLoop();
   *
   *   describe(
   *     'A white half-circle on the left edge of a gray square. The circle moves a little to the right when the user double-clicks.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw the circle.
   *   circle(x, 50, 20);
   *
   *   // Increment x.
   *   x += 5;
   * }
   *
   * // Run the draw loop when the user double-clicks.
   * function doubleClicked() {
   *   redraw();
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * // Double-click the canvas to move the circle.
   *
   * let x = 0;
   *
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Turn off the draw loop.
   *   noLoop();
   *
   *   describe(
   *     'A white half-circle on the left edge of a gray square. The circle hops to the right when the user double-clicks.'
   *   );
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw the circle.
   *   circle(x, 50, 20);
   *
   *   // Increment x.
   *   x += 5;
   * }
   *
   * // Run the draw loop three times when the user double-clicks.
   * function doubleClicked() {
   *   redraw(3);
   * }
   * </code>
   * </div>
   */ fn.redraw = async function(n) {
        if (this._inUserDraw || !this._setupDone) {
            return;
        }
        let numberOfRedraws = parseInt(n);
        if (isNaN(numberOfRedraws) || numberOfRedraws < 1) {
            numberOfRedraws = 1;
        }
        const context = this._isGlobal ? window : this;
        if (typeof context.draw === 'function') {
            if (typeof context.setup === 'undefined') {
                context.scale(context._pixelDensity, context._pixelDensity);
            }
            for(let idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++){
                context.resetMatrix();
                if (this._accessibleOutputs.grid || this._accessibleOutputs.text) {
                    this._updateAccsOutput();
                }
                if (this._renderer.isP3D) {
                    this._renderer._update();
                }
                this.frameCount = context.frameCount + 1;
                await this._runLifecycleHook('predraw');
                this._inUserDraw = true;
                try {
                    await context.draw();
                } finally{
                    this._inUserDraw = false;
                }
                await this._runLifecycleHook('postdraw');
            }
        }
    };
/**
   * Creates a new sketch in "instance" mode.
   *
   * All p5.js sketches are instances of the `p5` class. Put another way, all
   * p5.js sketches are objects with methods including `pInst.setup()`,
   * `pInst.draw()`, `pInst.circle()`, and `pInst.fill()`. By default, sketches
   * run in "global mode" to hide some of this complexity.
   *
   * In global mode, a default instance of the `p5` class is created
   * automatically. The default `p5` instance searches the web page's source
   * code for declarations of system functions such as `setup()`, `draw()`,
   * and `mousePressed()`, then attaches those functions to itself as methods.
   * Calling a function such as `circle()` in global mode actually calls the
   * default `p5` object's `pInst.circle()` method.
   *
   * It's often helpful to isolate the code within sketches from the rest of the
   * code on a web page. Two common use cases are web pages that use other
   * JavaScript libraries and web pages with multiple sketches. "Instance mode"
   * makes it easy to support both of these scenarios.
   *
   * Instance mode sketches support the same API as global mode sketches. They
   * use a function to bundle, or encapsulate, an entire sketch. The function
   * containing the sketch is then passed to the `p5()` constructor.
   *
   * The first parameter, `sketch`, is a function that contains the sketch. For
   * example, the statement `new p5(mySketch)` would create a new instance mode
   * sketch from a function named `mySketch`. The function should have one
   * parameter, `p`, that's a `p5` object.
   *
   * The second parameter, `node`, is optional. If a string is passed, as in
   * `new p5(mySketch, 'sketch-one')` the new instance mode sketch will become a
   * child of the HTML element with the id `sketch-one`. If an HTML element is
   * passed, as in `new p5(mySketch, myElement)`, then the new instance mode
   * sketch will become a child of the `Element` object called `myElement`.
   *
   * @method p5
   * @param {Object} sketch function containing the sketch.
   * @param {String|HTMLElement} node ID or reference to the HTML element that will contain the sketch.
   *
   * @example
   * <div class='norender notest'>
   * <code>
   * // Declare the function containing the sketch.
   * function sketch(p) {
   *
   *   // Declare the setup() method.
   *   p.setup = function () {
   *     p.createCanvas(100, 100);
   *
   *     p.describe('A white circle drawn on a gray background.');
   *   };
   *
   *   // Declare the draw() method.
   *   p.draw = function () {
   *     p.background(200);
   *
   *     // Draw the circle.
   *     p.circle(50, 50, 20);
   *   };
   * }
   *
   * // Initialize the sketch.
   * new p5(sketch);
   * </code>
   * </div>
   *
   * <div class='norender notest'>
   * <code>
   * // Declare the function containing the sketch.
   * function sketch(p) {
   *   // Create the sketch's variables within its scope.
   *   let x = 50;
   *   let y = 50;
   *
   *   // Declare the setup() method.
   *   p.setup = function () {
   *     p.createCanvas(100, 100);
   *
   *     p.describe('A white circle moves randomly on a gray background.');
   *   };
   *
   *   // Declare the draw() method.
   *   p.draw = function () {
   *     p.background(200);
   *
   *     // Update x and y.
   *     x += p.random(-1, 1);
   *     y += p.random(-1, 1);
   *
   *     // Draw the circle.
   *     p.circle(x, y, 20);
   *   };
   * }
   *
   * // Initialize the sketch.
   * new p5(sketch);
   * </code>
   * </div>
   *
   * <div class='norender notest'>
   * <code>
   * // Declare the function containing the sketch.
   * function sketch(p) {
   *
   *   // Declare the setup() method.
   *   p.setup = function () {
   *     p.createCanvas(100, 100);
   *
   *     p.describe('A white circle drawn on a gray background.');
   *   };
   *
   *   // Declare the draw() method.
   *   p.draw = function () {
   *     p.background(200);
   *
   *     // Draw the circle.
   *     p.circle(50, 50, 20);
   *   };
   * }
   *
   * // Select the web page's body element.
   * let body = document.querySelector('body');
   *
   * // Initialize the sketch and attach it to the web page's body.
   * new p5(sketch, body);
   * </code>
   * </div>
   *
   * <div class='norender notest'>
   * <code>
   * // Declare the function containing the sketch.
   * function sketch(p) {
   *
   *   // Declare the setup() method.
   *   p.setup = function () {
   *     p.createCanvas(100, 100);
   *
   *     p.describe(
   *       'A white circle drawn on a gray background. The circle follows the mouse as the user moves.'
   *     );
   *   };
   *
   *   // Declare the draw() method.
   *   p.draw = function () {
   *     p.background(200);
   *
   *     // Draw the circle.
   *     p.circle(p.mouseX, p.mouseY, 20);
   *   };
   * }
   *
   * // Initialize the sketch.
   * new p5(sketch);
   * </code>
   * </div>
   *
   * <div class='norender notest'>
   * <code>
   * // Declare the function containing the sketch.
   * function sketch(p) {
   *
   *   // Declare the setup() method.
   *   p.setup = function () {
   *     p.createCanvas(100, 100);
   *
   *     p.describe(
   *       'A white circle drawn on a gray background. The circle follows the mouse as the user moves. The circle becomes black when the user double-clicks.'
   *     );
   *   };
   *
   *   // Declare the draw() method.
   *   p.draw = function () {
   *     p.background(200);
   *
   *     // Draw the circle.
   *     p.circle(p.mouseX, p.mouseY, 20);
   *   };
   *
   *   // Declare the doubleClicked() method.
   *   p.doubleClicked = function () {
   *     // Change the fill color when the user double-clicks.
   *     p.fill(0);
   *   };
   * }
   *
   * // Initialize the sketch.
   * new p5(sketch);
   * </code>
   * </div>
   */ }
if (typeof p5 !== 'undefined') {
    structure(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/environment.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>environment)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$math$2f$p5$2e$Vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/math/p5.Vector.js [app-ssr] (ecmascript)");
;
;
/**
 * @module Environment
 * @submodule Environment
 * @for p5
 * @requires core
 * @requires constants
 */ function environment(p51, fn) {
    const standardCursors = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["b"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["H"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["M"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["d"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["W"]
    ];
    fn._frameRate = 0;
    fn._lastFrameTime = window.performance.now();
    fn._targetFrameRate = 60;
    const _windowPrint = window.print;
    let windowPrintDisabled = false;
    /**
   * Displays text in the web browser's console.
   *
   * `print()` is helpful for printing values while debugging. Each call to
   * `print()` creates a new line of text.
   *
   * Note: Call `print('\n')` to print a blank line. Calling `print()` without
   * an argument opens the browser's dialog for printing documents.
   *
   * @method print
   * @param {Any} contents content to print to the console.
   * @example
   * <div>
   * <code class="norender">
   * function setup() {
   *   // Prints "hello, world" to the console.
   *   print('hello, world');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code class="norender">
   * function setup() {
   *   let name = 'ada';
   *   // Prints "hello, ada" to the console.
   *   print(`hello, ${name}`);
   * }
   * </code>
   * </div>
   */ fn.print = function(...args) {
        if (!args.length) {
            if (!windowPrintDisabled) {
                _windowPrint();
                if (window.confirm('You just tried to print the webpage. Do you want to prevent this from running again?')) {
                    windowPrintDisabled = true;
                }
            }
        } else {
            console.log(...args);
        }
    };
    /**
   * A `Number` variable that tracks the number of frames drawn since the sketch
   * started.
   *
   * `frameCount`'s value is 0 inside <a href="#/p5/setup">setup()</a>. It
   * increments by 1 each time the code in <a href="#/p5/draw">draw()</a>
   * finishes executing.
   *
   * @property {Integer} frameCount
   * @readOnly
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   background(200);
   *
   *   // Display the value of
   *   // frameCount.
   *   textSize(30);
   *   textAlign(CENTER, CENTER);
   *   text(frameCount, 50, 50);
   *
   *   describe('The number 0 written in black in the middle of a gray square.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   // Set the frameRate to 30.
   *   frameRate(30);
   *
   *   textSize(30);
   *   textAlign(CENTER, CENTER);
   *
   *   describe('A number written in black in the middle of a gray square. Its value increases rapidly.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Display the value of
   *   // frameCount.
   *   text(frameCount, 50, 50);
   * }
   * </code>
   * </div>
   */ fn.frameCount = 0;
    /**
   * A `Number` variable that tracks the number of milliseconds it took to draw
   * the last frame.
   *
   * `deltaTime` contains the amount of time it took
   * <a href="#/p5/draw">draw()</a> to execute during the previous frame. It's
   * useful for simulating physics.
   *
   * @property {Integer} deltaTime
   * @readOnly
   * @example
   * <div>
   * <code>
   * let x = 0;
   * let speed = 0.05;
   *
   * function setup()  {
   *   createCanvas(100, 100);
   *
   *   // Set the frameRate to 30.
   *   frameRate(30);
   *
   *   describe('A white circle moves from left to right on a gray background. It reappears on the left side when it reaches the right side.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Use deltaTime to calculate
   *   // a change in position.
   *   let deltaX = speed * deltaTime;
   *
   *   // Update the x variable.
   *   x += deltaX;
   *
   *   // Reset x to 0 if it's
   *   // greater than 100.
   *   if (x > 100)  {
   *     x = 0;
   *   }
   *
   *   // Use x to set the circle's
   *   // position.
   *   circle(x, 50, 20);
   * }
   * </code>
   * </div>
   */ fn.deltaTime = 0;
    /**
   * A `Boolean` variable that's `true` if the browser is focused and `false` if
   * not.
   *
   * Note: The browser window can only receive input if it's focused.
   *
   * @property {Boolean} focused
   * @readOnly
   * @example
   * <div>
   * <code>
   * // Open this example in two separate browser
   * // windows placed side-by-side to demonstrate.
   *
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A square changes color from green to red when the browser window is out of focus.');
   * }
   *
   * function draw() {
   *   // Change the background color
   *   // when the browser window
   *   // goes in/out of focus.
   *   if (focused === true) {
   *     background(0, 255, 0);
   *   } else {
   *     background(255, 0, 0);
   *   }
   * }
   * </code>
   * </div>
   */ fn.focused = document.hasFocus();
    /**
   * Changes the cursor's appearance.
   *
   * The first parameter, `type`, sets the type of cursor to display. The
   * built-in options are `ARROW`, `CROSS`, `HAND`, `MOVE`, `TEXT`, and `WAIT`.
   * `cursor()` also recognizes standard CSS cursor properties passed as
   * strings: `'help'`, `'wait'`, `'crosshair'`, `'not-allowed'`, `'zoom-in'`,
   * and `'grab'`. If the path to an image is passed, as in
   * `cursor('assets/target.png')`, then the image will be used as the cursor.
   * Images must be in .cur, .gif, .jpg, .jpeg, or .png format and should be <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#icon_size_limits">at most 32 by 32 pixels large.</a>
   *
   * The parameters `x` and `y` are optional. If an image is used for the
   * cursor, `x` and `y` set the location pointed to within the image. They are
   * both 0 by default, so the cursor points to the image's top-left corner. `x`
   * and `y` must be less than the image's width and height, respectively.
   *
   * @method cursor
   * @param {(ARROW|CROSS|HAND|MOVE|TEXT|WAIT|String)} type Built-in: either ARROW, CROSS, HAND, MOVE, TEXT, or WAIT.
   *                               Native CSS properties: 'grab', 'progress', and so on.
   *                               Path to cursor image.
   * @param {Number}          [x]  horizontal active spot of the cursor.
   * @param {Number}          [y]  vertical active spot of the cursor.
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A gray square. The cursor appears as crosshairs.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Set the cursor to crosshairs: +
   *   cursor(CROSS);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A gray square divided into quadrants. The cursor image changes when the mouse moves to each quadrant.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Divide the canvas into quadrants.
   *   line(50, 0, 50, 100);
   *   line(0, 50, 100, 50);
   *
   *   // Change cursor based on mouse position.
   *   if (mouseX < 50 && mouseY < 50) {
   *     cursor(CROSS);
   *   } else if (mouseX > 50 && mouseY < 50) {
   *     cursor('progress');
   *   } else if (mouseX > 50 && mouseY > 50) {
   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');
   *   } else {
   *     cursor('grab');
   *   }
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('An image of three purple curves follows the mouse. The image shifts when the mouse is pressed.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Change the cursor's active spot
   *   // when the mouse is pressed.
   *   if (mouseIsPressed === true) {
   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16', 8, 8);
   *   } else {
   *     cursor('https://avatars0.githubusercontent.com/u/1617169?s=16');
   *   }
   * }
   * </code>
   * </div>
   */ fn.cursor = function(type, x, y) {
        let cursor = 'auto';
        const canvas = this._curElement.elt;
        if (standardCursors.includes(type)) {
            // Standard css cursor
            cursor = type;
        } else if (typeof type === 'string') {
            let coords = '';
            if (x && y && typeof x === 'number' && typeof y === 'number') {
                // Note that x and y values must be unit-less positive integers < 32
                // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
                coords = `${x} ${y}`;
            }
            if (type.substring(0, 7) === 'http://' || type.substring(0, 8) === 'https://') {
                // Image (absolute url)
                cursor = `url(${type}) ${coords}, auto`;
            } else if (/\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {
                // Image file (relative path) - Separated for performance reasons
                cursor = `url(${type}) ${coords}, auto`;
            } else {
                // Any valid string for the css cursor property
                cursor = type;
            }
        }
        canvas.style.cursor = cursor;
    };
    /**
   * Sets the number of frames to draw per second.
   *
   * Calling `frameRate()` with one numeric argument, as in `frameRate(30)`,
   * attempts to draw 30 frames per second (FPS). The target frame rate may not
   * be achieved depending on the sketch's processing needs. Most computers
   * default to a frame rate of 60 FPS. Frame rates of 24 FPS and above are
   * fast enough for smooth animations.
   *
   * Calling `frameRate()` without an argument returns the current frame rate.
   * The value returned is an approximation.
   *
   * @method frameRate
   * @param  {Number} fps number of frames to draw per second.
   * @chainable
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A white circle on a gray background. The circle moves from left to right in a loop. It slows down when the mouse is pressed.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Set the x variable based
   *   // on the current frameCount.
   *   let x = frameCount % 100;
   *
   *   // If the mouse is pressed,
   *   // decrease the frame rate.
   *   if (mouseIsPressed === true) {
   *     frameRate(10);
   *   } else {
   *     frameRate(60);
   *   }
   *
   *   // Use x to set the circle's
   *   // position.
   *   circle(x, 50, 20);
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('A number written in black on a gray background. The number decreases when the mouse is pressed.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // If the mouse is pressed, do lots
   *   // of math to slow down drawing.
   *   if (mouseIsPressed === true) {
   *     for (let i = 0; i < 1000000; i += 1) {
   *       random();
   *     }
   *   }
   *
   *   // Get the current frame rate
   *   // and display it.
   *   let fps = frameRate();
   *   text(fps, 50, 50);
   * }
   * </code>
   * </div>
   */ /**
   * @method frameRate
   * @return {Number}       current frame rate.
   */ fn.frameRate = function(fps) {
        // p5._validateParameters('frameRate', arguments);
        if (typeof fps !== 'number' || fps < 0) {
            return this._frameRate;
        } else {
            this._targetFrameRate = fps;
            if (fps === 0) {
                this._frameRate = fps;
            }
            return this;
        }
    };
    /**
   * Returns the current framerate.
   *
   * @private
   * @return {Number} current frameRate
   */ fn.getFrameRate = function() {
        return this.frameRate();
    };
    /**
   * Specifies the number of frames to be displayed every second. For example,
   * the function call frameRate(30) will attempt to refresh 30 times a second.
   * If the processor is not fast enough to maintain the specified rate, the
   * frame rate will not be achieved. Setting the frame rate within <a href="#/p5/setup">setup()</a> is
   * recommended. The default rate is 60 frames per second.
   *
   * Calling `frameRate()` with no arguments returns the current frame rate.
   *
   * @private
   * @param {Number} [fps] number of frames to be displayed every second
   */ fn.setFrameRate = function(fps) {
        return this.frameRate(fps);
    };
    /**
   * Returns the target frame rate.
   *
   * The value is either the system frame rate or the last value passed to
   * <a href="#/p5/frameRate">frameRate()</a>.
   *
   * @method getTargetFrameRate
   * @return {Number} _targetFrameRate
   * @example
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   describe('The number 20 written in black on a gray background.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Set the frame rate to 20.
   *   frameRate(20);
   *
   *   // Get the target frame rate and
   *   // display it.
   *   let fps = getTargetFrameRate();
   *   text(fps, 43, 54);
   * }
   * </code>
   * </div>
   */ fn.getTargetFrameRate = function() {
        return this._targetFrameRate;
    };
    /**
   * Hides the cursor from view.
   *
   * @method noCursor
   * @example
   * <div>
   * <code>
   * function setup() {
   *   // Hide the cursor.
   *   noCursor();
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   circle(mouseX, mouseY, 10);
   *
   *   describe('A white circle on a gray background. The circle follows the mouse as it moves. The cursor is hidden.');
   * }
   * </code>
   * </div>
   */ fn.noCursor = function() {
        this._curElement.elt.style.cursor = 'none';
    };
    /**
   * A `String` variable with the WebGL version in use.
   *
   * `webglVersion`'s value equals one of the following string constants:
   *
   * - `WEBGL2` whose value is `'webgl2'`,
   * - `WEBGL` whose value is `'webgl'`, or
   * - `P2D` whose value is `'p2d'`. This is the default for 2D sketches.
   *
   * See <a href="#/p5/setAttributes">setAttributes()</a> for ways to set the
   * WebGL version.
   *
   * @property {(WEBGL|WEBGL2)} webglVersion
   * @readOnly
   * @example
   * <div>
   * <code>
   * function setup() {
   *   background(200);
   *
   *   // Display the current WebGL version.
   *   text(webglVersion, 42, 54);
   *
   *   describe('The text "p2d" written in black on a gray background.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * let font;
   *
   * async function setup() {
   *   // Load a font to use.
   *   font = await loadFont('assets/inconsolata.otf');
   *
   *   // Create a canvas using WEBGL mode.
   *   createCanvas(100, 50, WEBGL);
   *   background(200);
   *
   *   // Display the current WebGL version.
   *   fill(0);
   *   textFont(font);
   *   text(webglVersion, -15, 5);
   *
   *   describe('The text "webgl2" written in black on a gray background.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * let font;
   *
   * async function setup() {
   *   // Load a font to use.
   *   font = await loadFont('assets/inconsolata.otf');
   *
   *   // Create a canvas using WEBGL mode.
   *   createCanvas(100, 50, WEBGL);
   *
   *   // Set WebGL to version 1.
   *   setAttributes({ version: 1 });
   *
   *   background(200);
   *
   *   // Display the current WebGL version.
   *   fill(0);
   *   textFont(font);
   *   text(webglVersion, -14, 5);
   *
   *   describe('The text "webgl" written in black on a gray background.');
   * }
   * </code>
   * </div>
   */ fn.webglVersion = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["P"];
    /**
   * A `Number` variable that stores the width of the screen display.
   *
   * `displayWidth` is useful for running full-screen programs. Its value
   * depends on the current <a href="#/p5/pixelDensity">pixelDensity()</a>.
   *
   * Note: The actual screen width can be computed as
   * `displayWidth * pixelDensity()`.
   *
   * @property {Number} displayWidth
   * @readOnly
   * @example
   * <div class="norender">
   * <code>
   * function setup() {
   *   // Set the canvas' width and height
   *   // using the display's dimensions.
   *   createCanvas(displayWidth, displayHeight);
   *
   *   background(200);
   *
   *   describe('A gray canvas that is the same size as the display.');
   * }
   * </code>
   * </div>
   *
   * @alt
   * This example does not render anything.
   */ fn.displayWidth = screen.width;
    /**
   * A `Number` variable that stores the height of the screen display.
   *
   * `displayHeight` is useful for running full-screen programs. Its value
   * depends on the current <a href="#/p5/pixelDensity">pixelDensity()</a>.
   *
   * Note: The actual screen height can be computed as
   * `displayHeight * pixelDensity()`.
   *
   * @property {Number} displayHeight
   * @readOnly
   * @example
   * <div class="norender">
   * <code>
   * function setup() {
   *   // Set the canvas' width and height
   *   // using the display's dimensions.
   *   createCanvas(displayWidth, displayHeight);
   *
   *   background(200);
   *
   *   describe('A gray canvas that is the same size as the display.');
   * }
   * </code>
   * </div>
   *
   * @alt
   * This example does not render anything.
   */ fn.displayHeight = screen.height;
    /**
   * A `Number` variable that stores the width of the browser's viewport.
   *
   * The <a href="https://developer.mozilla.org/en-US/docs/Glossary/Layout_viewport" target="_blank">layout viewport</a>
   * is the area within the browser that's available for drawing.
   *
   * @property {Number} windowWidth
   * @readOnly
   * @example
   * <div class="norender">
   * <code>
   * function setup() {
   *   // Set the canvas' width and height
   *   // using the browser's dimensions.
   *   createCanvas(windowWidth, windowHeight);
   *
   *   background(200);
   *
   *   describe('A gray canvas that takes up the entire browser window.');
   * }
   * </code>
   * </div>
   *
   * @alt
   * This example does not render anything.
   */ fn.windowWidth = 0;
    /**
   * A `Number` variable that stores the height of the browser's viewport.
   *
   * The <a href="https://developer.mozilla.org/en-US/docs/Glossary/Layout_viewport" target="_blank">layout viewport</a>
   * is the area within the browser that's available for drawing.
   *
   * @property {Number} windowHeight
   * @readOnly
   * @example
   * <div class="norender">
   * <code>
   * function setup() {
   *   // Set the canvas' width and height
   *   // using the browser's dimensions.
   *   createCanvas(windowWidth, windowHeight);
   *
   *   background(200);
   *
   *   describe('A gray canvas that takes up the entire browser window.');
   * }
   * </code>
   * </div>
   *
   * @alt
   * This example does not render anything.
   */ fn.windowHeight = 0;
    /**
   * A function that's called when the browser window is resized.
   *
   * Code placed in the body of `windowResized()` will run when the
   * browser window's size changes. It's a good place to call
   * <a href="#/p5/resizeCanvas">resizeCanvas()</a> or make other
   * adjustments to accommodate the new window size.
   *
   * The `event` parameter is optional. If added to the function declaration, it
   * can be used for debugging or other purposes.
   *
   * @method windowResized
   * @param {UIEvent} [event] optional resize Event.
   * @example
   * <div class="norender">
   * <code>
   * function setup() {
   *   createCanvas(windowWidth, windowHeight);
   *
   *   describe('A gray canvas with a white circle at its center. The canvas takes up the entire browser window. It changes size to match the browser window.');
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Draw a circle at the center.
   *   circle(width / 2, height / 2, 50);
   * }
   *
   * // Resize the canvas when the
   * // browser's size changes.
   * function windowResized() {
   *   resizeCanvas(windowWidth, windowHeight);
   * }
   * </code>
   * </div>
   * @alt
   * This example does not render anything.
   *
   * <div class="norender">
   * <code>
   * function setup() {
   *   createCanvas(windowWidth, windowHeight);
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   describe('A gray canvas that takes up the entire browser window. It changes size to match the browser window.');
   * }
   *
   * function windowResized(event) {
   *   // Resize the canvas when the
   *   // browser's size changes.
   *   resizeCanvas(windowWidth, windowHeight);
   *
   *   // Print the resize event to the console for debugging.
   *   print(event);
   * }
   * </code>
   * </div>
   * @alt
   * This example does not render anything.
   */ fn._onresize = function(e) {
        this.windowWidth = getWindowWidth();
        this.windowHeight = getWindowHeight();
        const context = this._isGlobal ? window : this;
        let executeDefault;
        if (typeof context.windowResized === 'function') {
            executeDefault = context.windowResized(e);
            if (executeDefault !== undefined && !executeDefault) {
                e.preventDefault();
            }
        }
    };
    function getWindowWidth() {
        return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;
    }
    function getWindowHeight() {
        return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;
    }
    /**
   * Called upon each p5 instantiation instead of module import due to the
   * possibility of the window being resized when no sketch is active.
   */ fn._updateWindowSize = function() {
        this.windowWidth = getWindowWidth();
        this.windowHeight = getWindowHeight();
    };
    /**
   * A `Number` variable that stores the width of the canvas in pixels.
   *
   * `width`'s default value is 100. Calling
   * <a href="#/p5/createCanvas">createCanvas()</a> or
   * <a href="#/p5/resizeCanvas">resizeCanvas()</a> changes the value of
   * `width`. Calling <a href="#/p5/noCanvas">noCanvas()</a> sets its value to
   * 0.
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   background(200);
   *
   *   // Display the canvas' width.
   *   text(width, 42, 54);
   *
   *   describe('The number 100 written in black on a gray square.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(50, 100);
   *
   *   background(200);
   *
   *   // Display the canvas' width.
   *   text(width, 21, 54);
   *
   *   describe('The number 50 written in black on a gray rectangle.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   background(200);
   *
   *   // Display the canvas' width.
   *   text(width, 42, 54);
   *
   *   describe('The number 100 written in black on a gray square. When the mouse is pressed, the square becomes a rectangle and the number becomes 50.');
   * }
   *
   * // If the mouse is pressed, reisze
   * // the canvas and display its new
   * // width.
   * function mousePressed() {
   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
   *     resizeCanvas(50, 100);
   *     background(200);
   *     text(width, 21, 54);
   *   }
   * }
   * </code>
   * </div>
   *
   * @property {Number} width
   * @readOnly
   */ Object.defineProperty(fn, 'width', {
        get () {
            return this._renderer.width;
        }
    });
    /**
   * A `Number` variable that stores the height of the canvas in pixels.
   *
   * `height`'s default value is 100. Calling
   * <a href="#/p5/createCanvas">createCanvas()</a> or
   * <a href="#/p5/resizeCanvas">resizeCanvas()</a> changes the value of
   * `height`. Calling <a href="#/p5/noCanvas">noCanvas()</a> sets its value to
   * 0.
   *
   * @example
   * <div>
   * <code>
   * function setup() {
   *   background(200);
   *
   *   // Display the canvas' height.
   *   text(height, 42, 54);
   *
   *   describe('The number 100 written in black on a gray square.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 50);
   *
   *   background(200);
   *
   *   // Display the canvas' height.
   *   text(height, 42, 27);
   *
   *   describe('The number 50 written in black on a gray rectangle.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   createCanvas(100, 100);
   *
   *   background(200);
   *
   *   // Display the canvas' height.
   *   text(height, 42, 54);
   *
   *   describe('The number 100 written in black on a gray square. When the mouse is pressed, the square becomes a rectangle and the number becomes 50.');
   * }
   *
   * // If the mouse is pressed, reisze
   * // the canvas and display its new
   * // height.
   * function mousePressed() {
   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
   *     resizeCanvas(100, 50);
   *     background(200);
   *     text(height, 42, 27);
   *   }
   * }
   * </code>
   * </div>
   *
   * @property {Number} height
   * @readOnly
   */ Object.defineProperty(fn, 'height', {
        get () {
            return this._renderer.height;
        }
    });
    /**
   * Toggles full-screen mode or returns the current mode.
   *
   * Calling `fullscreen(true)` makes the sketch full-screen. Calling
   * `fullscreen(false)` makes the sketch its original size.
   *
   * Calling `fullscreen()` without an argument returns `true` if the sketch
   * is in full-screen mode and `false` if not.
   *
   * Note: Due to browser restrictions, `fullscreen()` can only be called with
   * user input such as a mouse press.
   *
   * @method fullscreen
   * @param  {Boolean} [val] whether the sketch should be in fullscreen mode.
   * @return {Boolean} current fullscreen state.
   * @example
   * <div>
   * <code>
   * function setup() {
   *   background(200);
   *
   *   describe('A gray canvas that switches between default and full-screen display when clicked.');
   * }
   *
   * // If the mouse is pressed,
   * // toggle full-screen mode.
   * function mousePressed() {
   *   if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
   *     let fs = fullscreen();
   *     fullscreen(!fs);
   *   }
   * }
   * </code>
   * </div>
   */ fn.fullscreen = function(val) {
        // p5._validateParameters('fullscreen', arguments);
        // no arguments, return fullscreen or not
        if (typeof val === 'undefined') {
            return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
        } else {
            // otherwise set to fullscreen or not
            if (val) {
                launchFullscreen(document.documentElement);
            } else {
                exitFullscreen();
            }
        }
    };
    /**
   * Sets the pixel density or returns the current density.
   *
   * Computer displays are grids of little lights called <em>pixels</em>. A
   * display's <em>pixel density</em> describes how many pixels it packs into an
   * area. Displays with smaller pixels have a higher pixel density and create
   * sharper images.
   *
   * `pixelDensity()` sets the pixel scaling for high pixel density displays.
   * By default, the pixel density is set to match the display's density.
   * Calling `pixelDensity(1)` turn this off.
   *
   * Calling `pixelDensity()` without an argument returns the current pixel
   * density.
   *
   * @method pixelDensity
   * @param  {Number} [val] desired pixel density.
   * @chainable
   * @example
   * <div>
   * <code>
   * function setup() {
   *   // Set the pixel density to 1.
   *   pixelDensity(1);
   *
   *   // Create a canvas and draw
   *   // a circle.
   *   createCanvas(100, 100);
   *   background(200);
   *   circle(50, 50, 70);
   *
   *   describe('A fuzzy white circle on a gray canvas.');
   * }
   * </code>
   * </div>
   *
   * <div>
   * <code>
   * function setup() {
   *   // Set the pixel density to 3.
   *   pixelDensity(3);
   *
   *   // Create a canvas, paint the
   *   // background, and draw a
   *   // circle.
   *   createCanvas(100, 100);
   *   background(200);
   *   circle(50, 50, 70);
   *
   *   describe('A sharp white circle on a gray canvas.');
   * }
   * </code>
   * </div>
   */ /**
   * @method pixelDensity
   * @returns {Number} current pixel density of the sketch.
   */ fn.pixelDensity = function(val) {
        // p5._validateParameters('pixelDensity', arguments);
        let returnValue;
        if (typeof val === 'number') {
            if (val !== this._renderer._pixelDensity) {
                this._renderer._pixelDensity = val;
            }
            returnValue = this;
            this.resizeCanvas(this.width, this.height, true); // as a side effect, it will clear the canvas
        } else {
            returnValue = this._renderer._pixelDensity;
        }
        return returnValue;
    };
    /**
   * Returns the display's current pixel density.
   *
   * @method displayDensity
   * @returns {Number} current pixel density of the display.
   * @example
   * <div>
   * <code>
   * function setup() {
   *   // Set the pixel density to 1.
   *   pixelDensity(1);
   *
   *   // Create a canvas and draw
   *   // a circle.
   *   createCanvas(100, 100);
   *   background(200);
   *   circle(50, 50, 70);
   *
   *   describe('A fuzzy white circle drawn on a gray background. The circle becomes sharper when the mouse is pressed.');
   * }
   *
   * function mousePressed() {
   *   // Get the current display density.
   *   let d = displayDensity();
   *
   *   // Use the display density to set
   *   // the sketch's pixel density.
   *   pixelDensity(d);
   *
   *   // Paint the background and
   *   // draw a circle.
   *   background(200);
   *   circle(50, 50, 70);
   * }
   * </code>
   * </div>
   */ fn.displayDensity = ()=>window.devicePixelRatio;
    function launchFullscreen(element) {
        const enabled = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled;
        if (!enabled) {
            throw new Error('Fullscreen not enabled in this browser.');
        }
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    }
    function exitFullscreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    }
    /**
   * Returns the sketch's current
   * <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL" target="_blank">URL</a>
   * as a `String`.
   *
   * @method getURL
   * @return {String} url
   * @example
   * <div>
   * <code>
   * function setup() {
   *   background(200);
   *
   *   // Get the sketch's URL
   *   // and display it.
   *   let url = getURL();
   *   textWrap(CHAR);
   *   text(url, 0, 40, 100);
   *
   *   describe('The URL "https://p5js.org/reference/p5/getURL" written in black on a gray background.');
   * }
   * </code>
   * </div>
   */ fn.getURL = ()=>location.href;
    /**
   * Returns the current
   * <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#path_to_resource" target="_blank">URL</a>
   * path as an `Array` of `String`s.
   *
   * For example, consider a sketch hosted at the URL
   * `https://example.com/sketchbook`. Calling `getURLPath()` returns
   * `['sketchbook']`. For a sketch hosted at the URL
   * `https://example.com/sketchbook/monday`, `getURLPath()` returns
   * `['sketchbook', 'monday']`.
   *
   * @method getURLPath
   * @return {String[]} path components.
   * @example
   * <div>
   * <code>
   * function setup() {
   *   background(200);
   *
   *   // Get the sketch's URL path
   *   // and display the first
   *   // part.
   *   let path = getURLPath();
   *   text(path[0], 25, 54);
   *
   *   describe('The word "reference" written in black on a gray background.');
   * }
   * </code>
   * </div>
   */ fn.getURLPath = ()=>location.pathname.split('/').filter((v)=>v !== '');
    /**
   * Returns the current
   * <a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#parameters" target="_blank">URL parameters</a>
   * in an `Object`.
   *
   * For example, calling `getURLParams()` in a sketch hosted at the URL
   * `https://p5js.org?year=2014&month=May&day=15` returns
   * `{ year: 2014, month: 'May', day: 15 }`.
   *
   * @method getURLParams
   * @return {Object} URL params
   * @example
   * <div class='norender notest'>
   * <code>
   * // Imagine this sketch is hosted at the following URL:
   * // https://p5js.org?year=2014&month=May&day=15
   *
   * function setup() {
   *   background(200);
   *
   *   // Get the sketch's URL
   *   // parameters and display
   *   // them.
   *   let params = getURLParams();
   *   text(params.day, 10, 20);
   *   text(params.month, 10, 40);
   *   text(params.year, 10, 60);
   *
   *   describe('The text "15", "May", and "2014" written in black on separate lines.');
   * }
   * </code>
   * </div>
   *
   * @alt
   * This example does not render anything.
   */ fn.getURLParams = function() {
        const re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;
        let m;
        const v = {};
        while((m = re.exec(location.search)) != null){
            if (m.index === re.lastIndex) {
                re.lastIndex++;
            }
            v[m[1]] = m[2];
        }
        return v;
    };
    /**
   * Converts 3D world coordinates to 2D screen coordinates.
   *
   * This function takes a 3D vector and converts its coordinates
   * from the world space to screen space. This can be useful for placing
   * 2D elements in a 3D scene or for determining the screen position
   * of 3D objects.
   *
   * @method worldToScreen
   * @param {Number|p5.Vector} x The x coordinate in world space. (Or a vector for all three coordinates.)
   * @param {Number} y The y coordinate in world space.
   * @param {Number} [z] The z coordinate in world space.
   * @return {p5.Vector} A vector containing the 2D screen coordinates.
   * @example
   * <div>
   * <code>
   *
   * function setup() {
   *   createCanvas(150, 150);
   *   let vertices = [
   *     createVector(-20, -20),
   *     createVector(20, -20),
   *     createVector(20, 20),
   *     createVector(-20, 20)
   *   ];
   *
   *   push();
   *   translate(75, 55);
   *   rotate(PI / 4);
   *
   *   // Convert world coordinates to screen coordinates
   *   let screenPos = vertices.map(v => worldToScreen(v));
   *   pop();
   *
   *   background(200);
   *
   *   stroke(0);
   *   fill(100, 150, 255, 100);
   *   beginShape();
   *   screenPos.forEach(pos => vertex(pos.x, pos.y));
   *   endShape(CLOSE);
   *
   *   screenPos.forEach((pos, i) => {
   *     fill(0);
   *     textSize(10);
   *     if (i === 0) {
   *       text(i + 1, pos.x + 3, pos.y - 7);
   *     } else if (i === 1) {
   *       text(i + 1, pos.x + 7, pos.y + 2);
   *     } else if (i === 2) {
   *       text(i + 1, pos.x - 2, pos.y + 12);
   *     } else if (i === 3) {
   *       text(i + 1, pos.x - 12, pos.y - 2);
   *     }
   *   });
   *
   *   fill(0);
   *   noStroke();
   *   textSize(10);
   *   let legendY = height - 35;
   *   screenPos.forEach((pos, i) => {
   *     text(`Vertex ${i + 1}: (${pos.x.toFixed(1)}, ${pos.y.toFixed(1)})`, 5, legendY + i * 10);
   *   });
   *
   *   describe('A rotating square is transformed and drawn using screen coordinates.');
   *
   * }
   * </code>
   * </div>
   *
   * @example
   * <div>
   * <code>
   * let vertices;
   *
   * function setup() {
   *   createCanvas(100, 100, WEBGL);
   *   vertices = [
   *     createVector(-25, -25, -25),
   *     createVector(25, -25, -25),
   *     createVector(25, 25, -25),
   *     createVector(-25, 25, -25),
   *     createVector(-25, -25, 25),
   *     createVector(25, -25, 25),
   *     createVector(25, 25, 25),
   *     createVector(-25, 25, 25)
   *   ];
   *
   *   describe('A rotating cube with points mapped to 2D screen space and displayed as ellipses.');
   *
   * }
   *
   * function draw() {
   *   background(200);
   *
   *   // Animate rotation
   *   let rotationX = millis() / 1000;
   *   let rotationY = millis() / 1200;
   *
   *   push();
   *
   *   rotateX(rotationX);
   *   rotateY(rotationY);
   *
   *   // Convert world coordinates to screen coordinates
   *   let screenPos = vertices.map(v => worldToScreen(v));
   *
   *   pop();
   *
   *   screenPos.forEach((pos, i) => {
   *
   *     let screenX = pos.x - width / 2;
   *     let screenY = pos.y - height / 2;
   *     fill(0);
   *     noStroke();
   *     ellipse(screenX, screenY, 3, 3);
   *   });
   * }
   * </code>
   * </div>
   *
   */ fn.worldToScreen = function(worldPosition) {
        if (typeof worldPosition === "number") {
            // We got passed numbers, convert to vector
            worldPosition = this.createVector(...arguments);
        }
        const matrix = this._renderer.getWorldToScreenMatrix();
        const screenPosition = matrix.multiplyAndNormalizePoint(worldPosition);
        return screenPosition;
    };
    /**
   * Converts 2D screen coordinates to 3D world coordinates.
   *
   * This function takes a vector and converts its coordinates from coordinates
   * on the screen to coordinates in the currently drawn object. This can be
   * useful for determining the mouse position relative to a 2D or 3D object.
   *
   * If given, the Z component of the input coordinates is treated as "depth",
   * or distance from the camera.
   *
   * @method screenToWorld
   * @param {Number|p5.Vector} x The x coordinate in screen space. (Or a vector for all three coordinates.)
   * @param {Number} y The y coordinate in screen space.
   * @param {Number} [z] The z coordinate in screen space.
   * @return {p5.Vector} A vector containing the 3D world space coordinates.
   * @example
   * <div>
   * <code>
   *
   * function setup() {
   *   createCanvas(100, 100);
   *   describe('A rotating square with a line passing through the mouse drawn across it.');
   * }
   *
   * function draw() {
   *   background(220);
   *
   *   // Move to center and rotate
   *   translate(width/2, height/2);
   *   rotate(millis() / 1000);
   *   rect(-30, -30, 60);
   *
   *   // Compute the location of the mouse in the coordinates of the square
   *   let localMouse = screenToWorld(createVector(mouseX, mouseY));
   *
   *   // Draw a line parallel to the local Y axis, passing through the mouse
   *   line(localMouse.x, -30, localMouse.x, 30);
   * }
   *
   * </code>
   * </div>
   *
   */ fn.screenToWorld = function(screenPosition) {
        if (typeof screenPosition === "number") {
            // We got passed numbers, convert to vector
            screenPosition = this.createVector(...arguments);
        }
        const matrix = this._renderer.getWorldToScreenMatrix();
        if (screenPosition.dimensions == 2) {
            // Calculate a sensible Z value for the current camera projection that
            // will result in 0 once converted to world coordinates
            let z = matrix.mat4[14] / matrix.mat4[15];
            screenPosition = this.createVector(screenPosition.x, screenPosition.y, z);
        }
        const matrixInverse = matrix.invert(matrix);
        const worldPosition = matrixInverse.multiplyAndNormalizePoint(screenPosition);
        return worldPosition;
    };
}
if (typeof p5 !== 'undefined') {
    environment(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/States.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "States": (()=>States)
});
class States {
    #modified = {};
    constructor(initialState){
        for(const key in initialState){
            this[key] = initialState[key];
        }
    }
    setValue(key, value) {
        if (!(key in this.#modified)) {
            this.#modified[key] = this[key];
        }
        this[key] = value;
    }
    getDiff() {
        const diff = this.#modified;
        this.#modified = {};
        return diff;
    }
    getModified() {
        return this.#modified;
    }
    applyDiff(prevModified) {
        for(const key in this.#modified){
            this[key] = this.#modified[key];
        }
        this.#modified = prevModified;
    }
}
;
}}),
"[project]/node_modules/p5/dist/core/helpers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>canvas)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
;
/**
 * @requires constants
 */ /*
  This function normalizes the first four arguments given to rect, ellipse and arc
  according to the mode.
  It returns a 'bounding box' object containing the coordinates of the upper left corner (x, y),
  and width and height (w, h). The returned width and height are always positive.
*/ function modeAdjust(a, b, c, d, mode) {
    let bbox;
    if (mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["e"]) {
        // CORNER mode already corresponds to a bounding box (top-left corner, width, height).
        // For negative widhts or heights, the absolute value is used.
        bbox = {
            x: a,
            y: b,
            w: Math.abs(c),
            h: Math.abs(d)
        };
    } else if (mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["i"]) {
        // CORNERS mode uses two opposite corners, in any configuration.
        // Make sure to get the top left corner by using the minimum of the x and y coordniates.
        bbox = {
            x: Math.min(a, c),
            y: Math.min(b, d),
            w: Math.abs(c - a),
            h: Math.abs(d - b)
        };
    } else if (mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["a"]) {
        // RADIUS mode uses the center point and half the width and height.
        // c (half width) and d (half height) could be negative, so use the absolute value
        // in calculating the top left corner (x, y).
        c = Math.abs(c);
        d = Math.abs(d);
        bbox = {
            x: a - c,
            y: b - d,
            w: 2 * c,
            h: 2 * d
        };
    } else if (mode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["C"]) {
        // CENTER mode uses the center point, width and height.
        // c (width) and d (height) could be negative, so use the absolute value
        // in calculating the top-left corner (x, y).
        c = Math.abs(c);
        d = Math.abs(d);
        bbox = {
            x: a - c * 0.5,
            y: b - d * 0.5,
            w: c,
            h: d
        };
    }
    return bbox;
}
var canvas = {
    modeAdjust
};
;
}}),
"[project]/node_modules/p5/dist/core/internationalization.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "availableTranslatorLanguages": (()=>availableTranslatorLanguages),
    "currentTranslatorLanguage": (()=>currentTranslatorLanguage),
    "initialize": (()=>initialize),
    "setTranslatorLanguage": (()=>setTranslatorLanguage),
    "translator": (()=>translator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next/dist/esm/i18next.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2d$browser$2d$languagedetector$2f$dist$2f$esm$2f$i18nextBrowserLanguageDetector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js [app-ssr] (ecmascript)");
;
;
var fes = {
    autoplay: "The media that tried to play (with '{{src}}') wasn't allowed to by this browser, most likely due to the browser's autoplay policy.\n\n+ More info: {{url}}",
    checkUserDefinedFns: "It seems that you may have accidentally written {{name}} instead of {{actualName}}. Please correct it if it's not intentional.",
    fileLoadError: {
        bytes: "It looks like there was a problem loading your file. {{suggestion}}",
        font: "It looks like there was a problem loading your font. {{suggestion}}",
        gif: "There was some trouble loading your GIF. Make sure that your GIF is using 87a or 89a encoding.",
        image: "It looks like there was a problem loading your image. {{suggestion}}",
        json: "It looks like there was a problem loading your JSON file. {{suggestion}}",
        large: "If your large file isn't fetched successfully, we recommend splitting the file into smaller segments and fetching those.",
        strings: "It looks like there was a problem loading your text file. {{suggestion}}",
        suggestion: "Try checking if the file path ({{filePath}}) is correct, hosting the file online, or running a local server.\n\n+ More info: {{url}}",
        table: "It looks like there was a problem loading your table file. {{suggestion}}",
        xml: "It looks like there was a problem loading your XML file. {{suggestion}}"
    },
    friendlyParamError: {
        type_EMPTY_VAR: "{{location}} {{func}}() was expecting {{formatType}} for the {{position}} parameter, received an empty variable instead. If not intentional, this is often a problem with scope.\n\n+ More info: {{url}}",
        type_TOO_FEW_ARGUMENTS: "{{location}} {{func}}() was expecting at least {{minParams}} arguments, but received only {{argCount}}.",
        type_TOO_MANY_ARGUMENTS: "{{location}} {{func}}() was expecting no more than {{maxParams}} arguments, but received {{argCount}}.",
        type_WRONG_TYPE: "{{location}} {{func}}() was expecting {{formatType}} for the {{position}} parameter, received {{argType}} instead."
    },
    globalErrors: {
        reference: {
            cannotAccess: "\n{{location}} \"{{symbol}}\" is used before declaration. Make sure you have declared the variable before using it.\n\n+ More info: {{url}}",
            notDefined: "\n{{location}} \"{{symbol}}\" is not defined in the current scope. If you have defined it in your code, you should check its scope, spelling, and letter-casing (JavaScript is case-sensitive).\n\n+ More info: {{url}}"
        },
        stackSubseq: "└[{{location}}] \n\t Called from line {{line}} in {{func}}()\n",
        stackTop: "┌[{{location}}] \n\t Error at line {{line}} in {{func}}()\n",
        syntax: {
            badReturnOrYield: "\nSyntax Error - return lies outside of a function. Make sure you’re not missing any brackets, so that return lies inside a function.\n\n+ More info: {{url}}",
            invalidToken: "\nSyntax Error - Found a symbol that JavaScript doesn't recognize or didn't expect at it's place.\n\n+ More info: {{url}}",
            missingInitializer: "\nSyntax Error - A const variable is declared but not initialized. In JavaScript, an initializer for a const is required. A value must be specified in the same statement in which the variable is declared. Check the line number in the error and assign the const variable a value.\n\n+ More info: {{url}}",
            redeclaredVariable: "\nSyntax Error - \"{{symbol}}\" is being redeclared. JavaScript doesn't allow declaring a variable more than once. Check the line number in error for redeclaration of the variable.\n\n+ More info: {{url}}",
            unexpectedToken: "\nSyntax Error - Symbol present at a place that wasn't expected.\nUsually this is due to a typo. Check the line number in the error for anything missing/extra.\n\n+ More info: {{url}}"
        },
        type: {
            constAssign: "\n{{location}} A const variable is being re-assigned. In javascript, re-assigning a value to a constant is not allowed. If you want to re-assign new values to a variable, make sure it is declared as var or let.\n\n+ More info: {{url}}",
            notfunc: "\n{{location}} \"{{symbol}}\" could not be called as a function.\nCheck the spelling, letter-casing (JavaScript is case-sensitive) and its type.\n\n+ More info: {{url}}",
            notfuncObj: "\n{{location}} \"{{symbol}}\" could not be called as a function.\nVerify whether \"{{obj}}\" has \"{{symbol}}\" in it and check the spelling, letter-casing (JavaScript is case-sensitive) and its type.\n\n+ More info: {{url}}",
            readFromNull: "\n{{location}} The property of null can't be read. In javascript the value null indicates that an object has no value.\n\n+ More info: {{url}}",
            readFromUndefined: "\n{{location}} Cannot read property of undefined. Check the line number in error and make sure the variable which is being operated is not undefined.\n\n + More info: {{url}}"
        }
    },
    libraryError: "{{location}} An error with message \"{{error}}\" occurred inside the p5js library when {{func}} was called. If not stated otherwise, it might be an issue with the arguments passed to {{func}}.",
    location: "[{{file}}, line {{line}}]",
    misspelling: "{{location}} It seems that you may have accidentally written \"{{name}}\" instead of \"{{actualName}}\". Please correct it to {{actualName}} if you wish to use the {{type}} from p5.js.",
    misspelling_plural: "{{location}} It seems that you may have accidentally written \"{{name}}\".\nYou may have meant one of the following: \n{{suggestions}}",
    misusedTopLevel: "Did you just try to use p5.js's {{symbolName}} {{symbolType}}? If so, you may want to move it into your sketch's setup() function.\n\n+ More info: {{url}}",
    preloadDisabled: "The preload() function has been removed in p5.js 2.0. Please load assets in setup() using async / await keywords or callbacks instead. See https://dev.to/limzykenneth/asynchronous-p5js-20-458f for more information.",
    positions: {
        p_1: "first",
        p_10: "tenth",
        p_11: "eleventh",
        p_12: "twelfth",
        p_2: "second",
        p_3: "third",
        p_4: "fourth",
        p_5: "fifth",
        p_6: "sixth",
        p_7: "seventh",
        p_8: "eighth",
        p_9: "ninth"
    },
    pre: "\n🌸 p5.js says: {{message}}",
    sketchReaderErrors: {
        reservedConst: "you have used a p5.js reserved variable \"{{symbol}}\" make sure you change the variable name to something else.\n\n+ More info: {{url}}",
        reservedFunc: "you have used a p5.js reserved function \"{{symbol}}\" make sure you change the function name to something else.\n\n+ More info: {{url}}"
    },
    welcome: "Welcome! This is your friendly debugger. To turn me off, switch to using p5.min.js.",
    wrongPreload: "{{location}} An error with message \"{{error}}\" occurred inside the p5js library when \"{{func}}\" was called. If not stated otherwise, it might be due to \"{{func}}\" being called from preload. Nothing besides load calls (loadImage, loadJSON, loadFont, loadStrings, etc.) should be inside the preload function."
};
var en = {
    fes: fes
};
// Only one language is imported above. This is intentional as other languages
// will be hosted online and then downloaded whenever needed
/*
 * Here, we define a default/fallback language which we can use without internet.
 * You won't have to change this when adding a new language.
 *
 * `translation` is the namespace we are using for our initial set of strings
 */ var fallbackResources = {
    en: {
        translation: en
    }
};
/*
 * This is a list of languages that we have added so far.
 * If you have just added a new language (yay!), add its key to the list below
 * (`en` is english, `es` es español). Also add its export to
 * dev.js, which is another file in this folder.
 * @private
 */ const languages = [
    'en',
    'es',
    'ko',
    'zh',
    'hi',
    'ja'
];
if (typeof IS_MINIFIED === 'undefined') {
    // internationalization is only for the unminified build
    if (typeof P5_DEV_BUILD !== 'undefined') {
        // When the library is built in development mode ( using npm run dev )
        // we want to use the current translation files on the disk, which may have
        // been updated but not yet pushed to the CDN.
        let completeResources = __turbopack_context__.r("[project]/node_modules/p5/translations/dev.js [app-ssr] (ecmascript)");
        for (const language of Object.keys(completeResources)){
            // In es_translation, language is es and namespace is translation
            // In es_MX_translation, language is es-MX and namespace is translation
            const parts = language.split('_');
            const lng = parts.slice(0, parts.length - 1).join('-');
            const ns = parts[parts.length - 1];
            fallbackResources[lng] = fallbackResources[lng] || {};
            fallbackResources[lng][ns] = completeResources[language];
        }
    }
}
/*
 * This is our i18next "backend" plugin. It tries to fetch languages
 * from a CDN.
 * @private
 */ class FetchResources {
    constructor(services, options){
        this.init(services, options);
    }
    // run fetch with a timeout. Automatically rejects on timeout
    // default timeout = 2000 ms
    fetchWithTimeout(url, options, timeout = 2000) {
        return Promise.race([
            fetch(url, options),
            new Promise((_, reject)=>setTimeout(()=>reject(new Error('timeout')), timeout))
        ]);
    }
    init(services, options = {}) {
        this.services = services;
        this.options = options;
    }
    read(language, namespace, callback) {
        const loadPath = this.options.loadPath;
        if (language === this.options.fallback) {
            // if the default language of the user is the same as our inbuilt fallback,
            // there's no need to fetch resources from the cdn. This won't actually
            // need to run when we use "partialBundledLanguages" in the init
            // function.
            callback(null, fallbackResources[language][namespace]);
        } else if (languages.includes(language)) {
            // The user's language is included in the list of languages
            // that we so far added translations for.
            const url = this.services.interpolator.interpolate(loadPath, {
                lng: language,
                ns: namespace
            });
            this.loadUrl(url, callback);
        } else {
            // We don't have translations for this language. i18next will use
            // the default language instead.
            callback('Not found', false);
        }
    }
    loadUrl(url, callback) {
        this.fetchWithTimeout(url).then((response)=>{
            const ok = response.ok;
            if (!ok) {
                // caught in the catch() below
                throw new Error(`failed loading ${url}`);
            }
            return response.json();
        }, ()=>{
            // caught in the catch() below
            throw new Error(`failed loading ${url}`);
        }).then((data)=>{
            return callback(null, data);
        }).catch(callback);
    }
}
FetchResources.type = 'backend';
/**
 * This is our translation function. Give it a key and
 * it will retrieve the appropriate string
 * (within supported languages) according to the
 * user's browser's language settings.
 * @function translator
 * @param {String} key a key that corresponds to a message in our translation files
 * @param {Object} values values for use in the message under the given `key`
 * @returns {String} message (with values inserted) in the user's browser language
 * @private
 */ let translator = (key, values)=>{
    console.debug('p5.js translator called before translations were loaded');
    // Certain FES functionality may trigger before translations are downloaded.
    // Using "partialBundledLanguages" option during initialization, we can
    // still use our fallback language to display messages
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].t(key, values); /* i18next-extract-disable-line */ 
};
// (We'll set this to a real value in the init function below!)
/*
 * Set up our translation function, with loaded languages
 * @private
 */ const initialize = ()=>{
    let i18init = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].use(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2d$browser$2d$languagedetector$2f$dist$2f$esm$2f$i18nextBrowserLanguageDetector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]).use(FetchResources).init({
        fallbackLng: 'en',
        nestingPrefix: '$tr(',
        nestingSuffix: ')',
        defaultNS: 'translation',
        returnEmptyString: false,
        interpolation: {
            escapeValue: false
        },
        detection: {
            checkWhitelist: false,
            // prevent storing or locating language from cookie or localStorage
            // more info on https://github.com/processing/p5.js/issues/4862
            order: [
                'querystring',
                'navigator',
                'htmlTag',
                'path',
                'subdomain'
            ],
            caches: []
        },
        backend: {
            fallback: 'en',
            loadPath: 'https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json'
        },
        partialBundledLanguages: true,
        resources: fallbackResources
    }).then((translateFn)=>{
        translator = translateFn;
    }, (e)=>console.debug(`Translations failed to load (${e})`));
    // i18next.init() returns a promise that resolves when the translations
    // are loaded. We use this in core/init.js to hold p5 initialization until
    // we have the translation files.
    return i18init;
};
/*
 * Returns a list of languages we have translations loaded for
 * @private
 */ const availableTranslatorLanguages = ()=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].languages;
};
/*
 * Returns the current language selected for translation
 * @private
 */ const currentTranslatorLanguage = (language)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].language;
};
/*
 * Sets the current language for translation
 * Returns a promise that resolved when loading is finished,
 * or rejects if it fails.
 * @private
 */ const setTranslatorLanguage = (language)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].changeLanguage(language || undefined, (e)=>console.debug(`Translations failed to load (${e})`));
};
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/browser_errors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// This contains a data table used by ./fes_core.js/fesErrorMonitor().
//
// Note: Different browsers use different error strings for the same error.
// Extracting info from the browser error messages is easier and cleaner
// if we have a predefined lookup. This file serves as that lookup.
// Using this lookup we match the errors obtained from the browser, classify
// them into types and extract the required information.
// The FES can use the extracted info to generate a friendly error message
// for the matching error.
__turbopack_context__.s({
    "default": (()=>strings)
});
const strings = {
    ReferenceError: [
        {
            msg: '{{}} is not defined',
            type: 'NOTDEFINED',
            browser: 'all'
        },
        {
            msg: "Can't find variable: {{}}",
            type: 'NOTDEFINED',
            browser: 'Safari'
        },
        {
            msg: "Cannot access '{{.}}' before initialization",
            type: 'CANNOTACCESS',
            browser: 'Chrome'
        },
        {
            msg: "can't access lexical declaration '{{.}}' before initialization",
            type: 'CANNOTACCESS',
            browser: 'Firefox'
        }
    ],
    SyntaxError: [
        {
            msg: 'illegal character',
            type: 'INVALIDTOKEN',
            browser: 'Firefox'
        },
        {
            msg: 'Invalid character',
            type: 'INVALIDTOKEN',
            browser: 'Safari'
        },
        {
            msg: 'Invalid or unexpected token',
            type: 'INVALIDTOKEN',
            browser: 'Chrome'
        },
        {
            msg: "Unexpected token '{{.}}'",
            type: 'UNEXPECTEDTOKEN',
            browser: 'Chrome'
        },
        {
            msg: "expected {{.}}, got '{{.}}'",
            type: 'UNEXPECTEDTOKEN',
            browser: 'Chrome'
        },
        {
            msg: "Identifier '{{.}}' has already been declared",
            type: 'REDECLAREDVARIABLE',
            browser: 'Chrome'
        },
        {
            msg: 'redeclaration of {} {{.}}',
            type: 'REDECLAREDVARIABLE',
            browser: 'Firefox'
        },
        {
            msg: 'Missing initializer in const declaration',
            type: 'MISSINGINITIALIZER',
            browser: 'Chrome'
        },
        {
            msg: 'missing = in const declaration',
            type: 'MISSINGINITIALIZER',
            browser: 'Firefox'
        },
        {
            msg: 'Illegal return statement',
            type: 'BADRETURNORYIELD',
            browser: 'Chrome'
        },
        {
            msg: 'return not in function',
            type: 'BADRETURNORYIELD',
            browser: 'Firefox'
        }
    ],
    TypeError: [
        {
            msg: '{{.}} is not a function',
            type: 'NOTFUNC',
            browser: 'all'
        },
        {
            msg: 'Cannot read {{.}} null',
            type: 'READNULL',
            browser: 'Chrome'
        },
        {
            msg: '{{.}} is null',
            type: 'READNULL',
            browser: 'Firefox'
        },
        {
            msg: 'Cannot read {{.}} undefined',
            type: 'READUDEFINED',
            browser: 'Chrome'
        },
        {
            msg: '{{.}} is undefined',
            type: 'READUDEFINED',
            browser: 'Firefox'
        },
        {
            msg: 'Assignment to constant variable',
            type: 'CONSTASSIGN',
            browser: 'Chrome'
        },
        {
            msg: "invalid assignment to const '{{.}}'",
            type: 'CONSTASSIGN',
            browser: 'Firefox'
        }
    ]
};
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/fes_core.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>fesCore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/internationalization.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$browser_errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/browser_errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next/dist/esm/i18next.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2d$browser$2d$languagedetector$2f$dist$2f$esm$2f$i18nextBrowserLanguageDetector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js [app-ssr] (ecmascript)");
;
;
;
;
;
/**
 * @for p5
 * @requires core
 *
 * This is the main file for the Friendly Error System (FES), containing
 * the core as well as miscellaneous functionality of the FES. Here is a
 * brief outline of the functions called in this system.
 *
 * The FES may be invoked by a call to either
 * (1) _validateParameters, (2) _friendlyFileLoadError, (3) _friendlyError,
 * (4) helpForMisusedAtTopLevelCode, or (5) _fesErrorMonitor.
 *
 * _validateParameters is located in validate_params.js along with other code
 * used for parameter validation.
 * _friendlyFileLoadError is located in file_errors.js along with other code
 * used for dealing with file load errors.
 * Apart from this, there's also a file stacktrace.js, which contains the code
 * to parse the error stack, borrowed from:
 * https://github.com/stacktracejs/stacktrace.js
 *
 * For more detailed information on the FES functions, including the call
 * sequence of each function, please look at the FES Reference + Dev Notes:
 * https://github.com/processing/p5.js/blob/main/contributor_docs/fes_reference_dev_notes.md
 */ function fesCore(p51, fn) {
    // p5.js blue, p5.js orange, auto dark green; fallback p5.js darkened magenta
    // See testColors below for all the color codes and names
    const typeColors = [
        '#2D7BB6',
        '#EE9900',
        '#4DB200',
        '#C83C00'
    ];
    let misusedAtTopLevelCode = null;
    let defineMisusedAtTopLevelCode = null;
    // the threshold for the maximum allowed levenshtein distance
    // used in misspelling detection
    const EDIT_DIST_THRESHOLD = 2;
    // Used for internally thrown errors that should not get wrapped by another
    // friendly error handler
    class FESError extends Error {
    }
    if (typeof IS_MINIFIED !== 'undefined') {
        p51._friendlyError = p51._checkForUserDefinedFunctions = p51._fesErrorMonitor = ()=>{};
    } else {
        // const errorTable = require('./browser_errors').default;
        // -- Borrowed from jQuery 1.11.3 --
        const class2type = {};
        const toString = class2type.toString;
        const names = [
            'Boolean',
            'Number',
            'String',
            'Function',
            'Array',
            'Date',
            'RegExp',
            'Object',
            'Error'
        ];
        for(let n = 0; n < names.length; n++){
            class2type[`[object ${names[n]}]`] = names[n].toLowerCase();
        }
        const getType = (obj)=>{
            if (obj == null) {
                return `${obj}`;
            }
            return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
        };
        // -- End borrow --
        // entry points into user-defined code
        const entryPoints = [
            'setup',
            'draw',
            'deviceMoved',
            'deviceTurned',
            'deviceShaken',
            'doubleClicked',
            'mousePressed',
            'mouseReleased',
            'mouseMoved',
            'mouseDragged',
            'mouseClicked',
            'mouseWheel',
            'touchStarted',
            'touchMoved',
            'touchEnded',
            'keyPressed',
            'keyReleased',
            'keyTyped',
            'windowResized'
        ];
        /**
     * Takes a message and a p5 function func, and adds a link pointing to
     * the reference documentation of func at the end of the message
     *
     * @method mapToReference
     * @private
     * @param {String}  message   the words to be said
     * @param {String}  [func]    the name of function
     *
     * @returns {String}
     */ const mapToReference = (message, func)=>{
            let msgWithReference = '';
            if (func == null || func.substring(0, 4) === 'load') {
                msgWithReference = message;
            } else {
                const methodParts = func.split('.');
                const referenceSection = methodParts.length > 1 ? `${methodParts[0]}.${methodParts[1]}` : 'p5';
                const funcName = methodParts.length === 1 ? func : methodParts.slice(2).join('/');
                //Whenever func having p5.[Class] is encountered, we need to have the error link as mentioned below else different link
                funcName.startsWith('p5.') ? msgWithReference = `${message} (https://p5js.org/reference/${referenceSection}.${funcName})` : msgWithReference = `${message} (https://p5js.org/reference/${referenceSection}/${funcName})`;
            }
            return msgWithReference;
        };
        /**
     * Prints out a fancy, colorful message to the console log
     * Attaches Friendly Errors prefix [fes.pre] to the message.
     *
     * @method _report
     * @private
     * @param  {String}          message  Message to be printed
     * @param  {String}          [func]   Name of function
     * @param  {Number|String}   [color]  CSS color code
     *
     * @return console logs
     */ p51._report = (message, func, color)=>{
            // if p5._fesLogger is set ( i.e we are running tests ), use that
            // instead of console.log
            const log = p51._fesLogger == null ? console.log.bind(console) : p51._fesLogger;
            if ('undefined' === getType(color)) {
                color = '#B40033'; // dark magenta
            } else if (getType(color) === 'number') {
                // Type to color
                color = typeColors[color];
            }
            // Add a link to the reference docs of func at the end of the message
            message = mapToReference(message, func);
            const prefixedMsg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.pre', {
                message
            });
            {
                log(prefixedMsg);
            }
        };
        /**
     * Throws an error with helpful p5 context. Similar to _report, but
     * this will stop other code execution to prevent downstream errors
     * from being logged.
     *
     * @method _error
     * @private
     * @param                    context  p5 instance the error is from
     * @param  {String}          message  Message to be printed
     * @param  {String}          [func]   Name of function
     */ p51._error = (context, message, func)=>{
            p51._report(message, func);
            context.hitCriticalError = true;
            // Throw an error to stop the current function (e.g. setup or draw) from
            // running more code
            throw new FESError('Stopping sketch to prevent more errors');
        };
        /**
     * This is a generic method that can be called from anywhere in the p5
     * library to alert users to a common error.
     *
     * @method _friendlyError
     * @private
     * @param  {String}         message   Message to be printed
     * @param  {String}         [func]    Name of the function linked to error
     * @param  {Number|String}  [color]   CSS color code
     */ p51._friendlyError = function(message, func, color) {
            p51._report(message, func, color);
        };
        /**
     * This is called internally if there is an error with autoplay. Generates
     * and prints a friendly error message [fes.autoplay].
     *
     * @method _friendlyAutoplayError
     * @private
     */ p51._friendlyAutoplayError = function(src) {
            const message = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.autoplay', {
                src,
                url: 'https://developer.mozilla.org/docs/Web/Media/Autoplay_guide'
            });
            console.log((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.pre', {
                message
            }));
        };
        /**
     * Measures dissimilarity between two strings by calculating
     * the Levenshtein distance.
     *
     * If the "distance" between them is small enough, it is
     * reasonable to think that one is the misspelled version of the other.
     *
     * Specifically, this uses the Wagner–Fischer algorithm.
     * @method computeEditDistance
     * @private
     * @param {String} w1 the first word
     * @param {String} w2 the second word
     *
     * @returns {Number} the "distance" between the two words, a smaller value
     *                   indicates that the words are similar
     */ const computeEditDistance = (w1, w2)=>{
            const l1 = w1.length, l2 = w2.length;
            if (l1 === 0) return w2;
            if (l2 === 0) return w1;
            let prev = [];
            let cur = [];
            for(let j = 0; j < l2 + 1; j++){
                cur[j] = j;
            }
            prev = cur;
            for(let i = 1; i < l1 + 1; i++){
                cur = [];
                for(let j = 0; j < l2 + 1; j++){
                    if (j === 0) {
                        cur[j] = i;
                    } else {
                        let a1 = w1[i - 1], a2 = w2[j - 1];
                        let temp = 999999;
                        let cost = a1.toLowerCase() === a2.toLowerCase() ? 0 : 1;
                        temp = temp > cost + prev[j - 1] ? cost + prev[j - 1] : temp;
                        temp = temp > 1 + cur[j - 1] ? 1 + cur[j - 1] : temp;
                        temp = temp > 1 + prev[j] ? 1 + prev[j] : temp;
                        cur[j] = temp;
                    }
                }
                prev = cur;
            }
            return cur[l2];
        };
        /**
     * Whether or not p5.js is running in an environment where `preload` will be
     * run before `setup`.
     *
     * This will return false for default builds >= 2.0, but backwards compatibility
     * addons may set this to true.
     *
     * @private
     */ p51.isPreloadSupported = function() {
            return false;
        };
        /**
     * Checks capitalization for user defined functions.
     *
     * Generates and prints a friendly error message using key:
     * "fes.checkUserDefinedFns".
     *
     * @method checkForUserDefinedFunctions
     * @private
     * @param {*} context   Current default context. Set to window in
     *                      "global mode" and to a p5 instance in "instance mode"
     */ const checkForUserDefinedFunctions = (context)=>{
            if (p51.disableFriendlyErrors) return;
            // if using instance mode, this function would be called with the current
            // instance as context
            const instanceMode = context instanceof p51;
            context = instanceMode ? context : window;
            const fnNames = entryPoints;
            if (context.preload && !p51.isPreloadSupported()) {
                p51._error(context, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.preloadDisabled'));
            }
            const fxns = {};
            // lowercasename -> actualName mapping
            fnNames.forEach((symbol)=>{
                fxns[symbol.toLowerCase()] = symbol;
            });
            for (const prop of Object.keys(context)){
                const lowercase = prop.toLowerCase();
                // check if the lowercase property name has an entry in fxns, if the
                // actual name with correct capitalization doesnt exist in context,
                // and if the user-defined symbol is of the type function
                if (fxns.hasOwnProperty(lowercase) && !context[fxns[lowercase]] && typeof context[prop] === 'function') {
                    const msg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.checkUserDefinedFns', {
                        name: prop,
                        actualName: fxns[lowercase]
                    });
                    p51._friendlyError(msg, fxns[lowercase]);
                }
            }
        };
        /**
     * Compares the symbol caught in the ReferenceError to everything in
     * misusedAtTopLevel ( all public p5 properties ).
     *
     * Generates and prints a friendly error message using key: "fes.misspelling".
     *
     * @method handleMisspelling
     * @private
     * @param {String} errSym   Symbol to whose spelling to check
     * @param {Error} error     ReferenceError object
     *
     * @returns {Boolean} tell whether error was likely due to typo
     */ const handleMisspelling = (errSym, error)=>{
            if (!misusedAtTopLevelCode) {
                defineMisusedAtTopLevelCode();
            }
            const distanceMap = {};
            let min = 999999;
            // compute the levenshtein distance for the symbol against all known
            // public p5 properties. Find the property with the minimum distance
            misusedAtTopLevelCode.forEach((symbol)=>{
                let dist = computeEditDistance(errSym, symbol.name);
                if (distanceMap[dist]) distanceMap[dist].push(symbol);
                else distanceMap[dist] = [
                    symbol
                ];
                if (dist < min) min = dist;
            });
            // if the closest match has more "distance" than the max allowed threshold
            if (min > Math.min(EDIT_DIST_THRESHOLD, errSym.length)) return false;
            // Show a message only if the caught symbol and the matched property name
            // differ in their name ( either letter difference or difference of case )
            const matchedSymbols = distanceMap[min].filter((symbol)=>symbol.name !== errSym);
            if (matchedSymbols.length !== 0) {
                const parsed = p51._getErrorStackParser().parse(error);
                let locationObj;
                if (parsed && parsed[0] && parsed[0].fileName && parsed[0].lineNumber && parsed[0].columnNumber) {
                    locationObj = {
                        location: `${parsed[0].fileName}:${parsed[0].lineNumber}:${parsed[0].columnNumber}`,
                        file: parsed[0].fileName.split('/').slice(-1),
                        line: parsed[0].lineNumber
                    };
                }
                let msg;
                if (matchedSymbols.length === 1) {
                    // To be used when there is only one closest match. The count parameter
                    // allows i18n to pick between the keys "fes.misspelling" and
                    // "fes.misspelling_plural"
                    msg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.misspelling', {
                        name: errSym,
                        actualName: matchedSymbols[0].name,
                        type: matchedSymbols[0].type,
                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : '',
                        count: matchedSymbols.length
                    });
                } else {
                    // To be used when there are multiple closest matches. Gives each
                    // suggestion on its own line, the function name followed by a link to
                    // reference documentation
                    const suggestions = matchedSymbols.map((symbol)=>{
                        const message = '▶️ ' + symbol.name + (symbol.type === 'function' ? '()' : '');
                        return mapToReference(message, symbol.name);
                    }).join('\n');
                    msg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.misspelling', {
                        name: errSym,
                        suggestions,
                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : '',
                        count: matchedSymbols.length
                    });
                }
                // If there is only one closest match, tell _friendlyError to also add
                // a link to the reference documentation. In case of multiple matches,
                // this is already done in the suggestions variable, one link for each
                // suggestion.
                p51._friendlyError(msg, matchedSymbols.length === 1 ? matchedSymbols[0].name : undefined);
                return true;
            }
            return false;
        };
        /**
     * Prints a friendly stacktrace for user-written functions for "global" errors
     *
     * Generates and prints a friendly error message using key:
     * "fes.globalErrors.stackTop", "fes.globalErrors.stackSubseq".
     *
     * @method printFriendlyStack
     * @private
     * @param {Array} friendlyStack
     */ const printFriendlyStack = (friendlyStack)=>{
            const log = p51._fesLogger && typeof p51._fesLogger === 'function' ? p51._fesLogger : console.log.bind(console);
            if (friendlyStack.length > 1) {
                let stacktraceMsg = '';
                friendlyStack.forEach((frame, idx)=>{
                    const location = `${frame.fileName}:${frame.lineNumber}:${frame.columnNumber}`;
                    let frameMsg, translationObj = {
                        func: frame.functionName,
                        line: frame.lineNumber,
                        location,
                        file: frame.fileName.split('/').slice(-1)
                    };
                    if (idx === 0) {
                        frameMsg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.stackTop', translationObj);
                    } else {
                        frameMsg = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.stackSubseq', translationObj);
                    }
                    stacktraceMsg += frameMsg;
                });
                log(stacktraceMsg);
            }
        };
        /**
     * Takes a stacktrace array and filters out all frames that show internal p5
     * details.
     *
     * Generates and prints a friendly error message using key:
     * "fes.wrongPreload", "fes.libraryError".
     *
     * The processed stack is used to find whether the error happened internally
     * within the library, and if the error was due to a non-loadX() method
     * being used in preload.
     *
     * "Internally" here means that the exact location of the error (the top of
     * the stack) is a piece of code written in the p5.js library (which may or
     * may not have been called from the user's sketch).
     *
     * @method processStack
     * @private
     * @param {Error} error
     * @param {Array} stacktrace
     *
     * @returns {Array} An array with two elements, [isInternal, friendlyStack]
     *                 isInternal: a boolean value indicating whether the error
     *                             happened internally
     *                 friendlyStack: the filtered (simplified) stacktrace
     */ const processStack = (error, stacktrace)=>{
            // cannot process a stacktrace that doesn't exist
            if (!stacktrace) return [
                false,
                null
            ];
            stacktrace.forEach((frame)=>{
                frame.functionName = frame.functionName || '';
            });
            // isInternal - Did this error happen inside the library
            let isInternal = false;
            let p5FileName, friendlyStack, currentEntryPoint;
            // Intentionally throw an error that we catch so that we can check the name
            // of the current file. Any errors we see from this file, we treat as
            // internal errors.
            try {
                throw new Error();
            } catch (testError) {
                const testStacktrace = p51._getErrorStackParser().parse(testError);
                p5FileName = testStacktrace[0].fileName;
            }
            for(let i = stacktrace.length - 1; i >= 0; i--){
                let splitted = stacktrace[i].functionName.split('.');
                if (entryPoints.includes(splitted[splitted.length - 1])) {
                    // remove everything below an entry point function (setup, draw, etc).
                    // (it's usually the internal initialization calls)
                    friendlyStack = stacktrace.slice(0, i + 1);
                    currentEntryPoint = splitted[splitted.length - 1];
                    // We call the error "internal" if the source of the error was a
                    // function from within the p5.js library file, but called from the
                    // user's code directly. We only need to check the topmost frame in
                    // the stack trace since any function internal to p5 should pass this
                    // check, not just public p5 functions.
                    if (stacktrace[0].fileName === p5FileName) {
                        isInternal = true;
                        break;
                    }
                    break;
                }
            }
            // in some cases ( errors in promises, callbacks, etc), no entry-point
            // function may be found in the stacktrace. In that case just use the
            // entire stacktrace for friendlyStack
            if (!friendlyStack) friendlyStack = stacktrace;
            if (isInternal) {
                // the frameIndex property is added before the filter, so frameIndex
                // corresponds to the index of a frame in the original stacktrace.
                // Then we filter out all frames which belong to the file that contains
                // the p5 library
                friendlyStack = friendlyStack.map((frame, index)=>{
                    frame.frameIndex = index;
                    return frame;
                }).filter((frame)=>frame.fileName !== p5FileName);
                // a weird case, if for some reason we can't identify the function called
                // from user's code
                if (friendlyStack.length === 0) return [
                    true,
                    null
                ];
                // get the function just above the topmost frame in the friendlyStack.
                // i.e the name of the library function called from user's code
                const func = stacktrace[friendlyStack[0].frameIndex - 2].functionName.split('.').slice(-1)[0];
                // Try and get the location (line no.) from the top element of the stack
                let locationObj;
                if (friendlyStack[0].fileName && friendlyStack[0].lineNumber && friendlyStack[0].columnNumber) {
                    locationObj = {
                        location: `${friendlyStack[0].fileName}:${friendlyStack[0].lineNumber}:${friendlyStack[0].columnNumber}`,
                        file: friendlyStack[0].fileName.split('/').slice(-1),
                        line: friendlyStack[0].lineNumber
                    };
                    // if already handled by another part of the FES, don't handle again
                    if (p51._fesLogCache[locationObj.location]) return [
                        true,
                        null
                    ];
                }
                // Check if the error is due to a non loadX method being used incorrectly
                // in preload
                if (currentEntryPoint === 'preload' && fn._preloadMethods[func] == null) {
                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.wrongPreload', {
                        func,
                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : '',
                        error: error.message
                    }), 'preload');
                } else {
                    // Library error
                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.libraryError', {
                        func,
                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : '',
                        error: error.message
                    }), func);
                }
                // Finally, if it's an internal error, print the friendlyStack
                // ( fesErrorMonitor won't handle this error )
                if (friendlyStack && friendlyStack.length) {
                    printFriendlyStack(friendlyStack);
                }
            }
            return [
                isInternal,
                friendlyStack
            ];
        };
        /**
     * Handles "global" errors that the browser catches.
     *
     * Called when an error event happens and detects the type of error.
     *
     * Generates and prints a friendly error message using key:
     * "fes.globalErrors.syntax.[*]", "fes.globalErrors.reference.[*]",
     * "fes.globalErrors.type.[*]".
     *
     * @method fesErrorMonitor
     * @private
     * @param {*} e  Event object to extract error details from
     */ const fesErrorMonitor = (e)=>{
            if (p51.disableFriendlyErrors) return;
            // Don't try to handle an error intentionally emitted by FES to halt execution
            if (e && (e instanceof FESError || e.reason instanceof FESError)) return;
            // Try to get the error object from e
            let error;
            if (e instanceof Error) {
                error = e;
            } else if (e instanceof ErrorEvent) {
                error = e.error;
            } else if (e instanceof PromiseRejectionEvent) {
                error = e.reason;
                if (!(error instanceof Error)) return;
            }
            if (!error) return;
            let stacktrace = p51._getErrorStackParser().parse(error);
            // process the stacktrace from the browser and simplify it to give
            // friendlyStack.
            let [isInternal, friendlyStack] = processStack(error, stacktrace);
            // if this is an internal library error, the type of the error is not relevant,
            // only the user code that lead to it is.
            if (isInternal) {
                return;
            }
            const errList = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$browser_errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"][error.name];
            if (!errList) return; // this type of error can't be handled yet
            let matchedError;
            for (const obj of errList){
                let string = obj.msg;
                // capture the primary symbol mentioned in the error
                string = string.replace(new RegExp('{{}}', 'g'), '([a-zA-Z0-9_]+)');
                string = string.replace(new RegExp('{{.}}', 'g'), '(.+)');
                string = string.replace(new RegExp('{}', 'g'), '(?:[a-zA-Z0-9_]+)');
                let matched = error.message.match(string);
                if (matched) {
                    matchedError = Object.assign({}, obj);
                    matchedError.match = matched;
                    break;
                }
            }
            if (!matchedError) return;
            // Try and get the location from the top element of the stack
            let locationObj;
            if (stacktrace && stacktrace[0].fileName && stacktrace[0].lineNumber && stacktrace[0].columnNumber) {
                locationObj = {
                    location: `${stacktrace[0].fileName}:${stacktrace[0].lineNumber}:${stacktrace[0].columnNumber}`,
                    file: stacktrace[0].fileName.split('/').slice(-1),
                    line: friendlyStack[0].lineNumber
                };
            }
            switch(error.name){
                case 'SyntaxError':
                    {
                        // We can't really do much with syntax errors other than try to use
                        // a simpler framing of the error message. The stack isn't available
                        // for syntax errors
                        switch(matchedError.type){
                            case 'INVALIDTOKEN':
                                {
                                    //Error if there is an invalid or unexpected token that doesn't belong at this position in the code
                                    //let x = “not a string”; -> string not in proper quotes
                                    let url = 'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Illegal_character#What_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.syntax.invalidToken', {
                                        url
                                    }));
                                    break;
                                }
                            case 'UNEXPECTEDTOKEN':
                                {
                                    //Error if a specific language construct(, { ; etc) was expected, but something else was provided
                                    //for (let i = 0; i < 5,; ++i) -> a comma after i<5 instead of a semicolon
                                    let url = 'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Unexpected_token#What_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.syntax.unexpectedToken', {
                                        url
                                    }));
                                    break;
                                }
                            case 'REDECLAREDVARIABLE':
                                {
                                    //Error if a variable is redeclared by the user. Example=>
                                    //let a = 10;
                                    //let a = 100;
                                    let errSym = matchedError.match[1];
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter#what_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.syntax.redeclaredVariable', {
                                        symbol: errSym,
                                        url
                                    }));
                                    break;
                                }
                            case 'MISSINGINITIALIZER':
                                {
                                    //Error if a const variable is not initialized during declaration
                                    //Example => const a;
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const#what_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.syntax.missingInitializer', {
                                        url
                                    }));
                                    break;
                                }
                            case 'BADRETURNORYIELD':
                                {
                                    //Error when a return statement is misplaced(usually outside of a function)
                                    // const a = function(){
                                    //  .....
                                    //  }
                                    //  return; -> misplaced return statement
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield#what_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.syntax.badReturnOrYield', {
                                        url
                                    }));
                                    break;
                                }
                        }
                        break;
                    }
                case 'ReferenceError':
                    {
                        switch(matchedError.type){
                            case 'NOTDEFINED':
                                {
                                    //Error if there is a non-existent variable referenced somewhere
                                    //let a = 10;
                                    //console.log(x);
                                    let errSym = matchedError.match[1];
                                    if (errSym && handleMisspelling(errSym, error)) {
                                        break;
                                    }
                                    // if the flow gets this far, this is likely not a misspelling
                                    // of a p5 property/function
                                    let url = 'https://p5js.org/examples/data-variable-scope.html';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.reference.notDefined', {
                                        url,
                                        symbol: errSym,
                                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : ''
                                    }));
                                    if (friendlyStack) printFriendlyStack(friendlyStack);
                                    break;
                                }
                            case 'CANNOTACCESS':
                                {
                                    //Error if a lexical variable was accessed before it was initialized
                                    //console.log(a); -> variable accessed before it was initialized
                                    //let a=100;
                                    let errSym = matchedError.match[1];
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init#what_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.reference.cannotAccess', {
                                        url,
                                        symbol: errSym,
                                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : ''
                                    }));
                                    if (friendlyStack) printFriendlyStack(friendlyStack);
                                    break;
                                }
                        }
                        break;
                    }
                case 'TypeError':
                    {
                        switch(matchedError.type){
                            case 'NOTFUNC':
                                {
                                    //Error when some code expects you to provide a function, but that didn't happen
                                    //let a = document.getElementByID('foo'); -> getElementById instead of getElementByID
                                    let errSym = matchedError.match[1];
                                    let splitSym = errSym.split('.');
                                    let url = 'https://developer.mozilla.org/docs/Web/JavaScript/Reference/Errors/Not_a_function#What_went_wrong';
                                    // if errSym is aa.bb.cc , symbol would be cc and obj would aa.bb
                                    let translationObj = {
                                        url,
                                        symbol: splitSym[splitSym.length - 1],
                                        obj: splitSym.slice(0, splitSym.length - 1).join('.'),
                                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : ''
                                    };
                                    // There are two cases to handle here. When the function is called
                                    // as a property of an object and when it's called independently.
                                    // Both have different explanations.
                                    if (splitSym.length > 1) {
                                        p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.type.notfuncObj', translationObj));
                                    } else {
                                        p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.type.notfunc', translationObj));
                                    }
                                    if (friendlyStack) printFriendlyStack(friendlyStack);
                                    break;
                                }
                            case 'READNULL':
                                {
                                    //Error if a property of null is accessed
                                    //let a = null;
                                    //console.log(a.property); -> a is null
                                    let errSym = matchedError.match[1];
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong';
                                    /*let url2 =
                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null';*/ p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.type.readFromNull', {
                                        url,
                                        symbol: errSym,
                                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : ''
                                    }));
                                    if (friendlyStack) printFriendlyStack(friendlyStack);
                                    break;
                                }
                            case 'READUDEFINED':
                                {
                                    //Error if a property of undefined is accessed
                                    //let a; -> default value of a is undefined
                                    //console.log(a.property); -> a is undefined
                                    let errSym = matchedError.match[1];
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_property#what_went_wrong';
                                    /*let url2 =
                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined#description';*/ p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.type.readFromUndefined', {
                                        url,
                                        symbol: errSym,
                                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : ''
                                    }));
                                    if (friendlyStack) printFriendlyStack(friendlyStack);
                                    break;
                                }
                            case 'CONSTASSIGN':
                                {
                                    //Error when a const variable is reassigned a value
                                    //const a = 100;
                                    //a=10;
                                    let url = 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment#what_went_wrong';
                                    p51._friendlyError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.globalErrors.type.constAssign', {
                                        url,
                                        location: locationObj ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.location', locationObj) : ''
                                    }));
                                    if (friendlyStack) printFriendlyStack(friendlyStack);
                                    break;
                                }
                        }
                    }
            }
        };
        p51._fesErrorMonitor = fesErrorMonitor;
        p51._checkForUserDefinedFunctions = checkForUserDefinedFunctions;
        // logger for testing purposes.
        p51._fesLogger = null;
        p51._fesLogCache = {};
        window.addEventListener('load', checkForUserDefinedFunctions, false);
        window.addEventListener('error', p51._fesErrorMonitor, false);
        window.addEventListener('unhandledrejection', p51._fesErrorMonitor, false);
    /**
     * Prints out all the colors in the color pallete with white text.
     * For color blindness testing.
     */ /* function testColors() {
      const str = 'A box of biscuits, a box of mixed biscuits and a biscuit mixer';
      p5._friendlyError(str, 'print', '#ED225D'); // p5.js magenta
      p5._friendlyError(str, 'print', '#2D7BB6'); // p5.js blue
      p5._friendlyError(str, 'print', '#EE9900'); // p5.js orange
      p5._friendlyError(str, 'print', '#A67F59'); // p5.js light brown
      p5._friendlyError(str, 'print', '#704F21'); // p5.js gold
      p5._friendlyError(str, 'print', '#1CC581'); // auto cyan
      p5._friendlyError(str, 'print', '#FF6625'); // auto orange
      p5._friendlyError(str, 'print', '#79EB22'); // auto green
      p5._friendlyError(str, 'print', '#B40033'); // p5.js darkened magenta
      p5._friendlyError(str, 'print', '#084B7F'); // p5.js darkened blue
      p5._friendlyError(str, 'print', '#945F00'); // p5.js darkened orange
      p5._friendlyError(str, 'print', '#6B441D'); // p5.js darkened brown
      p5._friendlyError(str, 'print', '#2E1B00'); // p5.js darkened gold
      p5._friendlyError(str, 'print', '#008851'); // auto dark cyan
      p5._friendlyError(str, 'print', '#C83C00'); // auto dark orange
      p5._friendlyError(str, 'print', '#4DB200'); // auto dark green
    } */ }
    // This is a lazily-defined list of p5 symbols that may be
    // misused by beginners at top-level code, outside of setup/draw. We'd like
    // to detect these errors and help the user by suggesting they move them
    // into setup/draw.
    //
    // For more details, see https://github.com/processing/p5.js/issues/1121.
    misusedAtTopLevelCode = null;
    const FAQ_URL = 'https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup';
    /**
   * A helper function for populating misusedAtTopLevel list.
   *
   * @method defineMisusedAtTopLevelCode
   * @private
   */ defineMisusedAtTopLevelCode = ()=>{
        const uniqueNamesFound = {};
        const getSymbols = (obj)=>Object.getOwnPropertyNames(obj).filter((name)=>{
                if (name[0] === '_') {
                    return false;
                }
                if (name in uniqueNamesFound) {
                    return false;
                }
                uniqueNamesFound[name] = true;
                return true;
            }).map((name)=>{
                let type;
                if (typeof obj[name] === 'function') {
                    type = 'function';
                } else if (name === name.toUpperCase()) {
                    type = 'constant';
                } else {
                    type = 'variable';
                }
                return {
                    name,
                    type
                };
            });
        misusedAtTopLevelCode = [].concat(getSymbols(fn), // At present, p5 only adds its constants to fn during
        // construction, which may not have happened at the time a
        // ReferenceError is thrown, so we'll manually add them to our list.
        getSymbols(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["v"]));
        // This will ultimately ensure that we report the most specific error
        // possible to the user, e.g. advising them about HALF_PI instead of PI
        // when their code misuses the former.
        misusedAtTopLevelCode.sort((a, b)=>b.name.length - a.name.length);
    };
    /**
   * Detects browser level error event for p5 constants/functions used outside
   * of setup() and draw().
   *
   * Generates and prints a friendly error message using key:
   * "fes.misusedTopLevel".
   *
   * @method helpForMisusedAtTopLevelCode
   * @private
   * @param {Event} e       Error event
   * @param {Boolean} log   false
   *
   * @returns {Boolean} true
   */ const helpForMisusedAtTopLevelCode = (e, log)=>{
        if (!log) {
            log = console.log.bind(console);
        }
        if (!misusedAtTopLevelCode) {
            defineMisusedAtTopLevelCode();
        }
        // If we find that we're logging lots of false positives, we can
        // uncomment the following code to avoid displaying anything if the
        // user's code isn't likely to be using p5's global mode. (Note that
        // setup/draw are more likely to be defined due to JS function hoisting.)
        //
        //if (!('setup' in window || 'draw' in window)) {
        //  return;
        //}
        misusedAtTopLevelCode.some((symbol)=>{
            // Note that while just checking for the occurrence of the
            // symbol name in the error message could result in false positives,
            // a more rigorous test is difficult because different browsers
            // log different messages, and the format of those messages may
            // change over time.
            //
            // For example, if the user uses 'PI' in their code, it may result
            // in any one of the following messages:
            //
            //   * 'PI' is undefined                           (Microsoft Edge)
            //   * ReferenceError: PI is undefined             (Firefox)
            //   * Uncaught ReferenceError: PI is not defined  (Chrome)
            if (e.message && e.message.match(`\\W?${symbol.name}\\W`) !== null) {
                const symbolName = symbol.type === 'function' ? `${symbol.name}()` : symbol.name;
                if (typeof IS_MINIFIED !== 'undefined') {
                    log(`Did you just try to use p5.js's ${symbolName} ${symbol.type}? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ${FAQ_URL}`);
                } else {
                    log((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.misusedTopLevel', {
                        symbolName,
                        symbolType: symbol.type,
                        url: FAQ_URL
                    }));
                }
                return true;
            }
        });
    };
    // Exposing this primarily for unit testing.
    fn._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;
    if (document.readyState !== 'complete') {
        window.addEventListener('error', helpForMisusedAtTopLevelCode, false);
        // Our job is only to catch ReferenceErrors that are thrown when
        // global (non-instance mode) p5 APIs are used at the top-level
        // scope of a file, so we'll unbind our error listener now to make
        // sure we don't log false positives later.
        window.addEventListener('load', ()=>{
            window.removeEventListener('error', helpForMisusedAtTopLevelCode, false);
        });
    }
}
if (typeof p5 !== 'undefined') {
    fesCore(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/stacktrace.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @for p5
 * @requires core
 */ // Borrow from stacktracejs https://github.com/stacktracejs/stacktrace.js with
// minor modifications. The license for the same and the code is included below
// Copyright (c) 2017 Eric Wendelin and other contributors
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
__turbopack_context__.s({
    "default": (()=>stacktrace)
});
function ErrorStackParser() {
    let FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
    let CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
    let SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
    return {
        /**
     * Given an Error object, extract the most information from it.
     * @private
     * @param {Error} error object
     * @return {Array} of stack frames
     */ parse: function ErrorStackParser$$parse(error) {
            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
                return this.parseOpera(error);
            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                return this.parseV8OrIE(error);
            } else if (error.stack) {
                return this.parseFFOrSafari(error);
            } else ;
        },
        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
            // Fail-fast but return locations like "(native)"
            if (urlLike.indexOf(':') === -1) {
                return [
                    urlLike
                ];
            }
            let regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
            let parts = regExp.exec(urlLike.replace(/[()]/g, ''));
            return [
                parts[1],
                parts[2] || undefined,
                parts[3] || undefined
            ];
        },
        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
            let filtered = error.stack.split('\n').filter(function(line) {
                return !!line.match(CHROME_IE_STACK_REGEXP);
            }, this);
            return filtered.map(function(line) {
                if (line.indexOf('(eval ') > -1) {
                    // Throw away eval information until we implement stacktrace.js/stackframe#8
                    line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^()]*)|(\),.*$)/g, '');
                }
                let sanitizedLine = line.replace(/^\s+/, '').replace(/\(eval code/g, '(');
                // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
                // case it has spaces in it, as the string is split on \s+ later on
                let location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
                // remove the parenthesized location from the line, if it was matched
                sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;
                let tokens = sanitizedLine.split(/\s+/).slice(1);
                // if a location was matched, pass it to extractLocation() otherwise pop the last token
                let locationParts = this.extractLocation(location ? location[1] : tokens.pop());
                let functionName = tokens.join(' ') || undefined;
                let fileName = [
                    'eval',
                    '<anonymous>'
                ].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
                return {
                    functionName,
                    fileName,
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line
                };
            }, this);
        },
        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
            let filtered = error.stack.split('\n').filter(function(line) {
                return !line.match(SAFARI_NATIVE_CODE_REGEXP);
            }, this);
            return filtered.map(function(line) {
                // Throw away eval information until we implement stacktrace.js/stackframe#8
                if (line.indexOf(' > eval') > -1) {
                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ':$1');
                }
                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                    // Safari eval frames only have function names and nothing else
                    return {
                        functionName: line
                    };
                } else {
                    let functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                    let matches = line.match(functionNameRegex);
                    let functionName = matches && matches[1] ? matches[1] : undefined;
                    let locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
                    return {
                        functionName,
                        fileName: locationParts[0],
                        lineNumber: locationParts[1],
                        columnNumber: locationParts[2],
                        source: line
                    };
                }
            }, this);
        },
        parseOpera: function ErrorStackParser$$parseOpera(e) {
            if (!e.stacktrace || e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
                return this.parseOpera9(e);
            } else if (!e.stack) {
                return this.parseOpera10(e);
            } else {
                return this.parseOpera11(e);
            }
        },
        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
            let lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
            let lines = e.message.split('\n');
            let result = [];
            for(let i = 2, len = lines.length; i < len; i += 2){
                let match = lineRE.exec(lines[i]);
                if (match) {
                    result.push({
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i]
                    });
                }
            }
            return result;
        },
        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
            let lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
            let lines = e.stacktrace.split('\n');
            let result = [];
            for(let i = 0, len = lines.length; i < len; i += 2){
                let match = lineRE.exec(lines[i]);
                if (match) {
                    result.push({
                        functionName: match[3] || undefined,
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i]
                    });
                }
            }
            return result;
        },
        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
            let filtered = error.stack.split('\n').filter(function(line) {
                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
            }, this);
            return filtered.map(function(line) {
                let tokens = line.split('@');
                let locationParts = this.extractLocation(tokens.pop());
                let functionCall = tokens.shift() || '';
                let functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, '$2').replace(/\([^)]*\)/g, '') || undefined;
                let argsRaw;
                if (functionCall.match(/\(([^)]*)\)/)) {
                    argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1');
                }
                let args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
                return {
                    functionName,
                    args,
                    fileName: locationParts[0],
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line
                };
            }, this);
        }
    };
}
// End borrow
// wrapper exposing ErrorStackParser
function stacktrace(p51, fn) {
    p51._getErrorStackParser = function getErrorStackParser() {
        return new ErrorStackParser();
    };
}
if (typeof p5 !== 'undefined') {
    stacktrace(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/param_validator.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>validateParams)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod/lib/index.mjs [app-ssr] (ecmascript)");
;
;
var p5$1 = {
    describe: {
        overloads: [
            [
                "String",
                "FALLBACK|LABEL?"
            ]
        ]
    },
    describeElement: {
        overloads: [
            [
                "String",
                "String",
                "FALLBACK|LABEL?"
            ]
        ]
    },
    textOutput: {
        overloads: [
            [
                "FALLBACK|LABEL?"
            ]
        ]
    },
    gridOutput: {
        overloads: [
            [
                "FALLBACK|LABEL?"
            ]
        ]
    },
    p5: {
        overloads: [
            [
                "Object",
                "String|HTMLElement"
            ]
        ]
    },
    color: {
        overloads: [
            [
                "Number",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "String"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Color"
            ]
        ]
    },
    red: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    green: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    blue: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    alpha: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    hue: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    saturation: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    brightness: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    lightness: {
        overloads: [
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    lerpColor: {
        overloads: [
            [
                "p5.Color",
                "p5.Color",
                "Number"
            ]
        ]
    },
    paletteLerp: {
        overloads: [
            [
                "[p5.Color|String|Number|Number[], Number][]",
                "Number"
            ]
        ]
    },
    beginClip: {
        overloads: [
            [
                "Object?"
            ]
        ]
    },
    endClip: {
        overloads: [
            []
        ]
    },
    clip: {
        overloads: [
            [
                "Function",
                "Object?"
            ]
        ]
    },
    background: {
        overloads: [
            [
                "p5.Color"
            ],
            [
                "String",
                "Number?"
            ],
            [
                "Number",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Image",
                "Number?"
            ]
        ]
    },
    clear: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ],
            []
        ]
    },
    colorMode: {
        overloads: [
            [
                "RGB|HSB|HSL|RGBHDR|HWB|LAB|LCH|OKLAB|OKLCH",
                "Number?"
            ],
            [
                "RGB|HSB|HSL|RGBHDR|HWB|LAB|LCH|OKLAB|OKLCH",
                "Number",
                "Number",
                "Number",
                "Number?"
            ]
        ]
    },
    fill: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "String"
            ],
            [
                "Number",
                "Number?"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Color"
            ]
        ]
    },
    noFill: {
        overloads: [
            []
        ]
    },
    noStroke: {
        overloads: [
            []
        ]
    },
    stroke: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "String"
            ],
            [
                "Number",
                "Number?"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Color"
            ]
        ]
    },
    erase: {
        overloads: [
            [
                "Number?",
                "Number?"
            ]
        ]
    },
    noErase: {
        overloads: [
            []
        ]
    },
    blendMode: {
        overloads: [
            [
                "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT"
            ]
        ]
    },
    print: {
        overloads: [
            [
                "Any"
            ],
            [
                "String|Number|Array"
            ]
        ]
    },
    cursor: {
        overloads: [
            [
                "ARROW|CROSS|HAND|MOVE|TEXT|WAIT|String",
                "Number?",
                "Number?"
            ]
        ]
    },
    frameRate: {
        overloads: [
            [
                "Number"
            ],
            []
        ]
    },
    getTargetFrameRate: {
        overloads: [
            []
        ]
    },
    noCursor: {
        overloads: [
            []
        ]
    },
    windowResized: {
        overloads: [
            [
                "UIEvent?"
            ]
        ]
    },
    fullscreen: {
        overloads: [
            [
                "Boolean?"
            ]
        ]
    },
    pixelDensity: {
        overloads: [
            [
                "Number?"
            ],
            []
        ]
    },
    displayDensity: {
        overloads: [
            []
        ]
    },
    getURL: {
        overloads: [
            []
        ]
    },
    getURLPath: {
        overloads: [
            []
        ]
    },
    getURLParams: {
        overloads: [
            []
        ]
    },
    worldToScreen: {
        overloads: [
            [
                "Number|p5.Vector",
                "Number",
                "Number?"
            ]
        ]
    },
    screenToWorld: {
        overloads: [
            [
                "Number|p5.Vector",
                "Number",
                "Number?"
            ]
        ]
    },
    setup: {
        overloads: [
            []
        ]
    },
    draw: {
        overloads: [
            []
        ]
    },
    createCanvas: {
        overloads: [
            [
                "Number?",
                "Number?",
                "P2D|WEBGL|P2DHDR?",
                "HTMLCanvasElement?"
            ],
            [
                "Number?",
                "Number?",
                "HTMLCanvasElement?"
            ]
        ]
    },
    resizeCanvas: {
        overloads: [
            [
                "Number",
                "Number",
                "Boolean?"
            ]
        ]
    },
    noCanvas: {
        overloads: [
            []
        ]
    },
    createGraphics: {
        overloads: [
            [
                "Number",
                "Number",
                "P2D|WEBGL?",
                "HTMLCanvasElement?"
            ],
            [
                "Number",
                "Number",
                "HTMLCanvasElement?"
            ]
        ]
    },
    createFramebuffer: {
        overloads: [
            [
                "Object?"
            ]
        ]
    },
    clearDepth: {
        overloads: [
            [
                "Number?"
            ]
        ]
    },
    noLoop: {
        overloads: [
            []
        ]
    },
    loop: {
        overloads: [
            []
        ]
    },
    isLooping: {
        overloads: [
            []
        ]
    },
    redraw: {
        overloads: [
            [
                "Integer?"
            ]
        ]
    },
    applyMatrix: {
        overloads: [
            [
                "Array"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    resetMatrix: {
        overloads: [
            []
        ]
    },
    rotate: {
        overloads: [
            [
                "Number",
                "p5.Vector|Number[]?"
            ]
        ]
    },
    rotateX: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    rotateY: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    rotateZ: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    scale: {
        overloads: [
            [
                "Number|p5.Vector|Number[]",
                "Number?",
                "Number?"
            ],
            [
                "p5.Vector|Number[]"
            ]
        ]
    },
    shearX: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    shearY: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    translate: {
        overloads: [
            [
                "Number",
                "Number",
                "Number?"
            ],
            [
                "p5.Vector"
            ]
        ]
    },
    push: {
        overloads: [
            []
        ]
    },
    pop: {
        overloads: [
            []
        ]
    },
    storeItem: {
        overloads: [
            [
                "String",
                "String|Number|Boolean|Object|Array"
            ]
        ]
    },
    getItem: {
        overloads: [
            [
                "String"
            ]
        ]
    },
    clearStorage: {
        overloads: [
            []
        ]
    },
    removeItem: {
        overloads: [
            [
                "String"
            ]
        ]
    },
    select: {
        overloads: [
            [
                "String",
                "String|p5.Element|HTMLElement?"
            ]
        ]
    },
    selectAll: {
        overloads: [
            [
                "String",
                "String|p5.Element|HTMLElement?"
            ]
        ]
    },
    createElement: {
        overloads: [
            [
                "String",
                "String?"
            ]
        ]
    },
    removeElements: {
        overloads: [
            []
        ]
    },
    addElement: {
        overloads: [
            []
        ]
    },
    createDiv: {
        overloads: [
            [
                "String?"
            ]
        ]
    },
    createP: {
        overloads: [
            [
                "String?"
            ]
        ]
    },
    createSpan: {
        overloads: [
            [
                "String?"
            ]
        ]
    },
    createImg: {
        overloads: [
            [
                "String",
                "String"
            ],
            [
                "String",
                "String",
                "String?",
                "Function?"
            ]
        ]
    },
    createA: {
        overloads: [
            [
                "String",
                "String",
                "String?"
            ]
        ]
    },
    createSlider: {
        overloads: [
            [
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    createButton: {
        overloads: [
            [
                "String",
                "String?"
            ]
        ]
    },
    createCheckbox: {
        overloads: [
            [
                "String?",
                "Boolean?"
            ]
        ]
    },
    createSelect: {
        overloads: [
            [
                "Boolean?"
            ],
            [
                "Object"
            ]
        ]
    },
    createRadio: {
        overloads: [
            [
                "Object?"
            ],
            [
                "String?"
            ],
            []
        ]
    },
    createColorPicker: {
        overloads: [
            [
                "String|p5.Color?"
            ]
        ]
    },
    createInput: {
        overloads: [
            [
                "String?",
                "String?"
            ],
            [
                "String?"
            ]
        ]
    },
    createFileInput: {
        overloads: [
            [
                "Function",
                "Boolean?"
            ]
        ]
    },
    setMoveThreshold: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    setShakeThreshold: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    deviceMoved: {
        overloads: [
            []
        ]
    },
    deviceTurned: {
        overloads: [
            []
        ]
    },
    deviceShaken: {
        overloads: [
            []
        ]
    },
    keyPressed: {
        overloads: [
            [
                "KeyboardEvent?"
            ]
        ]
    },
    keyReleased: {
        overloads: [
            [
                "KeyboardEvent?"
            ]
        ]
    },
    keyTyped: {
        overloads: [
            [
                "KeyboardEvent?"
            ]
        ]
    },
    keyIsDown: {
        overloads: [
            [
                "Number|String"
            ]
        ]
    },
    mouseMoved: {
        overloads: [
            [
                "MouseEvent?"
            ]
        ]
    },
    mouseDragged: {
        overloads: [
            [
                "MouseEvent?"
            ]
        ]
    },
    mousePressed: {
        overloads: [
            [
                "MouseEvent?"
            ]
        ]
    },
    mouseReleased: {
        overloads: [
            [
                "MouseEvent?"
            ]
        ]
    },
    mouseClicked: {
        overloads: [
            [
                "MouseEvent?"
            ]
        ]
    },
    doubleClicked: {
        overloads: [
            [
                "MouseEvent?"
            ]
        ]
    },
    mouseWheel: {
        overloads: [
            [
                "WheelEvent?"
            ]
        ]
    },
    requestPointerLock: {
        overloads: [
            []
        ]
    },
    exitPointerLock: {
        overloads: [
            []
        ]
    },
    createImage: {
        overloads: [
            [
                "Integer",
                "Integer"
            ]
        ]
    },
    saveCanvas: {
        overloads: [
            [
                "p5.Framebuffer|p5.Element|HTMLCanvasElement",
                "String?",
                "String?"
            ],
            [
                "String?",
                "String?"
            ]
        ]
    },
    saveFrames: {
        overloads: [
            [
                "String",
                "String",
                "Number",
                "Number",
                "function(Array)?"
            ]
        ]
    },
    loadImage: {
        overloads: [
            [
                "String|Request",
                "function(p5.Image)?",
                "function(Event)?"
            ]
        ]
    },
    saveGif: {
        overloads: [
            [
                "String",
                "Number",
                "Object?"
            ]
        ]
    },
    image: {
        overloads: [
            [
                "p5.Image|p5.Element|p5.Texture|p5.Framebuffer|p5.FramebufferTexture",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "p5.Image|p5.Element|p5.Texture|p5.Framebuffer|p5.FramebufferTexture",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?",
                "CONTAIN|COVER?",
                "LEFT|RIGHT|CENTER?",
                "TOP|BOTTOM|CENTER?"
            ]
        ]
    },
    tint: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "String"
            ],
            [
                "Number",
                "Number?"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Color"
            ]
        ]
    },
    noTint: {
        overloads: [
            []
        ]
    },
    imageMode: {
        overloads: [
            [
                "CORNER|CORNERS|CENTER"
            ]
        ]
    },
    blend: {
        overloads: [
            [
                "p5.Image",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|NORMAL"
            ],
            [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|NORMAL"
            ]
        ]
    },
    copy: {
        overloads: [
            [
                "p5.Image|p5.Element",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer"
            ],
            [
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer",
                "Integer"
            ]
        ]
    },
    filter: {
        overloads: [
            [
                "THRESHOLD|GRAY|OPAQUE|INVERT|POSTERIZE|BLUR|ERODE|DILATE|BLUR",
                "Number?",
                "Boolean?"
            ],
            [
                "p5.Shader"
            ]
        ]
    },
    get: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [],
            [
                "Number",
                "Number"
            ]
        ]
    },
    loadPixels: {
        overloads: [
            []
        ]
    },
    set: {
        overloads: [
            [
                "Number",
                "Number",
                "Number|Number[]|Object"
            ]
        ]
    },
    updatePixels: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ],
            []
        ]
    },
    loadJSON: {
        overloads: [
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    loadStrings: {
        overloads: [
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    loadTable: {
        overloads: [
            [
                "String|Request",
                "String?",
                "String?",
                "Function?",
                "Function?"
            ]
        ]
    },
    loadXML: {
        overloads: [
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    loadBytes: {
        overloads: [
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    loadBlob: {
        overloads: [
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    httpGet: {
        overloads: [
            [
                "String|Request",
                "String?",
                "Function?",
                "Function?"
            ],
            [
                "String|Request",
                "Function",
                "Function?"
            ]
        ]
    },
    httpPost: {
        overloads: [
            [
                "String|Request",
                "Object|Boolean?",
                "String?",
                "Function?",
                "Function?"
            ],
            [
                "String|Request",
                "Object|Boolean",
                "Function?",
                "Function?"
            ],
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    httpDo: {
        overloads: [
            [
                "String|Request",
                "String?",
                "String?",
                "Object?",
                "Function?",
                "Function?"
            ],
            [
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    createWriter: {
        overloads: [
            [
                "String",
                "String?"
            ]
        ]
    },
    write: {
        overloads: [
            [
                "String|Number|Array"
            ]
        ]
    },
    close: {
        overloads: [
            []
        ]
    },
    save: {
        overloads: [
            [
                "Object|String?",
                "String?",
                "Boolean|String?"
            ]
        ]
    },
    saveJSON: {
        overloads: [
            [
                "Array|Object",
                "String",
                "Boolean?"
            ]
        ]
    },
    saveStrings: {
        overloads: [
            [
                "String[]",
                "String",
                "String?",
                "Boolean?"
            ]
        ]
    },
    saveTable: {
        overloads: [
            [
                "p5.Table",
                "String",
                "String?"
            ]
        ]
    },
    abs: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    ceil: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    constrain: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    dist: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "p5.Vector"
            ]
        ]
    },
    exp: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    floor: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    lerp: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    log: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    mag: {
        overloads: [
            [
                "Number",
                "Number"
            ]
        ]
    },
    map: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Boolean?"
            ]
        ]
    },
    max: {
        overloads: [
            [
                "Number",
                "Number"
            ],
            [
                "Number[]"
            ]
        ]
    },
    min: {
        overloads: [
            [
                "Number",
                "Number"
            ],
            [
                "Number[]"
            ]
        ]
    },
    norm: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    pow: {
        overloads: [
            [
                "Number",
                "Number"
            ]
        ]
    },
    round: {
        overloads: [
            [
                "Number",
                "Number?"
            ]
        ]
    },
    sq: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    sqrt: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    fract: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    createVector: {
        overloads: [
            [
                null
            ]
        ]
    },
    createMatrix: {
        overloads: [
            [
                "Number[]"
            ]
        ]
    },
    noise: {
        overloads: [
            [
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    noiseDetail: {
        overloads: [
            [
                "Number",
                "Number"
            ]
        ]
    },
    noiseSeed: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    randomSeed: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    random: {
        overloads: [
            [
                "Number?",
                "Number?"
            ],
            [
                "Array"
            ]
        ]
    },
    randomGaussian: {
        overloads: [
            [
                "Number?",
                "Number?"
            ]
        ]
    },
    acos: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    asin: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    atan: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    atan2: {
        overloads: [
            [
                "Number",
                "Number"
            ]
        ]
    },
    cos: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    sin: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    tan: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    degrees: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    radians: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    angleMode: {
        overloads: [
            [
                "RADIANS|DEGREES"
            ],
            []
        ]
    },
    arc: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "CHORD|PIE|OPEN?",
                "Integer?"
            ]
        ]
    },
    ellipse: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Integer?"
            ]
        ]
    },
    circle: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    line: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    point: {
        overloads: [
            [
                "Number",
                "Number",
                "Number?"
            ],
            [
                "p5.Vector"
            ]
        ]
    },
    quad: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Integer?",
                "Integer?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    rect: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    square: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ]
        ]
    },
    triangle: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    ellipseMode: {
        overloads: [
            [
                "CENTER|RADIUS|CORNER|CORNERS"
            ]
        ]
    },
    noSmooth: {
        overloads: [
            []
        ]
    },
    rectMode: {
        overloads: [
            [
                "CENTER|RADIUS|CORNER|CORNERS"
            ]
        ]
    },
    smooth: {
        overloads: [
            []
        ]
    },
    strokeCap: {
        overloads: [
            [
                "ROUND|SQUARE|PROJECT"
            ]
        ]
    },
    strokeJoin: {
        overloads: [
            [
                "MITER|BEVEL|ROUND"
            ]
        ]
    },
    strokeWeight: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    bezier: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    bezierPoint: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    bezierTangent: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    spline: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    splinePoint: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    splineTangent: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    bezierOrder: {
        overloads: [
            [],
            [
                "Number"
            ]
        ]
    },
    splineVertex: {
        overloads: [
            [
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    splineProperty: {
        overloads: [
            [
                "String"
            ],
            [
                "String",
                null
            ]
        ]
    },
    splineProperties: {
        overloads: [
            [],
            [
                "Object"
            ]
        ]
    },
    vertex: {
        overloads: [
            [
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    beginContour: {
        overloads: [
            []
        ]
    },
    endContour: {
        overloads: [
            [
                "OPEN|CLOSE?"
            ]
        ]
    },
    beginShape: {
        overloads: [
            [
                "POINTS|LINES|TRIANGLES|TRIANGLE_FAN|TRIANGLE_STRIP|QUADS|QUAD_STRIP|PATH?"
            ]
        ]
    },
    bezierVertex: {
        overloads: [
            [
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    curveVertex: {
        overloads: [
            [
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number?"
            ]
        ]
    },
    endShape: {
        overloads: [
            [
                "CLOSE?",
                "Integer?"
            ]
        ]
    },
    normal: {
        overloads: [
            [
                "p5.Vector"
            ],
            [
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    vertexProperty: {
        overloads: [
            [
                "String",
                "Number|Number[]"
            ]
        ]
    },
    loadFont: {
        overloads: [
            [
                "String",
                "String?",
                "Object?",
                "String|String[]?",
                "Function?",
                "Function?"
            ],
            [
                "String",
                "Function?",
                "Function?"
            ]
        ]
    },
    text: {
        overloads: [
            [
                "String|Object|Array|Number|Boolean",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    textAlign: {
        overloads: [
            [
                "LEFT|CENTER|RIGHT",
                "TOP|BOTTOM|CENTER|BASELINE?"
            ]
        ]
    },
    textAscent: {
        overloads: [
            [
                "String?"
            ]
        ]
    },
    textDescent: {
        overloads: [
            [
                "String?"
            ]
        ]
    },
    textLeading: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    textFont: {
        overloads: [
            [
                "p5.Font|String|Object",
                "Number?"
            ]
        ]
    },
    textSize: {
        overloads: [
            [
                "Number"
            ],
            []
        ]
    },
    textStyle: {
        overloads: [
            [
                "NORMAL|ITALIC|BOLD|BOLDITALIC"
            ],
            []
        ]
    },
    textWidth: {
        overloads: [
            [
                "String"
            ]
        ]
    },
    textWrap: {
        overloads: [
            [
                "WORD|CHAR"
            ],
            []
        ]
    },
    textBounds: {
        overloads: [
            [
                "String",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    textDirection: {
        overloads: [
            [
                "String"
            ],
            []
        ]
    },
    textProperty: {
        overloads: [
            [
                "String",
                null
            ],
            [
                "String"
            ]
        ]
    },
    textProperties: {
        overloads: [
            [
                "Object"
            ],
            []
        ]
    },
    fontBounds: {
        overloads: [
            [
                "String",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    fontWidth: {
        overloads: [
            [
                "String"
            ]
        ]
    },
    fontAscent: {
        overloads: [
            []
        ]
    },
    fontDescent: {
        overloads: [
            []
        ]
    },
    textWeight: {
        overloads: [
            [
                "Number"
            ],
            []
        ]
    },
    float: {
        overloads: [
            [
                "String"
            ],
            [
                "String[]"
            ]
        ]
    },
    int: {
        overloads: [
            [
                "String|Boolean|Number"
            ],
            [
                "Array"
            ]
        ]
    },
    str: {
        overloads: [
            [
                "String|Boolean|Number"
            ]
        ]
    },
    boolean: {
        overloads: [
            [
                "String|Boolean|Number"
            ],
            [
                "Array"
            ]
        ]
    },
    byte: {
        overloads: [
            [
                "String|Boolean|Number"
            ],
            [
                "Array"
            ]
        ]
    },
    char: {
        overloads: [
            [
                "String|Number"
            ],
            [
                "Array"
            ]
        ]
    },
    unchar: {
        overloads: [
            [
                "String"
            ],
            [
                "String[]"
            ]
        ]
    },
    hex: {
        overloads: [
            [
                "Number",
                "Number?"
            ],
            [
                "Number[]",
                "Number?"
            ]
        ]
    },
    unhex: {
        overloads: [
            [
                "String"
            ],
            [
                "String[]"
            ]
        ]
    },
    day: {
        overloads: [
            []
        ]
    },
    hour: {
        overloads: [
            []
        ]
    },
    minute: {
        overloads: [
            []
        ]
    },
    millis: {
        overloads: [
            []
        ]
    },
    month: {
        overloads: [
            []
        ]
    },
    second: {
        overloads: [
            []
        ]
    },
    year: {
        overloads: [
            []
        ]
    },
    nf: {
        overloads: [
            [
                "Number|String",
                "Integer|String?",
                "Integer|String?"
            ],
            [
                "Number[]",
                "Integer|String?",
                "Integer|String?"
            ]
        ]
    },
    nfc: {
        overloads: [
            [
                "Number|String",
                "Integer|String?"
            ],
            [
                "Number[]",
                "Integer|String?"
            ]
        ]
    },
    nfp: {
        overloads: [
            [
                "Number",
                "Integer?",
                "Integer?"
            ],
            [
                "Number[]",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    nfs: {
        overloads: [
            [
                "Number",
                "Integer?",
                "Integer?"
            ],
            [
                "Array",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    splitTokens: {
        overloads: [
            [
                "String",
                "String?"
            ]
        ]
    },
    shuffle: {
        overloads: [
            [
                "Array",
                "Boolean?"
            ]
        ]
    },
    strokeMode: {
        overloads: [
            [
                "String"
            ]
        ]
    },
    buildGeometry: {
        overloads: [
            [
                "Function"
            ]
        ]
    },
    freeGeometry: {
        overloads: [
            [
                "p5.Geometry"
            ]
        ]
    },
    plane: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    box: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    sphere: {
        overloads: [
            [
                "Number?",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    cylinder: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Integer?",
                "Integer?",
                "Boolean?",
                "Boolean?"
            ]
        ]
    },
    cone: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Integer?",
                "Integer?",
                "Boolean?"
            ]
        ]
    },
    ellipsoid: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    torus: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Integer?",
                "Integer?"
            ]
        ]
    },
    curveDetail: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    orbitControl: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Object?"
            ]
        ]
    },
    debugMode: {
        overloads: [
            [],
            [
                "GRID|AXES"
            ],
            [
                "GRID|AXES",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ],
            [
                "GRID|AXES",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ],
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ]
        ]
    },
    noDebugMode: {
        overloads: [
            []
        ]
    },
    ambientLight: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "Number",
                "Number?"
            ],
            [
                "String"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Color"
            ]
        ]
    },
    specularColor: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number"
            ],
            [
                "String"
            ],
            [
                "Number[]"
            ],
            [
                "p5.Color"
            ]
        ]
    },
    directionalLight: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "p5.Vector"
            ],
            [
                "p5.Color|Number[]|String",
                "Number",
                "Number",
                "Number"
            ],
            [
                "p5.Color|Number[]|String",
                "p5.Vector"
            ]
        ]
    },
    pointLight: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number",
                "Number",
                "Number",
                "p5.Vector"
            ],
            [
                "p5.Color|Number[]|String",
                "Number",
                "Number",
                "Number"
            ],
            [
                "p5.Color|Number[]|String",
                "p5.Vector"
            ]
        ]
    },
    imageLight: {
        overloads: [
            [
                "p5.image"
            ]
        ]
    },
    panorama: {
        overloads: [
            [
                "p5.Image"
            ]
        ]
    },
    lights: {
        overloads: [
            []
        ]
    },
    lightFalloff: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ]
        ]
    },
    spotLight: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "p5.Color|Number[]|String",
                "p5.Vector",
                "p5.Vector",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "p5.Vector",
                "p5.Vector",
                "Number?",
                "Number?"
            ],
            [
                "p5.Color|Number[]|String",
                "Number",
                "Number",
                "Number",
                "p5.Vector",
                "Number?",
                "Number?"
            ],
            [
                "p5.Color|Number[]|String",
                "p5.Vector",
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "p5.Vector",
                "Number?",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "p5.Vector",
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ],
            [
                "p5.Color|Number[]|String",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number",
                "Number?",
                "Number?"
            ]
        ]
    },
    noLights: {
        overloads: [
            []
        ]
    },
    loadModel: {
        overloads: [
            [
                "String|Request",
                "String?",
                "Boolean",
                "function(p5.Geometry)?",
                "function(Event)?"
            ],
            [
                "String|Request",
                "String?",
                "function(p5.Geometry)?",
                "function(Event)?"
            ],
            [
                "String|Request",
                "Object?",
                "String?",
                "function(p5.Geometry)?",
                "function(Event)?",
                "Boolean?",
                "Boolean?",
                "Boolean?"
            ]
        ]
    },
    parseObj: {
        overloads: [
            []
        ]
    },
    parseSTL: {
        overloads: [
            []
        ]
    },
    isBinary: {
        overloads: [
            []
        ]
    },
    matchDataViewAt: {
        overloads: [
            []
        ]
    },
    parseBinarySTL: {
        overloads: [
            []
        ]
    },
    parseASCIISTL: {
        overloads: [
            []
        ]
    },
    model: {
        overloads: [
            [
                "p5.Geometry"
            ]
        ]
    },
    createModel: {
        overloads: [
            [
                "String",
                "String?",
                "Boolean",
                "function(p5.Geometry)?",
                "function(Event)?"
            ],
            [
                "String",
                "String?",
                "function(p5.Geometry)?",
                "function(Event)?"
            ],
            [
                "String",
                "String?",
                "Object?",
                "function(p5.Geometry)?",
                "function(Event)?",
                "boolean?",
                "boolean?",
                "boolean?"
            ]
        ]
    },
    loadShader: {
        overloads: [
            [
                "String|Request",
                "String|Request",
                "Function?",
                "Function?"
            ]
        ]
    },
    createShader: {
        overloads: [
            [
                "String",
                "String",
                "Object?"
            ]
        ]
    },
    loadFilterShader: {
        overloads: [
            [
                "String",
                "Function?",
                "Function?"
            ]
        ]
    },
    createFilterShader: {
        overloads: [
            [
                "String"
            ]
        ]
    },
    shader: {
        overloads: [
            [
                "p5.Shader"
            ]
        ]
    },
    strokeShader: {
        overloads: [
            [
                "p5.Shader"
            ]
        ]
    },
    imageShader: {
        overloads: [
            [
                "p5.Shader"
            ]
        ]
    },
    baseMaterialShader: {
        overloads: [
            []
        ]
    },
    baseFilterShader: {
        overloads: [
            []
        ]
    },
    baseNormalShader: {
        overloads: [
            []
        ]
    },
    baseColorShader: {
        overloads: [
            []
        ]
    },
    baseStrokeShader: {
        overloads: [
            []
        ]
    },
    resetShader: {
        overloads: [
            []
        ]
    },
    texture: {
        overloads: [
            [
                "p5.Image|p5.MediaElement|p5.Graphics|p5.Texture|p5.Framebuffer|p5.FramebufferTexture"
            ]
        ]
    },
    textureMode: {
        overloads: [
            [
                "IMAGE|NORMAL"
            ]
        ]
    },
    textureWrap: {
        overloads: [
            [
                "CLAMP|REPEAT|MIRROR",
                "CLAMP|REPEAT|MIRROR?"
            ]
        ]
    },
    normalMaterial: {
        overloads: [
            []
        ]
    },
    ambientMaterial: {
        overloads: [
            [
                "Number",
                "Number",
                "Number"
            ],
            [
                "Number"
            ],
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    emissiveMaterial: {
        overloads: [
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "Number"
            ],
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    specularMaterial: {
        overloads: [
            [
                "Number",
                "Number?"
            ],
            [
                "Number",
                "Number",
                "Number",
                "Number?"
            ],
            [
                "p5.Color|Number[]|String"
            ]
        ]
    },
    shininess: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    metalness: {
        overloads: [
            [
                "Number"
            ]
        ]
    },
    camera: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ]
        ]
    },
    perspective: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ]
        ]
    },
    linePerspective: {
        overloads: [
            [
                "Boolean"
            ],
            []
        ]
    },
    ortho: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ]
        ]
    },
    frustum: {
        overloads: [
            [
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?",
                "Number?"
            ]
        ]
    },
    createCamera: {
        overloads: [
            []
        ]
    },
    setCamera: {
        overloads: [
            [
                "p5.Camera"
            ]
        ]
    },
    saveObj: {
        overloads: [
            [
                "String?"
            ]
        ]
    },
    saveStl: {
        overloads: [
            [
                "String?",
                "Object?"
            ]
        ]
    },
    setAttributes: {
        overloads: [
            [
                "String",
                "Boolean"
            ],
            [
                "Object"
            ]
        ]
    },
    remove: {
        overloads: [
            []
        ]
    },
    createVideo: {
        overloads: [
            [
                "String|String[]",
                "Function?"
            ]
        ]
    },
    createAudio: {
        overloads: [
            [],
            [
                "String|String[]?",
                "Function?"
            ]
        ]
    },
    createCapture: {
        overloads: [
            [
                "AUDIO|VIDEO|Object?",
                "Object?",
                "Function?"
            ]
        ]
    }
};
var dataDoc = {
    p5: p5$1,
    "p5.Geometry": {
        flipV: {
            overloads: [
                []
            ]
        },
        calculateBoundingBox: {
            overloads: [
                []
            ]
        },
        clearColors: {
            overloads: [
                []
            ]
        },
        flipU: {
            overloads: [
                []
            ]
        },
        computeFaces: {
            overloads: [
                []
            ]
        },
        computeNormals: {
            overloads: [
                [
                    "FLAT|SMOOTH?",
                    "Object?"
                ]
            ]
        },
        makeEdgesFromFaces: {
            overloads: [
                []
            ]
        },
        normalize: {
            overloads: [
                []
            ]
        },
        vertexProperty: {
            overloads: [
                [
                    "String",
                    "Number|Number[]",
                    "Number?"
                ]
            ]
        }
    },
    "p5.Color": {
        toString: {
            overloads: [
                [
                    "String?"
                ]
            ]
        },
        setRed: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        setGreen: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        setBlue: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        setAlpha: {
            overloads: [
                [
                    "Number"
                ]
            ]
        }
    },
    "p5.Graphics": {
        reset: {
            overloads: [
                []
            ]
        },
        remove: {
            overloads: [
                []
            ]
        },
        createFramebuffer: {
            overloads: [
                [
                    "Object?"
                ]
            ]
        }
    },
    "p5.Element": {
        remove: {
            overloads: [
                []
            ]
        },
        parent: {
            overloads: [
                [
                    "String|p5.Element|Object"
                ],
                []
            ]
        },
        child: {
            overloads: [
                [],
                [
                    "String|p5.Element?"
                ]
            ]
        },
        html: {
            overloads: [
                [],
                [
                    "String?",
                    "Boolean?"
                ]
            ]
        },
        id: {
            overloads: [
                [
                    "String"
                ],
                []
            ]
        },
        "class": {
            overloads: [
                [
                    "String"
                ],
                []
            ]
        },
        addClass: {
            overloads: [
                [
                    "String"
                ]
            ]
        },
        removeClass: {
            overloads: [
                [
                    "String"
                ]
            ]
        },
        hasClass: {
            overloads: [
                [
                    null
                ]
            ]
        },
        toggleClass: {
            overloads: [
                [
                    null
                ]
            ]
        },
        center: {
            overloads: [
                [
                    "String?"
                ]
            ]
        },
        position: {
            overloads: [
                [],
                [
                    "Number?",
                    "Number?",
                    "String?"
                ]
            ]
        },
        show: {
            overloads: [
                []
            ]
        },
        hide: {
            overloads: [
                []
            ]
        },
        size: {
            overloads: [
                [],
                [
                    "Number|AUTO?",
                    "Number|AUTO?"
                ]
            ]
        },
        style: {
            overloads: [
                [
                    "String"
                ],
                [
                    "String",
                    "String|p5.Color"
                ]
            ]
        },
        attribute: {
            overloads: [
                [],
                [
                    "String",
                    "String"
                ]
            ]
        },
        removeAttribute: {
            overloads: [
                [
                    "String"
                ]
            ]
        },
        value: {
            overloads: [
                [],
                [
                    "String|Number"
                ]
            ]
        },
        mousePressed: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        doubleClicked: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        mouseWheel: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        mouseReleased: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        mouseClicked: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        mouseMoved: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        mouseOver: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        mouseOut: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        dragOver: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        dragLeave: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        changed: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        input: {
            overloads: [
                [
                    "Function|Boolean"
                ]
            ]
        },
        drop: {
            overloads: [
                [
                    "Function",
                    "Function?"
                ]
            ]
        },
        draggable: {
            overloads: [
                [
                    "p5.Element?"
                ]
            ]
        }
    },
    "p5.MediaElement": {
        play: {
            overloads: [
                []
            ]
        },
        stop: {
            overloads: [
                []
            ]
        },
        pause: {
            overloads: [
                []
            ]
        },
        loop: {
            overloads: [
                []
            ]
        },
        noLoop: {
            overloads: [
                []
            ]
        },
        autoplay: {
            overloads: [
                [
                    "Boolean?"
                ]
            ]
        },
        volume: {
            overloads: [
                [],
                [
                    "Number"
                ]
            ]
        },
        speed: {
            overloads: [
                [],
                [
                    "Number"
                ]
            ]
        },
        time: {
            overloads: [
                [],
                [
                    "Number"
                ]
            ]
        },
        duration: {
            overloads: [
                []
            ]
        },
        onended: {
            overloads: [
                [
                    "Function"
                ]
            ]
        },
        connect: {
            overloads: [
                [
                    "AudioNode|Object"
                ]
            ]
        },
        disconnect: {
            overloads: [
                []
            ]
        },
        showControls: {
            overloads: [
                []
            ]
        },
        hideControls: {
            overloads: [
                []
            ]
        },
        addCue: {
            overloads: [
                [
                    "Number",
                    "Function",
                    "Object?"
                ]
            ]
        },
        removeCue: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        clearCues: {
            overloads: [
                []
            ]
        }
    },
    "p5.Image": {
        pixelDensity: {
            overloads: [
                [
                    "Number?"
                ]
            ]
        },
        loadPixels: {
            overloads: [
                []
            ]
        },
        updatePixels: {
            overloads: [
                [
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer"
                ]
            ]
        },
        get: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number",
                    "Number"
                ],
                [],
                [
                    "Number",
                    "Number"
                ]
            ]
        },
        set: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number|Number[]|Object"
                ]
            ]
        },
        resize: {
            overloads: [
                [
                    "Number",
                    "Number"
                ]
            ]
        },
        copy: {
            overloads: [
                [
                    "p5.Image|p5.Element",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer"
                ],
                [
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer"
                ]
            ]
        },
        mask: {
            overloads: [
                [
                    "p5.Image"
                ]
            ]
        },
        filter: {
            overloads: [
                [
                    "THRESHOLD|GRAY|OPAQUE|INVERT|POSTERIZE|ERODE|DILATE|BLUR",
                    "Number?"
                ]
            ]
        },
        blend: {
            overloads: [
                [
                    "p5.Image",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|NORMAL"
                ],
                [
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "Integer",
                    "BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|NORMAL"
                ]
            ]
        },
        save: {
            overloads: [
                [
                    "String",
                    "String?"
                ]
            ]
        },
        reset: {
            overloads: [
                []
            ]
        },
        getCurrentFrame: {
            overloads: [
                []
            ]
        },
        setFrame: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        numFrames: {
            overloads: [
                []
            ]
        },
        play: {
            overloads: [
                []
            ]
        },
        pause: {
            overloads: [
                []
            ]
        },
        delay: {
            overloads: [
                [
                    "Number",
                    "Number?"
                ]
            ]
        }
    },
    "p5.Table": {
        addRow: {
            overloads: [
                [
                    "p5.TableRow?"
                ]
            ]
        },
        removeRow: {
            overloads: [
                [
                    "Integer"
                ]
            ]
        },
        getRow: {
            overloads: [
                [
                    "Integer"
                ]
            ]
        },
        getRows: {
            overloads: [
                []
            ]
        },
        findRow: {
            overloads: [
                [
                    "String",
                    "Integer|String"
                ]
            ]
        },
        findRows: {
            overloads: [
                [
                    "String",
                    "Integer|String"
                ]
            ]
        },
        matchRow: {
            overloads: [
                [
                    "String|RegExp",
                    "String|Integer"
                ]
            ]
        },
        matchRows: {
            overloads: [
                [
                    "String",
                    "String|Integer?"
                ]
            ]
        },
        getColumn: {
            overloads: [
                [
                    "String|Number"
                ]
            ]
        },
        clearRows: {
            overloads: [
                []
            ]
        },
        addColumn: {
            overloads: [
                [
                    "String?"
                ]
            ]
        },
        getColumnCount: {
            overloads: [
                []
            ]
        },
        getRowCount: {
            overloads: [
                []
            ]
        },
        removeTokens: {
            overloads: [
                [
                    "String",
                    "String|Integer?"
                ]
            ]
        },
        trim: {
            overloads: [
                [
                    "String|Integer?"
                ]
            ]
        },
        removeColumn: {
            overloads: [
                [
                    "String|Integer"
                ]
            ]
        },
        set: {
            overloads: [
                [
                    "Integer",
                    "String|Integer",
                    "String|Number"
                ]
            ]
        },
        setNum: {
            overloads: [
                [
                    "Integer",
                    "String|Integer",
                    "Number"
                ]
            ]
        },
        setString: {
            overloads: [
                [
                    "Integer",
                    "String|Integer",
                    "String"
                ]
            ]
        },
        get: {
            overloads: [
                [
                    "Integer",
                    "String|Integer"
                ]
            ]
        },
        getNum: {
            overloads: [
                [
                    "Integer",
                    "String|Integer"
                ]
            ]
        },
        getString: {
            overloads: [
                [
                    "Integer",
                    "String|Integer"
                ]
            ]
        },
        getObject: {
            overloads: [
                [
                    "String?"
                ]
            ]
        },
        getArray: {
            overloads: [
                []
            ]
        }
    },
    "p5.TableRow": {
        set: {
            overloads: [
                [
                    "String|Integer",
                    "String|Number"
                ]
            ]
        },
        setNum: {
            overloads: [
                [
                    "String|Integer",
                    "Number|String"
                ]
            ]
        },
        setString: {
            overloads: [
                [
                    "String|Integer",
                    "String|Number|Boolean|Object"
                ]
            ]
        },
        get: {
            overloads: [
                [
                    "String|Integer"
                ]
            ]
        },
        getNum: {
            overloads: [
                [
                    "String|Integer"
                ]
            ]
        },
        getString: {
            overloads: [
                [
                    "String|Integer"
                ]
            ]
        }
    },
    "p5.XML": {
        getParent: {
            overloads: [
                []
            ]
        },
        getName: {
            overloads: [
                []
            ]
        },
        setName: {
            overloads: [
                [
                    "String"
                ]
            ]
        },
        hasChildren: {
            overloads: [
                []
            ]
        },
        listChildren: {
            overloads: [
                []
            ]
        },
        getChildren: {
            overloads: [
                [
                    "String?"
                ]
            ]
        },
        getChild: {
            overloads: [
                [
                    "String|Integer"
                ]
            ]
        },
        addChild: {
            overloads: [
                [
                    "p5.XML"
                ]
            ]
        },
        removeChild: {
            overloads: [
                [
                    "String|Integer"
                ]
            ]
        },
        getAttributeCount: {
            overloads: [
                []
            ]
        },
        listAttributes: {
            overloads: [
                []
            ]
        },
        hasAttribute: {
            overloads: [
                [
                    "String"
                ]
            ]
        },
        getNum: {
            overloads: [
                [
                    "String",
                    "Number?"
                ]
            ]
        },
        getString: {
            overloads: [
                [
                    "String",
                    "Number?"
                ]
            ]
        },
        setAttribute: {
            overloads: [
                [
                    "String",
                    "Number|String|Boolean"
                ]
            ]
        },
        getContent: {
            overloads: [
                [
                    "String?"
                ]
            ]
        },
        serialize: {
            overloads: [
                []
            ]
        }
    },
    "p5.Vector": {
        getValue: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        setValue: {
            overloads: [
                [
                    "Number",
                    "Number"
                ]
            ]
        },
        set: {
            overloads: [
                [
                    "Number?",
                    "Number?",
                    "Number?"
                ],
                [
                    "p5.Vector|Number[]"
                ]
            ]
        },
        copy: {
            overloads: [
                [],
                [
                    "p5.Vector"
                ]
            ]
        },
        add: {
            overloads: [
                [
                    "Number|Array",
                    "Number?",
                    "Number?"
                ],
                [
                    "p5.Vector|Number[]"
                ],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "p5.Vector?"
                ]
            ]
        },
        rem: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number"
                ],
                [
                    "p5.Vector|Number[]"
                ],
                [
                    "p5.Vector",
                    "p5.Vector"
                ]
            ]
        },
        sub: {
            overloads: [
                [
                    "Number",
                    "Number?",
                    "Number?"
                ],
                [
                    "p5.Vector|Number[]"
                ],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "p5.Vector?"
                ]
            ]
        },
        mult: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number?"
                ],
                [
                    "Number[]"
                ],
                [
                    "p5.Vector"
                ],
                [],
                [
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "p5.Vector?"
                ],
                [
                    "p5.Vector",
                    "Number[]",
                    "p5.Vector?"
                ]
            ]
        },
        div: {
            overloads: [
                [
                    "Number"
                ],
                [
                    "Number",
                    "Number",
                    "Number?"
                ],
                [
                    "Number[]"
                ],
                [
                    "p5.Vector"
                ],
                [],
                [
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "p5.Vector?"
                ],
                [
                    "p5.Vector",
                    "Number[]",
                    "p5.Vector?"
                ]
            ]
        },
        mag: {
            overloads: [
                [],
                [
                    "p5.Vector"
                ]
            ]
        },
        magSq: {
            overloads: [
                [],
                [
                    "p5.Vector"
                ]
            ]
        },
        dot: {
            overloads: [
                [
                    "Number",
                    "Number?",
                    "Number?"
                ],
                [
                    "p5.Vector"
                ],
                [],
                [
                    "p5.Vector",
                    "p5.Vector"
                ]
            ]
        },
        cross: {
            overloads: [
                [
                    "p5.Vector"
                ],
                [],
                [
                    "p5.Vector",
                    "p5.Vector"
                ]
            ]
        },
        normalize: {
            overloads: [
                [],
                [
                    "p5.Vector",
                    "p5.Vector?"
                ]
            ]
        },
        limit: {
            overloads: [
                [
                    "Number"
                ],
                [],
                [
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ]
            ]
        },
        setMag: {
            overloads: [
                [
                    "Number"
                ],
                [],
                [
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ]
            ]
        },
        heading: {
            overloads: [
                [],
                [
                    "p5.Vector"
                ]
            ]
        },
        setHeading: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        rotate: {
            overloads: [
                [
                    "Number"
                ],
                [],
                [
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ]
            ]
        },
        angleBetween: {
            overloads: [
                [
                    "p5.Vector"
                ],
                [],
                [
                    "p5.Vector",
                    "p5.Vector"
                ]
            ]
        },
        lerp: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number",
                    "Number"
                ],
                [
                    "p5.Vector",
                    "Number"
                ],
                [],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ]
            ]
        },
        slerp: {
            overloads: [
                [
                    "p5.Vector",
                    "Number"
                ],
                [],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "Number",
                    "p5.Vector?"
                ]
            ]
        },
        reflect: {
            overloads: [
                [
                    "p5.Vector"
                ],
                [],
                [
                    "p5.Vector",
                    "p5.Vector",
                    "p5.Vector?"
                ]
            ]
        },
        array: {
            overloads: [
                [],
                [
                    "p5.Vector"
                ]
            ]
        },
        equals: {
            overloads: [
                [
                    "Number?",
                    "Number?",
                    "Number?"
                ],
                [
                    "p5.Vector|Array"
                ],
                [],
                [
                    "p5.Vector|Array",
                    "p5.Vector|Array"
                ]
            ]
        },
        fromAngle: {
            overloads: [
                [
                    "Number",
                    "Number?"
                ]
            ]
        },
        fromAngles: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number?"
                ]
            ]
        },
        random2D: {
            overloads: [
                []
            ]
        },
        random3D: {
            overloads: [
                []
            ]
        },
        dist: {
            overloads: [
                [],
                [
                    "p5.Vector",
                    "p5.Vector"
                ]
            ]
        }
    },
    "p5.Font": {
        textToPaths: {
            overloads: [
                [
                    "String",
                    "Number",
                    "Number",
                    "Number?",
                    "Number?",
                    "Object?"
                ]
            ]
        },
        textToPoints: {
            overloads: [
                [
                    "String",
                    "Number",
                    "Number",
                    "Object?"
                ]
            ]
        },
        textToContours: {
            overloads: [
                [
                    "String",
                    "Number",
                    "Number",
                    "Object?"
                ]
            ]
        },
        textToModel: {
            overloads: [
                [
                    "String",
                    "Number",
                    "Number",
                    "Number",
                    "Number",
                    "Object?",
                    "Number?",
                    "Number?"
                ]
            ]
        }
    },
    "p5.Camera": {
        perspective: {
            overloads: [
                [
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?"
                ]
            ]
        },
        ortho: {
            overloads: [
                [
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?"
                ]
            ]
        },
        frustum: {
            overloads: [
                [
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?"
                ]
            ]
        },
        pan: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        tilt: {
            overloads: [
                [
                    "Number"
                ]
            ]
        },
        lookAt: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number"
                ]
            ]
        },
        camera: {
            overloads: [
                [
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?",
                    "Number?"
                ]
            ]
        },
        move: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number"
                ]
            ]
        },
        setPosition: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number"
                ]
            ]
        },
        set: {
            overloads: [
                [
                    "p5.Camera"
                ]
            ]
        },
        slerp: {
            overloads: [
                [
                    "p5.Camera",
                    "p5.Camera",
                    "Number"
                ]
            ]
        }
    },
    "p5.Framebuffer": {
        resize: {
            overloads: [
                [
                    "Number",
                    "Number"
                ]
            ]
        },
        pixelDensity: {
            overloads: [
                [
                    "Number?"
                ]
            ]
        },
        autoSized: {
            overloads: [
                [
                    "Boolean?"
                ]
            ]
        },
        createCamera: {
            overloads: [
                []
            ]
        },
        remove: {
            overloads: [
                []
            ]
        },
        begin: {
            overloads: [
                []
            ]
        },
        end: {
            overloads: [
                []
            ]
        },
        draw: {
            overloads: [
                [
                    "Function"
                ]
            ]
        },
        get: {
            overloads: [
                [
                    "Number",
                    "Number",
                    "Number",
                    "Number"
                ],
                [],
                [
                    "Number",
                    "Number"
                ]
            ]
        }
    },
    "p5.Shader": {
        version: {
            overloads: [
                []
            ]
        },
        inspectHooks: {
            overloads: [
                []
            ]
        },
        modify: {
            overloads: [
                [
                    "Object?"
                ]
            ]
        },
        copyToContext: {
            overloads: [
                [
                    "p5|p5.Graphics"
                ]
            ]
        },
        setUniform: {
            overloads: [
                [
                    "String",
                    "Boolean|Number|Number[]|p5.Image|p5.Graphics|p5.MediaElement|p5.Texture"
                ]
            ]
        }
    }
};
/**
 * @for p5
 * @requires core
 */ function validateParams(p51, fn, lifecycles) {
    // Cache for Zod schemas
    let schemaRegistry = new Map();
    // Mapping names of p5 types to their constructor functions.
    // p5Constructors:
    //   - Color: f()
    //   - Graphics: f()
    //   - Vector: f()
    // and so on.
    // const p5Constructors = {};
    // NOTE: This is a tempt fix for unit test but is not correct
    // Attaced constructors are `undefined`
    const p5Constructors = Object.keys(p51).reduce((acc, val)=>{
        if (val.match(/^[A-Z]/) && // Starts with a capital
        !val.match(/^[A-Z][A-Z0-9]*$/) && // Is not an all caps constant
        p51[val] instanceof Function // Is a function
        ) {
            acc[val] = p51[val];
        }
        return acc;
    }, {});
    function loadP5Constructors() {
        // Make a list of all p5 classes to be used for argument validation
        // This must be done only when everything has loaded otherwise we get
        // an empty array
        for (let key of Object.keys(p51)){
            // Get a list of all constructors in p5. They are functions whose names
            // start with a capital letter
            if (typeof p51[key] === 'function' && key[0] !== key[0].toLowerCase()) {
                p5Constructors[key] = p51[key];
            }
        }
    }
    // `constantsMap` maps constants to their values, e.g.
    // {
    //   ADD: 'lighter',
    //   ALT: 18,
    //   ARROW: 'default',
    //   AUTO: 'auto',
    //   ...
    // }
    const constantsMap = {};
    for (const [key, value] of Object.entries(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["v"])){
        constantsMap[key] = value;
    }
    // Start initializing `schemaMap` with primitive types. `schemaMap` will
    // eventually contain both primitive types and web API objects.
    const schemaMap = {
        'Any': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["any"])(),
        'Array': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["array"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["any"])()),
        'Boolean': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["boolean"])(),
        'Function': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["function"])(),
        'Integer': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["number"])().int(),
        'Number': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["number"])(),
        'Object': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["object"])({}),
        'String': (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["string"])()
    };
    const webAPIObjects = [
        'AudioNode',
        'HTMLCanvasElement',
        'HTMLElement',
        'KeyboardEvent',
        'MouseEvent',
        'RegExp',
        'TouchEvent',
        'UIEvent',
        'WheelEvent'
    ];
    function generateWebAPISchemas(apiObjects) {
        return apiObjects.reduce((acc, obj)=>{
            acc[obj] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["custom"])((data)=>data instanceof globalThis[obj], {
                message: `Expected a ${obj}`
            });
            return acc;
        }, {});
    }
    const webAPISchemas = generateWebAPISchemas(webAPIObjects);
    // Add web API schemas to the schema map.
    Object.assign(schemaMap, webAPISchemas);
    // For mapping 0-indexed parameters to their ordinal representation, e.g.
    // "first" for 0, "second" for 1, "third" for 2, etc.
    const ordinals = [
        "first",
        "second",
        "third",
        "fourth",
        "fifth",
        "sixth",
        "seventh",
        "eighth",
        "ninth",
        "tenth"
    ];
    function extractFuncNameAndClass(func) {
        const ichDot = func.lastIndexOf('.');
        const funcName = func.slice(ichDot + 1);
        const funcClass = func.slice(0, ichDot !== -1 ? ichDot : 0) || 'p5';
        return {
            funcName,
            funcClass
        };
    }
    function validBracketNesting(type) {
        let level = 0;
        for(let i = 0; i < type.length; i++){
            if (type[i] === '[') {
                level++;
            } else if (type[i] === ']') {
                level--;
                if (level < 0) return false;
            }
        }
        return level === 0;
    }
    /**
   * This is a helper function that generates Zod schemas for a function based on
   * the parameter data from `docs/parameterData.json`.
   *
   * Example parameter data for function `background`:
   * "background": {
        "overloads": [
          ["p5.Color"],
          ["String", "Number?"],
          ["Number", "Number?"],
          ["Number", "Number", "Number", "Number?"],
          ["Number[]"],
          ["p5.Image", "Number?"]
        ]
      }
   * Where each array in `overloads` represents a set of valid overloaded
   * parameters, and `?` is a shorthand for `Optional`.
   *
   * @method generateZodSchemasForFunc
   * @param {String} func - Name of the function. Expect global functions like `sin` and class methods like `p5.Vector.add`
   * @returns {z.ZodSchema} Zod schema
   */ fn.generateZodSchemasForFunc = function(func) {
        const { funcName, funcClass } = extractFuncNameAndClass(func);
        let funcInfo = dataDoc[funcClass][funcName];
        if (!funcInfo) return;
        let overloads = [];
        if (funcInfo.hasOwnProperty('overloads')) {
            overloads = funcInfo.overloads;
        }
        // Returns a schema for a single type, i.e. z.boolean() for `boolean`.
        const generateTypeSchema = (baseType)=>{
            if (!baseType) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["any"])();
            let typeSchema;
            // Check for constants. Note that because we're ultimately interested in the value of
            // the constant, mapping constants to their values via `constantsMap` is
            // necessary.
            if (baseType in constantsMap) {
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["literal"])(constantsMap[baseType]);
            } else if (baseType.match(/^[A-Z][A-Z0-9]*$/) && baseType in fn) {
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["literal"])(fn[baseType]);
            } else if (baseType.startsWith('function')) {
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["function"])();
            } else if (/^p5\.[a-zA-Z0-9]+$/.exec(baseType) || baseType === 'p5') {
                const className = baseType.substring(baseType.indexOf('.') + 1);
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["instanceof"])(p5Constructors[className]);
            } else if (schemaMap[baseType]) {
                typeSchema = schemaMap[baseType];
            } else if (baseType.startsWith('[') && baseType.endsWith(']') && validBracketNesting(baseType.slice(1, -1))) {
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tuple"])(baseType.slice(1, -1).split(/, */g).map((entry)=>generateTypeSchema(entry)));
            } else if (baseType.match(/^[A-Z]/) && baseType in window) {
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["instanceof"])(window[baseType]);
            } else if (baseType.includes('|') && baseType.split('|').every((t)=>validBracketNesting(t))) {
                const types = baseType.split('|');
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["union"])(types.map((t)=>generateTypeSchema(t)).filter((s)=>s !== undefined));
            } else if (baseType.endsWith('[]')) {
                typeSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["array"])(generateTypeSchema(baseType.slice(0, -2)));
            } else {
                throw new Error(`Unsupported type '${baseType}' in parameter validation. Please report this issue.`);
            }
            return typeSchema;
        };
        // Generate a schema for a single parameter. In the case where a parameter can
        // be of multiple types, `generateTypeSchema` is called for each type.
        const generateParamSchema = (param)=>{
            const isOptional = param?.endsWith('?');
            param = param?.replace(/\?$/, '');
            let schema = generateTypeSchema(param);
            return isOptional ? schema.optional() : schema;
        };
        // Note that in Zod, `optional()` only checks for undefined, not the absence
        // of value.
        //
        // Let's say we have a function with 3 parameters, and the last one is
        // optional, i.e. func(a, b, c?). If we only have a z.tuple() for the
        // parameters, where the third schema is optional, then we will only be able
        // to validate func(10, 10, undefined), but not func(10, 10), which is
        // a completely valid call.
        //
        // Therefore, on top of using `optional()`, we also have to generate parameter
        // combinations that are valid for all numbers of parameters.
        const generateOverloadCombinations = (params)=>{
            // No optional parameters, return the original parameter list right away.
            if (!params.some((p)=>p?.endsWith('?'))) {
                return [
                    params
                ];
            }
            const requiredParamsCount = params.filter((p)=>p === null || !p.endsWith('?')).length;
            const result = [];
            for(let i = requiredParamsCount; i <= params.length; i++){
                result.push(params.slice(0, i));
            }
            return result;
        };
        // Generate schemas for each function overload and merge them
        const overloadSchemas = overloads.flatMap((overload)=>{
            const combinations = generateOverloadCombinations(overload);
            return combinations.map((combo)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tuple"])(combo.map((p)=>generateParamSchema(p))// For now, ignore schemas that cannot be mapped to a defined type
                .filter((schema)=>schema !== undefined)));
        });
        return overloadSchemas.length === 1 ? overloadSchemas[0] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["union"])(overloadSchemas);
    };
    /**
   * Finds the closest schema to the input arguments.
   *
   * This is a helper function that identifies the closest schema to the input
   * arguments, in the case of an initial validation error. We will then use the
   * closest schema to generate a friendly error message.
   *
   * @private
   * @param {z.ZodSchema} schema - Zod schema.
   * @param {Array} args - User input arguments.
   * @returns {z.ZodSchema} Closest schema matching the input arguments.
   */ fn.findClosestSchema = function(schema, args) {
        if (!(schema instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodUnion"])) {
            return schema;
        }
        // Helper function that scores how close the input arguments are to a schema.
        // Lower score means closer match.
        const scoreSchema = (schema)=>{
            let score = Infinity;
            if (!(schema instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ZodTuple"])) {
                console.warn('Schema below is not a tuple: ');
                printZodSchema(schema);
                return score;
            }
            const numArgs = args.length;
            const schemaItems = schema.items;
            const numSchemaItems = schemaItems.length;
            const numRequiredSchemaItems = schemaItems.filter((item)=>!item.isOptional()).length;
            if (numArgs >= numRequiredSchemaItems && numArgs <= numSchemaItems) {
                score = 0;
            } else {
                score = Math.abs(numArgs < numRequiredSchemaItems ? numRequiredSchemaItems - numArgs : numArgs - numSchemaItems) * 4;
            }
            for(let i = 0; i < Math.min(schemaItems.length, args.length); i++){
                const paramSchema = schemaItems[i];
                const arg = args[i];
                if (!paramSchema.safeParse(arg).success) score++;
            }
            return score;
        };
        // Default to the first schema, so that we are guaranteed to return a result.
        let closestSchema = schema._def.options[0];
        // We want to return the schema with the lowest score.
        let bestScore = Infinity;
        const schemaUnion = schema._def.options;
        schemaUnion.forEach((schema)=>{
            const score = scoreSchema(schema);
            if (score < bestScore) {
                closestSchema = schema;
                bestScore = score;
            }
        });
        return closestSchema;
    };
    /**
   * Prints a friendly error message after parameter validation, if validation
   * has failed.
   *
   * @method _friendlyParamError
   * @private
   * @param {z.ZodError} zodErrorObj - The Zod error object containing validation errors.
   * @param {String} func - Name of the function. Expect global functions like `sin` and class methods like `p5.Vector.add`
   * @returns {String} The friendly error message.
   */ fn.friendlyParamError = function(zodErrorObj, func, args) {
        let message = '🌸 p5.js says: ';
        let isVersionError = false;
        // The `zodErrorObj` might contain multiple errors of equal importance
        // (after scoring the schema closeness in `findClosestSchema`). Here, we
        // always print the first error so that user can work through the errors
        // one by one.
        let currentError = zodErrorObj.errors[0];
        // Helper function to build a type mismatch message.
        const buildTypeMismatchMessage = (actualType, expectedTypeStr, position)=>{
            const positionStr = position ? `at the ${ordinals[position]} parameter` : '';
            const actualTypeStr = actualType ? `, but received ${actualType}` : '';
            return `Expected ${expectedTypeStr} ${positionStr}${actualTypeStr}`;
        };
        // Union errors occur when a parameter can be of multiple types but is not
        // of any of them. In this case, aggregate all possible types and print
        // a friendly error message that indicates what the expected types are at
        // which position (position is not 0-indexed, for accessibility reasons).
        const processUnionError = (error)=>{
            const expectedTypes = new Set();
            let actualType;
            error.unionErrors.forEach((err)=>{
                const issue = err.issues[0];
                if (issue) {
                    if (!actualType) {
                        actualType = issue.received;
                    }
                    if (issue.code === 'invalid_type') {
                        expectedTypes.add(issue.expected);
                    } else if (issue.code === 'invalid_literal') {
                        expectedTypes.add("constant (please refer to documentation for allowed values)");
                    } else if (issue.code === 'custom') {
                        const match = issue.message.match(/Input not instance of (\w+)/);
                        if (match) expectedTypes.add(match[1]);
                    }
                }
            });
            if (expectedTypes.size > 0) {
                if (error.path?.length > 0 && args[error.path[0]] instanceof Promise) {
                    message += 'Did you mean to put `await` before a loading function? ' + 'An unexpected Promise was found. ';
                    isVersionError = true;
                }
                const expectedTypesStr = Array.from(expectedTypes).join(' or ');
                const position = error.path.join('.');
                message += buildTypeMismatchMessage(actualType, expectedTypesStr, position);
            }
            return message;
        };
        switch(currentError.code){
            case 'invalid_union':
                {
                    processUnionError(currentError);
                    break;
                }
            case 'too_small':
                {
                    const minArgs = currentError.minimum;
                    message += `Expected at least ${minArgs} argument${minArgs > 1 ? 's' : ''}, but received fewer`;
                    break;
                }
            case 'invalid_type':
                {
                    message += buildTypeMismatchMessage(currentError.received, currentError.expected, currentError.path.join('.'));
                    break;
                }
            case 'too_big':
                {
                    const maxArgs = currentError.maximum;
                    message += `Expected at most ${maxArgs} argument${maxArgs > 1 ? 's' : ''}, but received more`;
                    break;
                }
            default:
                {
                    console.log('Zod error object', currentError);
                }
        }
        // Let the user know which function is generating the error.
        message += ` in ${func}().`;
        // Generates a link to the documentation based on the given function name.
        // TODO: Check if the link is reachable before appending it to the error
        // message.
        const generateDocumentationLink = (func)=>{
            const { funcName, funcClass } = extractFuncNameAndClass(func);
            const p5BaseUrl = 'https://p5js.org/reference';
            const url = `${p5BaseUrl}/${funcClass}/${funcName}`;
            return url;
        };
        if (currentError.code === 'too_big' || currentError.code === 'too_small') {
            const documentationLink = generateDocumentationLink(func);
            message += ` For more information, see ${documentationLink}.`;
        }
        if (isVersionError) {
            p51._error(this, message);
        } else {
            console.log(message);
        }
        return message;
    };
    /**
   * Runs parameter validation by matching the input parameters to Zod schemas
   * generated from the parameter data from `docs/parameterData.json`.
   *
   * @private
   * @param {String} func - Name of the function.
   * @param {Array} args - User input arguments.
   * @returns {Object} The validation result.
   * @returns {Boolean} result.success - Whether the validation was successful.
   * @returns {any} [result.data] - The parsed data if validation was successful.
   * @returns {String} [result.error] - The validation error message if validation has failed.
   */ fn.validate = function(func, args) {
        if (p51.disableFriendlyErrors) {
            return; // skip FES
        }
        if (!Array.isArray(args)) {
            args = Array.from(args);
        }
        // An edge case: even when all arguments are optional and therefore,
        // theoretically allowed to stay undefined and valid, it is likely that the
        // user intended to call the function with non-undefined arguments. Skip
        // regular workflow and return a friendly error message right away.
        if (Array.isArray(args) && args.every((arg)=>arg === undefined)) {
            const undefinedErrorMessage = `🌸 p5.js says: All arguments for ${func}() are undefined. There is likely an error in the code.`;
            return {
                success: false,
                error: undefinedErrorMessage
            };
        }
        let funcSchemas = schemaRegistry.get(func);
        if (!funcSchemas) {
            funcSchemas = fn.generateZodSchemasForFunc(func);
            if (!funcSchemas) return;
            schemaRegistry.set(func, funcSchemas);
        }
        try {
            return {
                success: true,
                data: funcSchemas.parse(args)
            };
        } catch (error) {
            const closestSchema = fn.findClosestSchema(funcSchemas, args);
            const zodError = closestSchema.safeParse(args).error;
            const errorMessage = fn.friendlyParamError(zodError, func, args);
            return {
                success: false,
                error: errorMessage
            };
        }
    };
    lifecycles.presetup = function() {
        loadP5Constructors();
        const excludes = [
            'validate'
        ];
        for(const f in this){
            if (!excludes.includes(f) && !f.startsWith('_') && typeof this[f] === 'function') {
                const copy = this[f];
                this[f] = function(...args) {
                    this.validate(f, args);
                    return copy.call(this, ...args);
                };
            }
        }
    };
}
if (typeof p5 !== 'undefined') {
    validateParams(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/sketch_verifier.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>sketchVerifier),
    "verifierUtils": (()=>verifierUtils)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/acorn/dist/acorn.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$acorn$2d$walk$2f$dist$2f$walk$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/acorn-walk/dist/walk.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
;
;
;
// List of functions to ignore as they either are meant to be re-defined or
// generate false positive outputs.
const ignoreFunction = [
    'setup',
    'draw',
    'preload',
    'deviceMoved',
    'deviceTurned',
    'deviceShaken',
    'doubleClicked',
    'mousePressed',
    'mouseReleased',
    'mouseMoved',
    'mouseDragged',
    'mouseClicked',
    'mouseWheel',
    'touchStarted',
    'touchMoved',
    'touchEnded',
    'keyPressed',
    'keyReleased',
    'keyTyped',
    'windowResized'
];
const verifierUtils = {
    /**
   * Fetches the contents of a script element in the user's sketch.
   *
   * @private
   * @method fetchScript
   * @param {HTMLScriptElement} script
   * @returns {Promise<string>}
 */ fetchScript: async function(script) {
        if (script.src) {
            try {
                const contents = await fetch(script.src).then((res)=>res.text());
                return contents;
            } catch (error) {
                // TODO: Handle CORS error here.
                console.error('Error fetching script:', error);
                return '';
            }
        } else {
            return script.textContent;
        }
    },
    /**
   * Extracts the user-defined variables and functions from the user code with
   * the help of Espree parser.
   *
   * @private
   * @method extractUserDefinedVariablesAndFuncs
   * @param {String} code - The code to extract variables and functions from.
   * @returns {Object} An object containing the user's defined variables and functions.
   * @returns {Array<{name: string, line: number}>} [userDefinitions.variables] Array of user-defined variable names and their line numbers.
   * @returns {Array<{name: string, line: number}>} [userDefinitions.functions] Array of user-defined function names and their line numbers.
   */ extractUserDefinedVariablesAndFuncs: function(code) {
        const userDefinitions = {
            variables: [],
            functions: []
        };
        // The line numbers from the parser are consistently off by one, add
        // `lineOffset` here to correct them.
        const lineOffset = -1;
        try {
            const ast = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parse"])(code, {
                ecmaVersion: 2021,
                sourceType: 'module',
                locations: true // This helps us get the line number.
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$acorn$2d$walk$2f$dist$2f$walk$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["simple"])(ast, {
                VariableDeclarator (node) {
                    if (node.id.type === 'Identifier') {
                        const category = node.init && [
                            'ArrowFunctionExpression',
                            'FunctionExpression'
                        ].includes(node.init.type) ? 'functions' : 'variables';
                        userDefinitions[category].push({
                            name: node.id.name,
                            line: node.loc.start.line + lineOffset
                        });
                    }
                },
                FunctionDeclaration (node) {
                    if (node.id && node.id.type === 'Identifier') {
                        userDefinitions.functions.push({
                            name: node.id.name,
                            line: node.loc.start.line + lineOffset
                        });
                    }
                },
                // We consider class declarations to be a special form of variable
                // declaration.
                ClassDeclaration (node) {
                    if (node.id && node.id.type === 'Identifier') {
                        userDefinitions.variables.push({
                            name: node.id.name,
                            line: node.loc.start.line + lineOffset
                        });
                    }
                }
            });
        } catch (error) {
            // TODO: Replace this with a friendly error message.
            console.error('Error parsing code:', error);
        }
        return userDefinitions;
    },
    /**
   * Checks user-defined variables and functions for conflicts with p5.js
   * constants and global functions.
   *
   * This function performs two main checks:
   * 1. Verifies if any user definition conflicts with p5.js constants.
   * 2. Checks if any user definition conflicts with global functions from
   * p5.js renderer classes.
   *
   * If a conflict is found, it reports a friendly error message and halts
   * further checking.
   *
   * @private
   * @param {Object} userDefinitions - An object containing user-defined variables and functions.
   * @param {Array<{name: string, line: number}>} userDefinitions.variables - Array of user-defined variable names and their line numbers.
   * @param {Array<{name: string, line: number}>} userDefinitions.functions - Array of user-defined function names and their line numbers.
   * @returns {boolean} - Returns true if a conflict is found, false otherwise.
   */ checkForConstsAndFuncs: function(userDefinitions, p51) {
        const allDefinitions = [
            ...userDefinitions.variables,
            ...userDefinitions.functions
        ];
        // Helper function that generates a friendly error message that contains
        // the type of redefinition (constant or function), the name of the
        // redefinition, the line number in user's code, and a link to its
        // reference on the p5.js website.
        function generateFriendlyError(errorType, name, line) {
            const url = `https://p5js.org/reference/p5/${name}`;
            const message = `${errorType} "${name}" on line ${line} is being redeclared and conflicts with a p5.js ${errorType.toLowerCase()}. p5.js reference: ${url}`;
            return message;
        }
        // Checks for constant redefinitions.
        for (let { name, line } of allDefinitions){
            const libDefinition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["v"][name];
            if (libDefinition !== undefined) {
                const message = generateFriendlyError('Constant', name, line);
                console.log(message);
                return true;
            }
        }
        // The new rules for attaching anything to global are (if true for both of
        // the following):
        //   - It is a member of p5.prototype
        //   - Its name does not start with `_`
        const globalFunctions = new Set(Object.getOwnPropertyNames(p51.prototype).filter((key)=>!key.startsWith('_') && key !== 'constructor'));
        for (let { name, line } of allDefinitions){
            if (!ignoreFunction.includes(name) && globalFunctions.has(name)) {
                const message = generateFriendlyError('Function', name, line);
                console.log(message);
                return true;
            }
        }
        return false;
    },
    /**
   * Extracts the user's code from the script fetched. Note that this method
   * assumes that the user's code is always the last script element in the
   * sketch.
   *
   * @private
   * @method getUserCode
   * @returns {Promise<string>} The user's code as a string.
   */ getUserCode: async function() {
        // TODO: think of a more robust way to get the user's code. Refer to
        // https://github.com/processing/p5.js/pull/7293.
        const scripts = document.querySelectorAll('script');
        const userCodeScript = scripts[scripts.length - 1];
        const userCode = await verifierUtils.fetchScript(userCodeScript);
        return userCode;
    },
    /**
   * @private
   */ runFES: async function(p51) {
        const userCode = await verifierUtils.getUserCode();
        const userDefinedVariablesAndFuncs = verifierUtils.extractUserDefinedVariablesAndFuncs(userCode);
        verifierUtils.checkForConstsAndFuncs(userDefinedVariablesAndFuncs, p51);
    }
};
function sketchVerifier(p51, _fn, lifecycles) {
    lifecycles.presetup = async function() {
        if (!p51.disableFriendlyErrors) {
            verifierUtils.runFES(p51);
        }
    };
}
if (typeof p5 !== 'undefined') {
    sketchVerifier(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/file_errors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>fileErrors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/internationalization.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next/dist/esm/i18next.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2d$browser$2d$languagedetector$2f$dist$2f$esm$2f$i18nextBrowserLanguageDetector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js [app-ssr] (ecmascript)");
;
;
;
/**
 * @for p5
 * @requires core
 */ function fileErrors(p51, fn) {
    // mapping used by `_friendlyFileLoadError`
    const fileLoadErrorCases = (num, filePath)=>{
        const suggestion = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.suggestion', {
            filePath,
            url: 'https://github.com/processing/p5.js/wiki/Local-server'
        });
        switch(num){
            case 0:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.image', {
                        suggestion
                    }),
                    method: 'loadImage'
                };
            case 1:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.xml', {
                        suggestion
                    }),
                    method: 'loadXML'
                };
            case 2:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.table', {
                        suggestion
                    }),
                    method: 'loadTable'
                };
            case 3:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.strings', {
                        suggestion
                    }),
                    method: 'loadStrings'
                };
            case 4:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.font', {
                        suggestion
                    }),
                    method: 'loadFont'
                };
            case 5:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.json', {
                        suggestion
                    }),
                    method: 'loadJSON'
                };
            case 6:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.bytes', {
                        suggestion
                    }),
                    method: 'loadBytes'
                };
            case 7:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.large'),
                    method: 'loadX'
                };
            case 8:
                return {
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["translator"])('fes.fileLoadError.gif'),
                    method: 'loadImage'
                };
        }
    };
    /**
   * Called internally if there is an error during file loading.
   *
   * Generates and prints a friendly error message using key:
   * "fes.fileLoadError.[*]".
   *
   * @method _friendlyFileLoadError
   * @private
   * @param  {Number} errorType   Number of file load error type
   * @param  {String} filePath    Path to file caused the error
   */ p51._friendlyFileLoadError = function(errorType, filePath) {
        const { message, method } = fileLoadErrorCases(errorType, filePath);
        p51._friendlyError(message, method, 3);
    };
}
if (typeof p5 !== 'undefined') {
    fileErrors(p5, p5.prototype);
}
;
}}),
"[project]/node_modules/p5/dist/core/friendly_errors/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>friendlyErrors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$fes_core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/fes_core.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$stacktrace$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/stacktrace.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$param_validator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/param_validator.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$sketch_verifier$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/sketch_verifier.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$file_errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/file_errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/internationalization.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next/dist/esm/i18next.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2d$browser$2d$languagedetector$2f$dist$2f$esm$2f$i18nextBrowserLanguageDetector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$browser_errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/friendly_errors/browser_errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$acorn$2f$dist$2f$acorn$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/acorn/dist/acorn.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$acorn$2d$walk$2f$dist$2f$walk$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/acorn-walk/dist/walk.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
function friendlyErrors(p5) {
    p5.registerAddon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$fes_core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
    p5.registerAddon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$stacktrace$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
    p5.registerAddon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$param_validator$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
    p5.registerAddon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$sketch_verifier$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
    p5.registerAddon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$friendly_errors$2f$file_errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
}
;
}}),
"[project]/node_modules/p5/dist/core/init.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "_globalInit": (()=>_globalInit),
    "waitForDocumentReady": (()=>waitForDocumentReady),
    "waitingForTranslator": (()=>waitingForTranslator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$main$2d$s72KWcUy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/main-s72KWcUy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/internationalization.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$constants$2d$C$2d$g_eAdC$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/constants-C-g_eAdC.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$transform$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/transform.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$structure$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/structure.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$environment$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/environment.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$math$2f$p5$2e$Vector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/math/p5.Vector.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$rendering$2d2d$aAe5aq3$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/rendering--aAe5aq3.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$creating_reading$2d$D4AAKRbx$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/creating_reading-D4AAKRbx.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$color$2f$color_spaces$2f$hsb$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/color/color_spaces/hsb.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$dom$2f$p5$2e$Element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/dom/p5.Element.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$dom$2f$p5$2e$File$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/dom/p5.File.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$io$2f$p5$2e$XML$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/io/p5.XML.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$p5$2e$Renderer$2d$CwAYZOC2$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/p5.Renderer-CwAYZOC2.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$image$2f$filters$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/image/filters.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$shape$2f$custom_shapes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/shape/custom_shapes.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$States$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/States.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$io$2f$utilities$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/io/utilities.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$saver$2f$FileSaver$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/file-saver/FileSaver.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$dom$2f$p5$2e$MediaElement$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/dom/p5.MediaElement.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$shape$2f$2d_primitives$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/shape/2d_primitives.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/core/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$shape$2f$attributes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/shape/attributes.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$shape$2f$curves$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/shape/curves.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$shape$2f$vertex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/shape/vertex.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$color$2f$setting$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/color/setting.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$omggif$2f$omggif$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/omggif/omggif.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$io$2f$csv$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/io/csv.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$gifenc$2f$dist$2f$gifenc$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/gifenc/dist/gifenc.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$image$2f$pixels$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/image/pixels.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$GeometryBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/GeometryBuilder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$math$2f$p5$2e$Matrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/math/p5.Matrix.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$math$2f$Matrices$2f$Matrix$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/math/Matrices/Matrix.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$math$2f$Matrices$2f$MatrixInterface$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/math/Matrices/MatrixInterface.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$p5$2e$Geometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/p5.Geometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$p5$2e$DataArray$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/p5.DataArray.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$p5$2e$Quat$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/p5.Quat.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$p5$2e$RenderBuffer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/p5.RenderBuffer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$ShapeBuilder$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/ShapeBuilder.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$libtess$2f$libtess$2e$min$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/libtess/libtess.min.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$webgl$2f$GeometryBufferCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/webgl/GeometryBufferCache.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$image$2f$const$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/image/const.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$math$2f$trigonometry$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/math/trigonometry.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$image$2f$filterRenderer2D$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/p5/dist/image/filterRenderer2D.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2f$dist$2f$esm$2f$i18next$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next/dist/esm/i18next.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$i18next$2d$browser$2d$languagedetector$2f$dist$2f$esm$2f$i18nextBrowserLanguageDetector$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * This file setup global mode automatic instantiation
 *
 * if sketch is on window
 * assume "global" mode
 * and instantiate p5 automatically
 * otherwise do nothing
 *
 * @private
 * @return {Undefined}
 */ const _globalInit = ()=>{
    // Could have been any property defined within the p5 constructor.
    // If that property is already a part of the global object,
    // this code has already run before, likely due to a duplicate import
    if (typeof window._setupDone !== 'undefined') {
        console.warn('p5.js seems to have been imported multiple times. Please remove the duplicate import');
        return;
    }
    if (!window.mocha) {
        const p5ReadyEvent = new Event('p5Ready');
        window.dispatchEvent(p5ReadyEvent);
        // If there is a setup or draw function on the window
        // then instantiate p5 in "global" mode
        if ((window.setup && typeof window.setup === 'function' || window.draw && typeof window.draw === 'function') && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$main$2d$s72KWcUy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p"].instance) {
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$main$2d$s72KWcUy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p"]();
        }
    }
};
// make a promise that resolves when the document is ready
const waitForDocumentReady = ()=>new Promise((resolve, reject)=>{
        // if the page is ready, initialize p5 immediately
        if (document.readyState === 'complete') {
            resolve();
        // if the page is still loading, add an event listener
        // and initialize p5 as soon as it finishes loading
        } else {
            window.addEventListener('load', resolve, false);
        }
    });
// only load translations if we're using the full, un-minified library
const waitingForTranslator = typeof IS_MINIFIED === 'undefined' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$p5$2f$dist$2f$core$2f$internationalization$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["initialize"])() : Promise.resolve();
;
}}),

};

//# sourceMappingURL=node_modules_p5_dist_core_96a2c2f6._.js.map